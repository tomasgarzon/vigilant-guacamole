/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllocationDetail;
import org.openapitools.client.model.AllocationList;
import org.openapitools.client.model.AssetDetail;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.AuthenticationResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.ClientReferral;
import org.openapitools.client.model.ConversationCreate;
import org.openapitools.client.model.CreateOrder;
import org.openapitools.client.model.CurrentAllocation;
import org.openapitools.client.model.DepositCreate;
import org.openapitools.client.model.DepositDetail;
import org.openapitools.client.model.ETSForecastRequest;
import org.openapitools.client.model.EmailVerifyRequest;
import org.openapitools.client.model.EmailVerifyView;
import org.openapitools.client.model.FeedActivityList;
import org.openapitools.client.model.ForecastDecumulationRequest;
import org.openapitools.client.model.ForecastRequest;
import org.openapitools.client.model.Goal;
import org.openapitools.client.model.IntradayPrice;
import org.openapitools.client.model.InvestorModelPortfolio;
import org.openapitools.client.model.InvestorWithdrawalCreate;
import org.openapitools.client.model.InvoiceDetails;
import org.threeten.bp.LocalDate;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.MinimumAppVersion;
import org.openapitools.client.model.ModelPortfolioForecastRequest;
import org.openapitools.client.model.NucoroSetting;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.OrderList;
import org.openapitools.client.model.PaginatedAccessLogList;
import org.openapitools.client.model.PaginatedAllocationListList;
import org.openapitools.client.model.PaginatedAssetCategoryList;
import org.openapitools.client.model.PaginatedAssetGrowthList;
import org.openapitools.client.model.PaginatedAssetListList;
import org.openapitools.client.model.PaginatedBasePortfolioTypeRestrictionsList;
import org.openapitools.client.model.PaginatedCategoryList;
import org.openapitools.client.model.PaginatedConversationListList;
import org.openapitools.client.model.PaginatedCoreCategoryGroupList;
import org.openapitools.client.model.PaginatedCountryListList;
import org.openapitools.client.model.PaginatedDepositListList;
import org.openapitools.client.model.PaginatedFeedActivityListList;
import org.openapitools.client.model.PaginatedGoalList;
import org.openapitools.client.model.PaginatedIntradayPriceList;
import org.openapitools.client.model.PaginatedInvestorModelPortfolioList;
import org.openapitools.client.model.PaginatedInvestorWithdrawalListList;
import org.openapitools.client.model.PaginatedInvoiceListList;
import org.openapitools.client.model.PaginatedMessageList;
import org.openapitools.client.model.PaginatedNationalDocumentList;
import org.openapitools.client.model.PaginatedOrderListList;
import org.openapitools.client.model.PaginatedPortfolioListList;
import org.openapitools.client.model.PaginatedPortfolioPerformanceList;
import org.openapitools.client.model.PaginatedPortfolioPerformancePositionsList;
import org.openapitools.client.model.PaginatedPortfolioTypeList;
import org.openapitools.client.model.PaginatedPresetCategoryGroupList;
import org.openapitools.client.model.PaginatedPriceList;
import org.openapitools.client.model.PaginatedQuestionList;
import org.openapitools.client.model.PaginatedRebalanceList;
import org.openapitools.client.model.PaginatedTosList;
import org.openapitools.client.model.PatchedGoal;
import org.openapitools.client.model.PatchedPortfolioUpdate;
import org.openapitools.client.model.PortalSettingValueList;
import org.openapitools.client.model.PortfolioCreate;
import org.openapitools.client.model.PortfolioDetail;
import org.openapitools.client.model.PortfolioTypeRestrictions;
import org.openapitools.client.model.PortfolioUpdate;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.Rebalance;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.Subscribe;
import org.openapitools.client.model.Tos;
import java.util.UUID;
import org.openapitools.client.model.Unsubscribe;
import org.openapitools.client.model.WebsocketAuthentication;
import org.openapitools.client.model.WithdrawalDetail;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiApi
 */
@Ignore
public class ApiApiTest {

    private final ApiApi api = new ApiApi();

    
    /**
     * 
     *
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSchemaRetrieveTest() throws ApiException {
        String format = null;
        String lang = null;
        Map<String, Object> response = api.apiSchemaRetrieve(format, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AdviceEnginesEtsCategoriesListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedCategoryList response = api.apiV2AdviceEnginesEtsCategoriesList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AdviceEnginesEtsCoreCategoryGroupsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedCoreCategoryGroupList response = api.apiV2AdviceEnginesEtsCoreCategoryGroupsList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The forecast positions and amounts for the time_horizon and  risk_level chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AdviceEnginesEtsForecastCreateTest() throws ApiException {
        ETSForecastRequest etSForecastRequest = null;
        ETSForecastRequest response = api.apiV2AdviceEnginesEtsForecastCreate(etSForecastRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AdviceEnginesEtsPresetCategoryGroupsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedPresetCategoryGroupList response = api.apiV2AdviceEnginesEtsPresetCategoryGroupsList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * The forecast positions and amounts for the time_horizon chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AdviceEnginesModelPortfolioForecastCreateTest() throws ApiException {
        ModelPortfolioForecastRequest modelPortfolioForecastRequest = null;
        ModelPortfolioForecastRequest response = api.apiV2AdviceEnginesModelPortfolioForecastCreate(modelPortfolioForecastRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AdviceEnginesModelPortfolioModelPortfoliosListTest() throws ApiException {
        Map<String, Object> extraData = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        Integer riskHigher = null;
        Integer riskLevel = null;
        Integer riskLower = null;
        PaginatedInvestorModelPortfolioList response = api.apiV2AdviceEnginesModelPortfolioModelPortfoliosList(extraData, limit, name, offset, riskHigher, riskLevel, riskLower);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveTest() throws ApiException {
        UUID uuid = null;
        InvestorModelPortfolio response = api.apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieve(uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all asset categories
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AssetsCategoriesListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String type = null;
        PaginatedAssetCategoryList response = api.apiV2AssetsCategoriesList(limit, offset, type);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AssetsIntradayPricesLatestRetrieveTest() throws ApiException {
        UUID assetIdentifier = null;
        IntradayPrice response = api.apiV2AssetsIntradayPricesLatestRetrieve(assetIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AssetsIntradayPricesListTest() throws ApiException {
        UUID assetIdentifier = null;
        LocalDate dateAfter = null;
        LocalDate dateBefore = null;
        OffsetDateTime datetimeAfter = null;
        OffsetDateTime datetimeBefore = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedIntradayPriceList response = api.apiV2AssetsIntradayPricesList(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * A list of Assets filtered by category codes. Default is an empty dict which returns the whole universe.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AssetsListTest() throws ApiException {
        String assetType = null;
        List<String> categoryCode = null;
        List<String> categoryType = null;
        Integer currency = null;
        String isin = null;
        Integer limit = null;
        Integer market = null;
        String name = null;
        Integer offset = null;
        String status = null;
        String ticker = null;
        PaginatedAssetListList response = api.apiV2AssetsList(assetType, categoryCode, categoryType, currency, isin, limit, market, name, offset, status, ticker);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve asset&#39;s yearly performance.  This View overwrites ListAPIView&#39;s &#39;list&#39; method because it doesn&#39;t have any hook that allows us to call &#39;get_asset_price_year_graph after the filtering is applied.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AssetsPerformanceListTest() throws ApiException {
        UUID assetIdentifier = null;
        BigDecimal dateYearAfter = null;
        BigDecimal dateYearBefore = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedAssetGrowthList response = api.apiV2AssetsPerformanceList(assetIdentifier, dateYearAfter, dateYearBefore, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AssetsPricesLatestRetrieveTest() throws ApiException {
        UUID assetIdentifier = null;
        Price response = api.apiV2AssetsPricesLatestRetrieve(assetIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AssetsPricesListTest() throws ApiException {
        UUID assetIdentifier = null;
        LocalDate dateAfter = null;
        LocalDate dateBefore = null;
        OffsetDateTime datetimeAfter = null;
        OffsetDateTime datetimeBefore = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedPriceList response = api.apiV2AssetsPricesList(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allows get an asset instance by * UUID * ISIN * ISIN &amp; MARKET_CODE * ISIN &amp; MARKET_CODE &amp; CURRENCY_CODE  Examples:     * assets/a66633d7-4418-4c85-9582-01c80df531d4/     * assets/IE00B579F325/     * assets/IE00B579F325_XETR_GBP/     * assets/IE00B579F325_XETR/
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2AssetsRetrieveTest() throws ApiException {
        UUID assetIdentifier = null;
        AssetDetail response = api.apiV2AssetsRetrieve(assetIdentifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2BillingInvoicesListTest() throws ApiException {
        LocalDate dateFrom = null;
        LocalDate dateTo = null;
        Integer limit = null;
        Integer offset = null;
        String status = null;
        PaginatedInvoiceListList response = api.apiV2BillingInvoicesList(dateFrom, dateTo, limit, offset, status);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2BillingInvoicesRetrieveTest() throws ApiException {
        UUID uuid = null;
        String format = null;
        InvoiceDetails response = api.apiV2BillingInvoicesRetrieve(uuid, format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2BrokerOrdersCreateTest() throws ApiException {
        UUID portfolioUuid = null;
        CreateOrder createOrder = null;
        CreateOrder response = api.apiV2BrokerOrdersCreate(portfolioUuid, createOrder);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancel or request cancellation to the broker
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2BrokerOrdersDestroyTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        api.apiV2BrokerOrdersDestroy(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2BrokerOrdersListTest() throws ApiException {
        UUID portfolioUuid = null;
        String adviceExternalId = null;
        String asset = null;
        LocalDate completedAfter = null;
        LocalDate completedBefore = null;
        Map<String, Object> extraData = null;
        Integer limit = null;
        Integer offset = null;
        String portfolio = null;
        String status = null;
        PaginatedOrderListList response = api.apiV2BrokerOrdersList(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2BrokerOrdersRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        OrderList response = api.apiV2BrokerOrdersRetrieve(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Request e-mail account verification notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsMeVerifyEmailCreateTest() throws ApiException {
        EmailVerifyRequest emailVerifyRequest = null;
        EmailVerifyRequest response = api.apiV2ClientsMeVerifyEmailCreate(emailVerifyRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsNationalDocumentsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedNationalDocumentList response = api.apiV2ClientsNationalDocumentsList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the currently logged in client referral code
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsReferralRetrieveTest() throws ApiException {
        String referralCode = null;
        ClientReferral response = api.apiV2ClientsReferralRetrieve(referralCode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Verify e-mail account with the given email token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsVerifyEmailUpdateTest() throws ApiException {
        UUID uuid = null;
        EmailVerifyView emailVerifyView = null;
        EmailVerifyView response = api.apiV2ClientsVerifyEmailUpdate(uuid, emailVerifyView);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the latest access to the client&#39;s account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2FeedsAccessLogsListTest() throws ApiException {
        String browser = null;
        String browserVersion = null;
        String channel = null;
        String city = null;
        Integer country = null;
        String deviceBrand = null;
        String deviceModel = null;
        String ipAddress = null;
        Integer limit = null;
        Integer offset = null;
        String os = null;
        String osVersion = null;
        String userAgent = null;
        PaginatedAccessLogList response = api.apiV2FeedsAccessLogsList(browser, browserVersion, channel, city, country, deviceBrand, deviceModel, ipAddress, limit, offset, os, osVersion, userAgent);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2FeedsActivitiesListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> target = null;
        PaginatedFeedActivityListList response = api.apiV2FeedsActivitiesList(limit, offset, target);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2GoalsCreateTest() throws ApiException {
        UUID goalUuid = null;
        Goal goal = null;
        Goal response = api.apiV2GoalsCreate(goalUuid, goal);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a Goal Forecast Decumulation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2GoalsDecumulationCreateTest() throws ApiException {
        ForecastDecumulationRequest forecastDecumulationRequest = null;
        ForecastDecumulationRequest response = api.apiV2GoalsDecumulationCreate(forecastDecumulationRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2GoalsDestroyTest() throws ApiException {
        UUID goalUuid = null;
        UUID uuid = null;
        api.apiV2GoalsDestroy(goalUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a Goal Forecast
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2GoalsForecastCreateTest() throws ApiException {
        ForecastRequest forecastRequest = null;
        ForecastRequest response = api.apiV2GoalsForecastCreate(forecastRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2GoalsListTest() throws ApiException {
        UUID goalUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedGoalList response = api.apiV2GoalsList(goalUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2GoalsPartialUpdateTest() throws ApiException {
        UUID goalUuid = null;
        UUID uuid = null;
        PatchedGoal patchedGoal = null;
        Goal response = api.apiV2GoalsPartialUpdate(goalUuid, uuid, patchedGoal);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2GoalsRetrieveTest() throws ApiException {
        UUID goalUuid = null;
        UUID uuid = null;
        Goal response = api.apiV2GoalsRetrieve(goalUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all messages from a conversation uuid
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2InboxConversationDetailMessagesListTest() throws ApiException {
        UUID conversation = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedMessageList response = api.apiV2InboxConversationDetailMessagesList(conversation, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2InboxConversationsCreateTest() throws ApiException {
        UUID uuid = null;
        Integer portal = null;
        OffsetDateTime created = null;
        String subject = null;
        Message messages = null;
        ConversationCreate response = api.apiV2InboxConversationsCreate(uuid, portal, created, subject, messages);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2InboxConversationsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedConversationListList response = api.apiV2InboxConversationsList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View to access to an attachment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2InboxConversationsMessagesAttachmentsRetrieveTest() throws ApiException {
        UUID conversation = null;
        UUID message = null;
        UUID uuid = null;
        String format = null;
        Attachment response = api.apiV2InboxConversationsMessagesAttachmentsRetrieve(conversation, message, uuid, format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * View for creating message on a specific conversation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2InboxConversationsMessagesCreateTest() throws ApiException {
        UUID conversation = null;
        String user = null;
        OffsetDateTime readDate = null;
        OffsetDateTime created = null;
        List<Attachment> attachments = null;
        UUID uuid = null;
        String content = null;
        Message response = api.apiV2InboxConversationsMessagesCreate(conversation, user, readDate, created, attachments, uuid, content);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the number of the last required APP Version for a platform.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2MobileVersionRetrieveTest() throws ApiException {
        String platform = null;
        MinimumAppVersion response = api.apiV2MobileVersionRetrieve(platform);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PlatformSettingsListTest() throws ApiException {
        List<NucoroSetting> response = api.apiV2PlatformSettingsList();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the list of countries
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortalCountriesListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedCountryListList response = api.apiV2PortalCountriesList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortalSettingsRetrieveTest() throws ApiException {
        PortalSettingValueList response = api.apiV2PortalSettingsRetrieve();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the current ToS for the Portal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortalTosCurrentRetrieveTest() throws ApiException {
        Tos response = api.apiV2PortalTosCurrentRetrieve();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List all ToS for the current Portal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortalTosListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedTosList response = api.apiV2PortalTosList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a specific ToS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortalTosRetrieveTest() throws ApiException {
        UUID uuid = null;
        Tos response = api.apiV2PortalTosRetrieve(uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosActivitiesListTest() throws ApiException {
        UUID portfolioUuid = null;
        Integer limit = null;
        Integer offset = null;
        List<String> target = null;
        PaginatedFeedActivityListList response = api.apiV2PortfoliosActivitiesList(portfolioUuid, limit, offset, target);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosActivitiesRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        FeedActivityList response = api.apiV2PortfoliosActivitiesRetrieve(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosAllocationsEndDayTest() throws ApiException {
        UUID portfolioUuid = null;
        AllocationList response = api.apiV2PortfoliosAllocationsEndDay(portfolioUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosAllocationsEndDayByDateRetrieveTest() throws ApiException {
        String allocationDate = null;
        UUID portfolioUuid = null;
        AllocationDetail response = api.apiV2PortfoliosAllocationsEndDayByDateRetrieve(allocationDate, portfolioUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosAllocationsEndDayLatestRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        AllocationDetail response = api.apiV2PortfoliosAllocationsEndDayLatestRetrieve(portfolioUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allocations History for a given portfolio  It accepts two optional parameters, &#x60;date_to&#x60; and &#x60;date_from&#x60; to limit the daily allocations to a certain data range. If they are not given, all the allocations are returned.  ---  ## Parameters:   * **name**: &#x60;date_from&#x60;  * **description**: The initial date.  * **parameter type**: query param   * **name**: &#x60;date_from&#x60;  * **description**: The final date.  * **parameter type**: query param
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosAllocationsHistoryRetrieveTest() throws ApiException {
        UUID portfolio = null;
        api.apiV2PortfoliosAllocationsHistoryRetrieve(portfolio);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosAllocationsIntradayLatestRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        CurrentAllocation response = api.apiV2PortfoliosAllocationsIntradayLatestRetrieve(portfolioUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosAllocationsListTest() throws ApiException {
        UUID portfolioUuid = null;
        Integer limit = null;
        Integer offset = null;
        LocalDate valuationDateAfter = null;
        LocalDate valuationDateBefore = null;
        PaginatedAllocationListList response = api.apiV2PortfoliosAllocationsList(portfolioUuid, limit, offset, valuationDateAfter, valuationDateBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosAllocationsRetrieveTest() throws ApiException {
        Integer id = null;
        UUID portfolioUuid = null;
        AllocationList response = api.apiV2PortfoliosAllocationsRetrieve(id, portfolioUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosCreateTest() throws ApiException {
        UUID portfolioUuid = null;
        PortfolioCreate portfolioCreate = null;
        PortfolioCreate response = api.apiV2PortfoliosCreate(portfolioUuid, portfolioCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosDepositsCreateTest() throws ApiException {
        UUID portfolioUuid = null;
        DepositCreate depositCreate = null;
        DepositCreate response = api.apiV2PortfoliosDepositsCreate(portfolioUuid, depositCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosDepositsDestroyTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        api.apiV2PortfoliosDepositsDestroy(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosDepositsListTest() throws ApiException {
        UUID portfolioUuid = null;
        Integer limit = null;
        Integer offset = null;
        List<String> status = null;
        PaginatedDepositListList response = api.apiV2PortfoliosDepositsList(portfolioUuid, limit, offset, status);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosDepositsRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        DepositDetail response = api.apiV2PortfoliosDepositsRetrieve(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosDestroyTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        api.apiV2PortfoliosDestroy(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosListTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID client = null;
        String externalCustodianId = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        List<String> ordering = null;
        Integer portfolioType = null;
        List<String> status = null;
        LocalDate valuationDateAfter = null;
        LocalDate valuationDateBefore = null;
        PaginatedPortfolioListList response = api.apiV2PortfoliosList(portfolioUuid, client, externalCustodianId, limit, name, offset, ordering, portfolioType, status, valuationDateAfter, valuationDateBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosOrdersCreateTest() throws ApiException {
        UUID portfolioUuid = null;
        CreateOrder createOrder = null;
        CreateOrder response = api.apiV2PortfoliosOrdersCreate(portfolioUuid, createOrder);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Cancel or request cancellation to the broker
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosOrdersDestroyTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        api.apiV2PortfoliosOrdersDestroy(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosOrdersListTest() throws ApiException {
        UUID portfolioUuid = null;
        String adviceExternalId = null;
        String asset = null;
        LocalDate completedAfter = null;
        LocalDate completedBefore = null;
        Map<String, Object> extraData = null;
        Integer limit = null;
        Integer offset = null;
        String portfolio = null;
        String status = null;
        PaginatedOrderListList response = api.apiV2PortfoliosOrdersList(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosOrdersRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        OrderList response = api.apiV2PortfoliosOrdersRetrieve(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosPartialUpdateTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        PatchedPortfolioUpdate patchedPortfolioUpdate = null;
        PortfolioUpdate response = api.apiV2PortfoliosPartialUpdate(portfolioUuid, uuid, patchedPortfolioUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosPerformanceMwrrListTest() throws ApiException {
        UUID portfolioUuid = null;
        LocalDate dateAfter = null;
        LocalDate dateBefore = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedPortfolioPerformanceList response = api.apiV2PortfoliosPerformanceMwrrList(portfolioUuid, dateAfter, dateBefore, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosPerformancePositionsListTest() throws ApiException {
        UUID portfolioUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedPortfolioPerformancePositionsList response = api.apiV2PortfoliosPerformancePositionsList(portfolioUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosPerformanceTwrrListTest() throws ApiException {
        UUID portfolioUuid = null;
        LocalDate dateAfter = null;
        LocalDate dateBefore = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedPortfolioPerformanceList response = api.apiV2PortfoliosPerformanceTwrrList(portfolioUuid, dateAfter, dateBefore, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosPortfoliotypesListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedPortfolioTypeList response = api.apiV2PortfoliosPortfoliotypesList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosPortfoliotypesRestrictionsListTest() throws ApiException {
        String code = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedBasePortfolioTypeRestrictionsList response = api.apiV2PortfoliosPortfoliotypesRestrictionsList(code, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosRebalancesListTest() throws ApiException {
        UUID portfolioUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedRebalanceList response = api.apiV2PortfoliosRebalancesList(portfolioUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosRebalancesRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        Rebalance response = api.apiV2PortfoliosRebalancesRetrieve(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosRestrictionsRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        PortfolioTypeRestrictions response = api.apiV2PortfoliosRestrictionsRetrieve(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        PortfolioDetail response = api.apiV2PortfoliosRetrieve(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosUpdateTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        PortfolioUpdate portfolioUpdate = null;
        PortfolioUpdate response = api.apiV2PortfoliosUpdate(portfolioUuid, uuid, portfolioUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosWithdrawalsCreateTest() throws ApiException {
        UUID portfolioUuid = null;
        InvestorWithdrawalCreate investorWithdrawalCreate = null;
        InvestorWithdrawalCreate response = api.apiV2PortfoliosWithdrawalsCreate(portfolioUuid, investorWithdrawalCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosWithdrawalsDestroyTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        api.apiV2PortfoliosWithdrawalsDestroy(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosWithdrawalsListTest() throws ApiException {
        UUID portfolioUuid = null;
        Integer limit = null;
        Integer offset = null;
        List<String> status = null;
        PaginatedInvestorWithdrawalListList response = api.apiV2PortfoliosWithdrawalsList(portfolioUuid, limit, offset, status);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2PortfoliosWithdrawalsRetrieveTest() throws ApiException {
        UUID portfolioUuid = null;
        UUID uuid = null;
        WithdrawalDetail response = api.apiV2PortfoliosWithdrawalsRetrieve(portfolioUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RiskQuestionsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        PaginatedQuestionList response = api.apiV2RiskQuestionsList(limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2VerificationsVerifierWebhookCreateTest() throws ApiException {
        String action = null;
        String verifier = null;
        api.apiV2VerificationsVerifierWebhookCreate(action, verifier);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2WebsocketAuthenticationTicketCreateTest() throws ApiException {
        WebsocketAuthentication websocketAuthentication = null;
        AuthenticationResponse response = api.apiV2WebsocketAuthenticationTicketCreate(websocketAuthentication);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2WebsocketAuthorizeAssetCreateTest() throws ApiException {
        WebsocketAuthentication websocketAuthentication = null;
        Response response = api.apiV2WebsocketAuthorizeAssetCreate(websocketAuthentication);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2WebsocketAuthorizeCreateTest() throws ApiException {
        WebsocketAuthentication websocketAuthentication = null;
        Response response = api.apiV2WebsocketAuthorizeCreate(websocketAuthentication);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2WebsocketAuthorizePortfolioCreateTest() throws ApiException {
        WebsocketAuthentication websocketAuthentication = null;
        Response response = api.apiV2WebsocketAuthorizePortfolioCreate(websocketAuthentication);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2WebsocketOnSubscribeCreateTest() throws ApiException {
        Subscribe subscribe = null;
        Subscribe response = api.apiV2WebsocketOnSubscribeCreate(subscribe);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2WebsocketOnUnsubscribeCreateTest() throws ApiException {
        Unsubscribe unsubscribe = null;
        Unsubscribe response = api.apiV2WebsocketOnUnsubscribeCreate(unsubscribe);

        // TODO: test validations
    }
    
}
