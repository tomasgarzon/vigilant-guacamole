/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Assessment;
import org.openapitools.client.model.PaginatedAssessmentList;
import org.openapitools.client.model.PatchedAssessment;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RiskAssessmentApi
 */
@Ignore
public class RiskAssessmentApiTest {

    private final RiskAssessmentApi api = new RiskAssessmentApi();

    
    /**
     * 
     *
     * Create a risk assessment for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentCreateTest() throws ApiException {
        UUID clientUuid = null;
        Assessment assessment = null;
        Assessment response = api.clientRiskAssessmentCreate(clientUuid, assessment);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client risk assessment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.clientRiskAssessmentDelete(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List Risk Assessment for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        List<String> status = null;
        PaginatedAssessmentList response = api.clientRiskAssessmentList(clientUuid, limit, offset, status);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client risk assessment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        PatchedAssessment patchedAssessment = null;
        Assessment response = api.clientRiskAssessmentPartialUpdate(clientUuid, uuid, patchedAssessment);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client risk assessment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        Assessment response = api.clientRiskAssessmentRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
}
