/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AUMEvoluation;
import org.openapitools.client.model.AUMPortfolioRisk;
import org.openapitools.client.model.AddressCreate;
import org.openapitools.client.model.AddressList;
import org.openapitools.client.model.AddressUpdate;
import org.openapitools.client.model.AllocationByAsset;
import org.openapitools.client.model.ApplicationClientUpdate;
import org.openapitools.client.model.Assessment;
import org.openapitools.client.model.AssetConcentrationRisk;
import org.openapitools.client.model.BankAccountCreateUpdate;
import org.openapitools.client.model.BankAccountList;
import org.openapitools.client.model.ClientCreate;
import org.openapitools.client.model.ClientDetail;
import org.openapitools.client.model.ClientPerformance;
import org.openapitools.client.model.ClientRanking;
import org.openapitools.client.model.DocTypeEnum;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentTypeEnum;
import org.openapitools.client.model.FeedActivityList;
import org.openapitools.client.model.InvestorFee;
import org.openapitools.client.model.InvoiceList;
import org.openapitools.client.model.NationalityCreate;
import org.openapitools.client.model.NationalityList;
import org.openapitools.client.model.NationalityUpdate;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.OneOfResultEnumBlankEnum;
import org.openapitools.client.model.PaginatedAddressListList;
import org.openapitools.client.model.PaginatedAssessmentList;
import org.openapitools.client.model.PaginatedBankAccountListList;
import org.openapitools.client.model.PaginatedClientDetailList;
import org.openapitools.client.model.PaginatedDocumentList;
import org.openapitools.client.model.PaginatedFeedActivityListList;
import org.openapitools.client.model.PaginatedInvestorFeeList;
import org.openapitools.client.model.PaginatedInvoiceListList;
import org.openapitools.client.model.PaginatedNationalityListList;
import org.openapitools.client.model.PaginatedStatementList;
import org.openapitools.client.model.PaginatedTaxInformationListList;
import org.openapitools.client.model.PaginatedTaxReportList;
import org.openapitools.client.model.PaginatedVerificationDocumentList;
import org.openapitools.client.model.PaginatedVerificationListList;
import org.openapitools.client.model.PaginatedWatchlistList;
import org.openapitools.client.model.PatchedAddressUpdate;
import org.openapitools.client.model.PatchedApplicationClientUpdate;
import org.openapitools.client.model.PatchedAssessment;
import org.openapitools.client.model.PatchedBankAccountCreateUpdate;
import org.openapitools.client.model.PatchedInvestorFee;
import org.openapitools.client.model.PatchedNationalityUpdate;
import org.openapitools.client.model.PatchedTaxInformationCreateUpdate;
import org.openapitools.client.model.RelationshipManager;
import org.openapitools.client.model.Statement;
import org.openapitools.client.model.StatusBd7Enum;
import org.openapitools.client.model.TaxInformationCreateUpdate;
import org.openapitools.client.model.TaxInformationList;
import org.openapitools.client.model.TaxReport;
import java.net.URI;
import java.util.UUID;
import org.openapitools.client.model.VerificationCreate;
import org.openapitools.client.model.VerificationDocument;
import org.openapitools.client.model.VerificationDocumentCreate;
import org.openapitools.client.model.VerificationList;
import org.openapitools.client.model.VerificationWithType;
import org.openapitools.client.model.VerifyTypeEnum;
import org.openapitools.client.model.Watchlist;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Ignore
public class ApplicationApiTest {

    private final ApplicationApi api = new ApplicationApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsActivitiesListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        List<String> target = null;
        PaginatedFeedActivityListList response = api.apiV2ClientsActivitiesList(clientUuid, limit, offset, target);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsActivitiesRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        FeedActivityList response = api.apiV2ClientsActivitiesRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsAdviceEnginesListTest() throws ApiException {
        UUID clientUuid = null;
        api.apiV2ClientsAdviceEnginesList(clientUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsAdviceEnginesRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.apiV2ClientsAdviceEnginesRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsBillingFeesCreateTest() throws ApiException {
        UUID clientUuid = null;
        InvestorFee investorFee = null;
        InvestorFee response = api.apiV2ClientsBillingFeesCreate(clientUuid, investorFee);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsBillingFeesDestroyTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.apiV2ClientsBillingFeesDestroy(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsBillingFeesListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedInvestorFeeList response = api.apiV2ClientsBillingFeesList(clientUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsBillingFeesPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        PatchedInvestorFee patchedInvestorFee = null;
        InvestorFee response = api.apiV2ClientsBillingFeesPartialUpdate(clientUuid, uuid, patchedInvestorFee);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsBillingFeesRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        InvestorFee response = api.apiV2ClientsBillingFeesRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsBillingFeesUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        InvestorFee investorFee = null;
        InvestorFee response = api.apiV2ClientsBillingFeesUpdate(clientUuid, uuid, investorFee);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsBillingInvoicesListTest() throws ApiException {
        UUID clientUuid = null;
        String format = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedInvoiceListList response = api.apiV2ClientsBillingInvoicesList(clientUuid, format, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsBillingInvoicesRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String format = null;
        InvoiceList response = api.apiV2ClientsBillingInvoicesRetrieve(clientUuid, uuid, format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsReportStatementsListTest() throws ApiException {
        UUID clientUuid = null;
        String format = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedStatementList response = api.apiV2ClientsReportStatementsList(clientUuid, format, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsReportStatementsRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String format = null;
        Statement response = api.apiV2ClientsReportStatementsRetrieve(clientUuid, uuid, format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsReportTaxReportsListTest() throws ApiException {
        UUID clientUuid = null;
        String format = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedTaxReportList response = api.apiV2ClientsReportTaxReportsList(clientUuid, format, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsReportTaxReportsRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String format = null;
        TaxReport response = api.apiV2ClientsReportTaxReportsRetrieve(clientUuid, uuid, format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare &#39;filterable_fields&#39; in the view.     E.g. filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. &#39;args&#39;: {&#39;choices&#39;: &#39;STATUS_CHOICES&#39;} means Filter(choices&#x3D;queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsWatchlistsCreateTest() throws ApiException {
        UUID clientUuid = null;
        Watchlist watchlist = null;
        Watchlist response = api.apiV2ClientsWatchlistsCreate(clientUuid, watchlist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare &#39;filterable_fields&#39; in the view.     E.g. filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. &#39;args&#39;: {&#39;choices&#39;: &#39;STATUS_CHOICES&#39;} means Filter(choices&#x3D;queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsWatchlistsDestroyTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.apiV2ClientsWatchlistsDestroy(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare &#39;filterable_fields&#39; in the view.     E.g. filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. &#39;args&#39;: {&#39;choices&#39;: &#39;STATUS_CHOICES&#39;} means Filter(choices&#x3D;queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsWatchlistsListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedWatchlistList response = api.apiV2ClientsWatchlistsList(clientUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare &#39;filterable_fields&#39; in the view.     E.g. filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. &#39;args&#39;: {&#39;choices&#39;: &#39;STATUS_CHOICES&#39;} means Filter(choices&#x3D;queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsWatchlistsRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        Watchlist response = api.apiV2ClientsWatchlistsRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare &#39;filterable_fields&#39; in the view.     E.g. filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. &#39;args&#39;: {&#39;choices&#39;: &#39;STATUS_CHOICES&#39;} means Filter(choices&#x3D;queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields &#x3D; [&#39;status&#39;, &#39;name&#39;]  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ClientsWatchlistsUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        Watchlist watchlist = null;
        Watchlist response = api.apiV2ClientsWatchlistsUpdate(clientUuid, uuid, watchlist);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        AllocationByAsset response = api.apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        AssetConcentrationRisk response = api.apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        AUMEvoluation response = api.apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        AUMPortfolioRisk response = api.apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAumRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsAumRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsClientByRiskRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsClientByRiskRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsClientByStatusRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsClientByStatusRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsClientRankingRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        ClientRanking response = api.apiV2RelationshipManagerAnalyticsClientRankingRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerMeRetrieveTest() throws ApiException {
        RelationshipManager response = api.apiV2RelationshipManagerMeRetrieve();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerRetrieveTest() throws ApiException {
        UUID uuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerRetrieve(uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ReportStatementsListTest() throws ApiException {
        UUID clientUuid = null;
        String format = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedStatementList response = api.apiV2ReportStatementsList(clientUuid, format, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ReportStatementsRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String format = null;
        Statement response = api.apiV2ReportStatementsRetrieve(clientUuid, uuid, format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ReportTaxReportListTest() throws ApiException {
        UUID clientUuid = null;
        String format = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedTaxReportList response = api.apiV2ReportTaxReportList(clientUuid, format, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2ReportTaxReportRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String format = null;
        TaxReport response = api.apiV2ReportTaxReportRetrieve(clientUuid, uuid, format);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create an address for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressCreateTest() throws ApiException {
        UUID clientUuid = null;
        AddressCreate addressCreate = null;
        AddressCreate response = api.clientAddressCreate(clientUuid, addressCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.clientAddressDelete(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        PatchedAddressUpdate patchedAddressUpdate = null;
        AddressUpdate response = api.clientAddressPartialUpdate(clientUuid, uuid, patchedAddressUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        AddressList response = api.clientAddressRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a client address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        AddressUpdate addressUpdate = null;
        AddressUpdate response = api.clientAddressUpdate(clientUuid, uuid, addressUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List address for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressesListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedAddressListList response = api.clientAddressesList(clientUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a bank account for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientBankAccountCreateTest() throws ApiException {
        UUID clientUuid = null;
        BankAccountCreateUpdate bankAccountCreateUpdate = null;
        BankAccountCreateUpdate response = api.clientBankAccountCreate(clientUuid, bankAccountCreateUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client bank account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientBankAccountDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.clientBankAccountDelete(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client bank account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientBankAccountPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate = null;
        BankAccountCreateUpdate response = api.clientBankAccountPartialUpdate(clientUuid, uuid, patchedBankAccountCreateUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client bank account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientBankAccountRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        BankAccountList response = api.clientBankAccountRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a client bank account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientBankAccountUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        BankAccountCreateUpdate bankAccountCreateUpdate = null;
        BankAccountCreateUpdate response = api.clientBankAccountUpdate(clientUuid, uuid, bankAccountCreateUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List Bank Account for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientBankAccountsListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedBankAccountListList response = api.clientBankAccountsList(clientUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Complete onboarding for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientCompleteOnboardingTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        ClientDetail clientDetail = null;
        ClientDetail response = api.clientCompleteOnboarding(clientUuid, uuid, clientDetail);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientCreateTest() throws ApiException {
        ClientCreate clientCreate = null;
        ClientCreate response = api.clientCreate(clientCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a document for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientDocumentCreateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String name = null;
        DocTypeEnum docType = null;
        URI path = null;
        String description = null;
        Document response = api.clientDocumentCreate(clientUuid, uuid, name, docType, path, description);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientDocumentDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.clientDocumentDelete(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List Document for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientDocumentListTest() throws ApiException {
        UUID clientUuid = null;
        Integer client = null;
        String description = null;
        List<String> docType = null;
        Map<String, Object> extraData = null;
        Integer limit = null;
        String name = null;
        Integer offset = null;
        PaginatedDocumentList response = api.clientDocumentList(clientUuid, client, description, docType, extraData, limit, name, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientDocumentRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        Document response = api.clientDocumentRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List client for a Relationship manager
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientListTest() throws ApiException {
        String externalCustodianId = null;
        Map<String, Object> extraData = null;
        Integer limit = null;
        Integer offset = null;
        List<String> ordering = null;
        String search = null;
        String status = null;
        PaginatedClientDetailList response = api.clientList(externalCustodianId, extraData, limit, offset, ordering, search, status);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create nationality for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientNationalityCreateTest() throws ApiException {
        UUID clientUuid = null;
        NationalityCreate nationalityCreate = null;
        NationalityCreate response = api.clientNationalityCreate(clientUuid, nationalityCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List nationlities for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientNationlitiesListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedNationalityListList response = api.clientNationlitiesList(clientUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client nationality
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientNationlityDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.clientNationlityDelete(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client nationality
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientNationlityPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        PatchedNationalityUpdate patchedNationalityUpdate = null;
        NationalityUpdate response = api.clientNationlityPartialUpdate(clientUuid, uuid, patchedNationalityUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client nationality
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientNationlityRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        NationalityList response = api.clientNationlityRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a client nationality
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientNationlityUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        NationalityUpdate nationalityUpdate = null;
        NationalityUpdate response = api.clientNationlityUpdate(clientUuid, uuid, nationalityUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientPartialUpdateTest() throws ApiException {
        UUID uuid = null;
        PatchedApplicationClientUpdate patchedApplicationClientUpdate = null;
        ApplicationClientUpdate response = api.clientPartialUpdate(uuid, patchedApplicationClientUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRetrieveTest() throws ApiException {
        UUID uuid = null;
        ClientDetail response = api.clientRetrieve(uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a risk assessment for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentCreateTest() throws ApiException {
        UUID clientUuid = null;
        Assessment assessment = null;
        Assessment response = api.clientRiskAssessmentCreate(clientUuid, assessment);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client risk assessment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.clientRiskAssessmentDelete(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List Risk Assessment for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        List<String> status = null;
        PaginatedAssessmentList response = api.clientRiskAssessmentList(clientUuid, limit, offset, status);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client risk assessment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        PatchedAssessment patchedAssessment = null;
        Assessment response = api.clientRiskAssessmentPartialUpdate(clientUuid, uuid, patchedAssessment);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client risk assessment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientRiskAssessmentRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        Assessment response = api.clientRiskAssessmentRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Calculate TWRR Performance for client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientTWRRPerformanceTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        ClientPerformance response = api.clientTWRRPerformance(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a tax inforation for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientTaxInformationCreateTest() throws ApiException {
        UUID clientUuid = null;
        TaxInformationCreateUpdate taxInformationCreateUpdate = null;
        TaxInformationCreateUpdate response = api.clientTaxInformationCreate(clientUuid, taxInformationCreateUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client tax inforation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientTaxInformationDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.clientTaxInformationDelete(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List tax information for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientTaxInformationListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedTaxInformationListList response = api.clientTaxInformationList(clientUuid, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client tax inforation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientTaxInformationPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate = null;
        TaxInformationCreateUpdate response = api.clientTaxInformationPartialUpdate(clientUuid, uuid, patchedTaxInformationCreateUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client tax inforation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientTaxInformationRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        TaxInformationList response = api.clientTaxInformationRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a client tax inforation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientTaxInformationUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        TaxInformationCreateUpdate taxInformationCreateUpdate = null;
        TaxInformationCreateUpdate response = api.clientTaxInformationUpdate(clientUuid, uuid, taxInformationCreateUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientUpdateTest() throws ApiException {
        UUID uuid = null;
        ApplicationClientUpdate applicationClientUpdate = null;
        ApplicationClientUpdate response = api.clientUpdate(uuid, applicationClientUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a verification for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationCreateTest() throws ApiException {
        UUID clientUuid = null;
        String verifyTypeCode = null;
        VerificationCreate verificationCreate = null;
        VerificationCreate response = api.clientVerificationCreate(clientUuid, verifyTypeCode, verificationCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a verification Document for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationDocumentCreateTest() throws ApiException {
        UUID clientUuid = null;
        String verifyTypeCode = null;
        UUID uuid = null;
        VerifyTypeEnum verifyType = null;
        OffsetDateTime created = null;
        OffsetDateTime updated = null;
        List<VerificationDocumentCreate> verificationDocuments = null;
        StatusBd7Enum status = null;
        OneOfResultEnumBlankEnum result = null;
        VerificationWithType response = api.clientVerificationDocumentCreate(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client verificatoin document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationDocumentDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String verifyTypeCode = null;
        api.clientVerificationDocumentDelete(clientUuid, uuid, verifyTypeCode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List Verification Document for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationDocumentListTest() throws ApiException {
        UUID clientUuid = null;
        String verifyTypeCode = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedVerificationDocumentList response = api.clientVerificationDocumentList(clientUuid, verifyTypeCode, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client verification document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationDocumentPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String verifyTypeCode = null;
        UUID uuid2 = null;
        DocumentTypeEnum documentType = null;
        String documentFront = null;
        String documentBack = null;
        VerificationDocument response = api.clientVerificationDocumentPartialUpdate(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client verification document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationDocumentRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String verifyTypeCode = null;
        VerificationDocument response = api.clientVerificationDocumentRetrieve(clientUuid, uuid, verifyTypeCode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a client verification document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationDocumentUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String verifyTypeCode = null;
        UUID uuid2 = null;
        DocumentTypeEnum documentType = null;
        String documentFront = null;
        String documentBack = null;
        VerificationDocument response = api.clientVerificationDocumentUpdate(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List Verification for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationListTest() throws ApiException {
        UUID clientUuid = null;
        String verifyTypeCode = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedVerificationListList response = api.clientVerificationList(clientUuid, verifyTypeCode, limit, offset);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client verification 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientVerificationRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        String verifyTypeCode = null;
        VerificationList response = api.clientVerificationRetrieve(clientUuid, uuid, verifyTypeCode);

        // TODO: test validations
    }
    
}
