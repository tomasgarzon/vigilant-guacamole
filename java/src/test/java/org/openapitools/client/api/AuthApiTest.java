/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ImpersionationResponse;
import org.openapitools.client.model.ImpersonationToken;
import org.openapitools.client.model.JSONWebToken;
import org.openapitools.client.model.JWTRefreshResponse;
import org.openapitools.client.model.JWTResponse;
import org.openapitools.client.model.OnboardingResponse;
import org.openapitools.client.model.OnboardingToken;
import org.openapitools.client.model.PasswordReset;
import org.openapitools.client.model.PasswordResetRequest;
import org.openapitools.client.model.PasswordUpdate;
import org.openapitools.client.model.PatchedPasswordResetRequest;
import org.openapitools.client.model.TokenRefresh;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Ignore
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    
    /**
     * 
     *
     * API View that receives a onboarding token and check its validity  Returns a JSON Web Token that can be used for authenticated requests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authGetOnboardingTokenTest() throws ApiException {
        OnboardingToken onboardingToken = null;
        OnboardingResponse response = api.authGetOnboardingToken(onboardingToken);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * API View that receives an impersonation token and check its validity Returns a JSON Web Token that can be used for authenticated (and restricted) requests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authImpersonationTokenTest() throws ApiException {
        ImpersonationToken impersonationToken = null;
        ImpersionationResponse response = api.authImpersonationToken(impersonationToken);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * API View that receives a POST with a user&#39;s username and password.  Returns a JSON Web Token that can be used for authenticated requests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authLoginTest() throws ApiException {
        JSONWebToken jsONWebToken = null;
        JWTResponse response = api.authLogin(jsONWebToken);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * API View that receives a POST with a refresh token as token.  Returns a refreshed JSON Web Token that can be used for authenticated requests.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authResfreshJWTTokenTest() throws ApiException {
        TokenRefresh tokenRefresh = null;
        JWTRefreshResponse response = api.authResfreshJWTToken(tokenRefresh);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Change password for an user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userChangePasswordTest() throws ApiException {
        PasswordUpdate passwordUpdate = null;
        PasswordUpdate response = api.userChangePassword(passwordUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Request a password reset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRequestPasswordResetTest() throws ApiException {
        PatchedPasswordResetRequest patchedPasswordResetRequest = null;
        PasswordResetRequest response = api.userRequestPasswordReset(patchedPasswordResetRequest);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Set a new password for an user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSetPasswordTest() throws ApiException {
        PasswordReset passwordReset = null;
        PasswordReset response = api.userSetPassword(passwordReset);

        // TODO: test validations
    }
    
}
