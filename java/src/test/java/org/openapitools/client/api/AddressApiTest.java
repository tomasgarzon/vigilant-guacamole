/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressCreate;
import org.openapitools.client.model.AddressList;
import org.openapitools.client.model.AddressUpdate;
import org.openapitools.client.model.PaginatedAddressListList;
import org.openapitools.client.model.PatchedAddressUpdate;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AddressApi
 */
@Ignore
public class AddressApiTest {

    private final AddressApi api = new AddressApi();

    
    /**
     * 
     *
     * Create an address for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressCreateTest() throws ApiException {
        UUID clientUuid = null;
        AddressCreate addressCreate = null;
        AddressCreate response = api.clientAddressCreate(clientUuid, addressCreate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a client address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressDeleteTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        api.clientAddressDelete(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Partial Update a client address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressPartialUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        PatchedAddressUpdate patchedAddressUpdate = null;
        AddressUpdate response = api.clientAddressPartialUpdate(clientUuid, uuid, patchedAddressUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve a client address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressRetrieveTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        AddressList response = api.clientAddressRetrieve(clientUuid, uuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update a client address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressUpdateTest() throws ApiException {
        UUID clientUuid = null;
        UUID uuid = null;
        AddressUpdate addressUpdate = null;
        AddressUpdate response = api.clientAddressUpdate(clientUuid, uuid, addressUpdate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List address for a client
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clientAddressesListTest() throws ApiException {
        UUID clientUuid = null;
        Integer limit = null;
        Integer offset = null;
        PaginatedAddressListList response = api.clientAddressesList(clientUuid, limit, offset);

        // TODO: test validations
    }
    
}
