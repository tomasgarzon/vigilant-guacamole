/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AUMEvoluation;
import org.openapitools.client.model.AUMPortfolioRisk;
import org.openapitools.client.model.AllocationByAsset;
import org.openapitools.client.model.AssetConcentrationRisk;
import org.openapitools.client.model.ClientRanking;
import org.openapitools.client.model.RelationshipManager;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalyticsApi
 */
@Ignore
public class AnalyticsApiTest {

    private final AnalyticsApi api = new AnalyticsApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        AllocationByAsset response = api.apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        AssetConcentrationRisk response = api.apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        AUMEvoluation response = api.apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        AUMPortfolioRisk response = api.apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsAumRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsAumRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsClientByRiskRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsClientByRiskRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsClientByStatusRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsClientByStatusRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsClientRankingRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        ClientRanking response = api.apiV2RelationshipManagerAnalyticsClientRankingRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveTest() throws ApiException {
        UUID relationshipManagerUuid = null;
        RelationshipManager response = api.apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(relationshipManagerUuid);

        // TODO: test validations
    }
    
}
