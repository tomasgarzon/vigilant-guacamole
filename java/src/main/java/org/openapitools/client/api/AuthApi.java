/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ImpersionationResponse;
import org.openapitools.client.model.ImpersonationToken;
import org.openapitools.client.model.JSONWebToken;
import org.openapitools.client.model.JWTRefreshResponse;
import org.openapitools.client.model.JWTResponse;
import org.openapitools.client.model.OnboardingResponse;
import org.openapitools.client.model.OnboardingToken;
import org.openapitools.client.model.PasswordReset;
import org.openapitools.client.model.PasswordResetRequest;
import org.openapitools.client.model.PasswordUpdate;
import org.openapitools.client.model.PatchedPasswordResetRequest;
import org.openapitools.client.model.TokenRefresh;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient localVarApiClient;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for authGetOnboardingToken
     * @param onboardingToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authGetOnboardingTokenCall(OnboardingToken onboardingToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = onboardingToken;

        // create path and map variables
        String localVarPath = "/api/v2/auth/onboarding_token/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authGetOnboardingTokenValidateBeforeCall(OnboardingToken onboardingToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'onboardingToken' is set
        if (onboardingToken == null) {
            throw new ApiException("Missing the required parameter 'onboardingToken' when calling authGetOnboardingToken(Async)");
        }
        

        okhttp3.Call localVarCall = authGetOnboardingTokenCall(onboardingToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * API View that receives a onboarding token and check its validity  Returns a JSON Web Token that can be used for authenticated requests.
     * @param onboardingToken  (required)
     * @return OnboardingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OnboardingResponse authGetOnboardingToken(OnboardingToken onboardingToken) throws ApiException {
        ApiResponse<OnboardingResponse> localVarResp = authGetOnboardingTokenWithHttpInfo(onboardingToken);
        return localVarResp.getData();
    }

    /**
     * 
     * API View that receives a onboarding token and check its validity  Returns a JSON Web Token that can be used for authenticated requests.
     * @param onboardingToken  (required)
     * @return ApiResponse&lt;OnboardingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnboardingResponse> authGetOnboardingTokenWithHttpInfo(OnboardingToken onboardingToken) throws ApiException {
        okhttp3.Call localVarCall = authGetOnboardingTokenValidateBeforeCall(onboardingToken, null);
        Type localVarReturnType = new TypeToken<OnboardingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API View that receives a onboarding token and check its validity  Returns a JSON Web Token that can be used for authenticated requests.
     * @param onboardingToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authGetOnboardingTokenAsync(OnboardingToken onboardingToken, final ApiCallback<OnboardingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authGetOnboardingTokenValidateBeforeCall(onboardingToken, _callback);
        Type localVarReturnType = new TypeToken<OnboardingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authImpersonationToken
     * @param impersonationToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authImpersonationTokenCall(ImpersonationToken impersonationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = impersonationToken;

        // create path and map variables
        String localVarPath = "/api/v2/auth/impersonation_token/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authImpersonationTokenValidateBeforeCall(ImpersonationToken impersonationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'impersonationToken' is set
        if (impersonationToken == null) {
            throw new ApiException("Missing the required parameter 'impersonationToken' when calling authImpersonationToken(Async)");
        }
        

        okhttp3.Call localVarCall = authImpersonationTokenCall(impersonationToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * API View that receives an impersonation token and check its validity Returns a JSON Web Token that can be used for authenticated (and restricted) requests.
     * @param impersonationToken  (required)
     * @return ImpersionationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImpersionationResponse authImpersonationToken(ImpersonationToken impersonationToken) throws ApiException {
        ApiResponse<ImpersionationResponse> localVarResp = authImpersonationTokenWithHttpInfo(impersonationToken);
        return localVarResp.getData();
    }

    /**
     * 
     * API View that receives an impersonation token and check its validity Returns a JSON Web Token that can be used for authenticated (and restricted) requests.
     * @param impersonationToken  (required)
     * @return ApiResponse&lt;ImpersionationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImpersionationResponse> authImpersonationTokenWithHttpInfo(ImpersonationToken impersonationToken) throws ApiException {
        okhttp3.Call localVarCall = authImpersonationTokenValidateBeforeCall(impersonationToken, null);
        Type localVarReturnType = new TypeToken<ImpersionationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API View that receives an impersonation token and check its validity Returns a JSON Web Token that can be used for authenticated (and restricted) requests.
     * @param impersonationToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authImpersonationTokenAsync(ImpersonationToken impersonationToken, final ApiCallback<ImpersionationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authImpersonationTokenValidateBeforeCall(impersonationToken, _callback);
        Type localVarReturnType = new TypeToken<ImpersionationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authLogin
     * @param jsONWebToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authLoginCall(JSONWebToken jsONWebToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = jsONWebToken;

        // create path and map variables
        String localVarPath = "/api/v2/auth/login/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authLoginValidateBeforeCall(JSONWebToken jsONWebToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'jsONWebToken' is set
        if (jsONWebToken == null) {
            throw new ApiException("Missing the required parameter 'jsONWebToken' when calling authLogin(Async)");
        }
        

        okhttp3.Call localVarCall = authLoginCall(jsONWebToken, _callback);
        return localVarCall;

    }

    /**
     * 
     * API View that receives a POST with a user&#39;s username and password.  Returns a JSON Web Token that can be used for authenticated requests.
     * @param jsONWebToken  (required)
     * @return JWTResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JWTResponse authLogin(JSONWebToken jsONWebToken) throws ApiException {
        ApiResponse<JWTResponse> localVarResp = authLoginWithHttpInfo(jsONWebToken);
        return localVarResp.getData();
    }

    /**
     * 
     * API View that receives a POST with a user&#39;s username and password.  Returns a JSON Web Token that can be used for authenticated requests.
     * @param jsONWebToken  (required)
     * @return ApiResponse&lt;JWTResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JWTResponse> authLoginWithHttpInfo(JSONWebToken jsONWebToken) throws ApiException {
        okhttp3.Call localVarCall = authLoginValidateBeforeCall(jsONWebToken, null);
        Type localVarReturnType = new TypeToken<JWTResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API View that receives a POST with a user&#39;s username and password.  Returns a JSON Web Token that can be used for authenticated requests.
     * @param jsONWebToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authLoginAsync(JSONWebToken jsONWebToken, final ApiCallback<JWTResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authLoginValidateBeforeCall(jsONWebToken, _callback);
        Type localVarReturnType = new TypeToken<JWTResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for authResfreshJWTToken
     * @param tokenRefresh  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authResfreshJWTTokenCall(TokenRefresh tokenRefresh, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tokenRefresh;

        // create path and map variables
        String localVarPath = "/api/v2/auth/token_renewal/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authResfreshJWTTokenValidateBeforeCall(TokenRefresh tokenRefresh, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokenRefresh' is set
        if (tokenRefresh == null) {
            throw new ApiException("Missing the required parameter 'tokenRefresh' when calling authResfreshJWTToken(Async)");
        }
        

        okhttp3.Call localVarCall = authResfreshJWTTokenCall(tokenRefresh, _callback);
        return localVarCall;

    }

    /**
     * 
     * API View that receives a POST with a refresh token as token.  Returns a refreshed JSON Web Token that can be used for authenticated requests.
     * @param tokenRefresh  (required)
     * @return JWTRefreshResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public JWTRefreshResponse authResfreshJWTToken(TokenRefresh tokenRefresh) throws ApiException {
        ApiResponse<JWTRefreshResponse> localVarResp = authResfreshJWTTokenWithHttpInfo(tokenRefresh);
        return localVarResp.getData();
    }

    /**
     * 
     * API View that receives a POST with a refresh token as token.  Returns a refreshed JSON Web Token that can be used for authenticated requests.
     * @param tokenRefresh  (required)
     * @return ApiResponse&lt;JWTRefreshResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JWTRefreshResponse> authResfreshJWTTokenWithHttpInfo(TokenRefresh tokenRefresh) throws ApiException {
        okhttp3.Call localVarCall = authResfreshJWTTokenValidateBeforeCall(tokenRefresh, null);
        Type localVarReturnType = new TypeToken<JWTRefreshResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * API View that receives a POST with a refresh token as token.  Returns a refreshed JSON Web Token that can be used for authenticated requests.
     * @param tokenRefresh  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authResfreshJWTTokenAsync(TokenRefresh tokenRefresh, final ApiCallback<JWTRefreshResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authResfreshJWTTokenValidateBeforeCall(tokenRefresh, _callback);
        Type localVarReturnType = new TypeToken<JWTRefreshResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userChangePassword
     * @param passwordUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChangePasswordCall(PasswordUpdate passwordUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = passwordUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/auth/password/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userChangePasswordValidateBeforeCall(PasswordUpdate passwordUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'passwordUpdate' is set
        if (passwordUpdate == null) {
            throw new ApiException("Missing the required parameter 'passwordUpdate' when calling userChangePassword(Async)");
        }
        

        okhttp3.Call localVarCall = userChangePasswordCall(passwordUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Change password for an user
     * @param passwordUpdate  (required)
     * @return PasswordUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordUpdate userChangePassword(PasswordUpdate passwordUpdate) throws ApiException {
        ApiResponse<PasswordUpdate> localVarResp = userChangePasswordWithHttpInfo(passwordUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Change password for an user
     * @param passwordUpdate  (required)
     * @return ApiResponse&lt;PasswordUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordUpdate> userChangePasswordWithHttpInfo(PasswordUpdate passwordUpdate) throws ApiException {
        okhttp3.Call localVarCall = userChangePasswordValidateBeforeCall(passwordUpdate, null);
        Type localVarReturnType = new TypeToken<PasswordUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change password for an user
     * @param passwordUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userChangePasswordAsync(PasswordUpdate passwordUpdate, final ApiCallback<PasswordUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = userChangePasswordValidateBeforeCall(passwordUpdate, _callback);
        Type localVarReturnType = new TypeToken<PasswordUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userRequestPasswordReset
     * @param patchedPasswordResetRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userRequestPasswordResetCall(PatchedPasswordResetRequest patchedPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedPasswordResetRequest;

        // create path and map variables
        String localVarPath = "/api/v2/auth/password/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userRequestPasswordResetValidateBeforeCall(PatchedPasswordResetRequest patchedPasswordResetRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userRequestPasswordResetCall(patchedPasswordResetRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Request a password reset
     * @param patchedPasswordResetRequest  (optional)
     * @return PasswordResetRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordResetRequest userRequestPasswordReset(PatchedPasswordResetRequest patchedPasswordResetRequest) throws ApiException {
        ApiResponse<PasswordResetRequest> localVarResp = userRequestPasswordResetWithHttpInfo(patchedPasswordResetRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Request a password reset
     * @param patchedPasswordResetRequest  (optional)
     * @return ApiResponse&lt;PasswordResetRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordResetRequest> userRequestPasswordResetWithHttpInfo(PatchedPasswordResetRequest patchedPasswordResetRequest) throws ApiException {
        okhttp3.Call localVarCall = userRequestPasswordResetValidateBeforeCall(patchedPasswordResetRequest, null);
        Type localVarReturnType = new TypeToken<PasswordResetRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request a password reset
     * @param patchedPasswordResetRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userRequestPasswordResetAsync(PatchedPasswordResetRequest patchedPasswordResetRequest, final ApiCallback<PasswordResetRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = userRequestPasswordResetValidateBeforeCall(patchedPasswordResetRequest, _callback);
        Type localVarReturnType = new TypeToken<PasswordResetRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSetPassword
     * @param passwordReset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSetPasswordCall(PasswordReset passwordReset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = passwordReset;

        // create path and map variables
        String localVarPath = "/api/v2/auth/password/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSetPasswordValidateBeforeCall(PasswordReset passwordReset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'passwordReset' is set
        if (passwordReset == null) {
            throw new ApiException("Missing the required parameter 'passwordReset' when calling userSetPassword(Async)");
        }
        

        okhttp3.Call localVarCall = userSetPasswordCall(passwordReset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Set a new password for an user
     * @param passwordReset  (required)
     * @return PasswordReset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PasswordReset userSetPassword(PasswordReset passwordReset) throws ApiException {
        ApiResponse<PasswordReset> localVarResp = userSetPasswordWithHttpInfo(passwordReset);
        return localVarResp.getData();
    }

    /**
     * 
     * Set a new password for an user
     * @param passwordReset  (required)
     * @return ApiResponse&lt;PasswordReset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordReset> userSetPasswordWithHttpInfo(PasswordReset passwordReset) throws ApiException {
        okhttp3.Call localVarCall = userSetPasswordValidateBeforeCall(passwordReset, null);
        Type localVarReturnType = new TypeToken<PasswordReset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Set a new password for an user
     * @param passwordReset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userSetPasswordAsync(PasswordReset passwordReset, final ApiCallback<PasswordReset> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSetPasswordValidateBeforeCall(passwordReset, _callback);
        Type localVarReturnType = new TypeToken<PasswordReset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
