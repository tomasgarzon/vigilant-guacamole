/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AUMEvoluation;
import org.openapitools.client.model.AUMPortfolioRisk;
import org.openapitools.client.model.AllocationByAsset;
import org.openapitools.client.model.AssetConcentrationRisk;
import org.openapitools.client.model.ClientRanking;
import org.openapitools.client.model.RelationshipManager;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnalyticsApi {
    private ApiClient localVarApiClient;

    public AnalyticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnalyticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/allocations-by-asset/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return AllocationByAsset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AllocationByAsset apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<AllocationByAsset> localVarResp = apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;AllocationByAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllocationByAsset> apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<AllocationByAsset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<AllocationByAsset> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<AllocationByAsset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/asset-concentration-risk/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return AssetConcentrationRisk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AssetConcentrationRisk apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<AssetConcentrationRisk> localVarResp = apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;AssetConcentrationRisk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetConcentrationRisk> apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<AssetConcentrationRisk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<AssetConcentrationRisk> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<AssetConcentrationRisk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-evolution/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return AUMEvoluation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AUMEvoluation apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<AUMEvoluation> localVarResp = apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;AUMEvoluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUMEvoluation> apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<AUMEvoluation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<AUMEvoluation> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<AUMEvoluation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-portfolio-risk/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return AUMPortfolioRisk
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AUMPortfolioRisk apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<AUMPortfolioRisk> localVarResp = apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;AUMPortfolioRisk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AUMPortfolioRisk> apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<AUMPortfolioRisk>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<AUMPortfolioRisk> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<AUMPortfolioRisk>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsAumRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAumRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsAumRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAumRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return RelationshipManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipManager apiV2RelationshipManagerAnalyticsAumRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<RelationshipManager> localVarResp = apiV2RelationshipManagerAnalyticsAumRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;RelationshipManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipManager> apiV2RelationshipManagerAnalyticsAumRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsAumRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<RelationshipManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsAumRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsClientByRiskRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsClientByRiskRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-risk/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsClientByRiskRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsClientByRiskRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientByRiskRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return RelationshipManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipManager apiV2RelationshipManagerAnalyticsClientByRiskRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<RelationshipManager> localVarResp = apiV2RelationshipManagerAnalyticsClientByRiskRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;RelationshipManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipManager> apiV2RelationshipManagerAnalyticsClientByRiskRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientByRiskRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsClientByRiskRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<RelationshipManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientByRiskRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsClientByStatusRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsClientByStatusRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-status/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsClientByStatusRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsClientByStatusRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientByStatusRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return RelationshipManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipManager apiV2RelationshipManagerAnalyticsClientByStatusRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<RelationshipManager> localVarResp = apiV2RelationshipManagerAnalyticsClientByStatusRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;RelationshipManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipManager> apiV2RelationshipManagerAnalyticsClientByStatusRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientByStatusRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsClientByStatusRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<RelationshipManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientByStatusRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsClientRankingRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsClientRankingRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-ranking/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsClientRankingRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsClientRankingRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientRankingRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ClientRanking
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ClientRanking apiV2RelationshipManagerAnalyticsClientRankingRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<ClientRanking> localVarResp = apiV2RelationshipManagerAnalyticsClientRankingRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;ClientRanking&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientRanking> apiV2RelationshipManagerAnalyticsClientRankingRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientRankingRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<ClientRanking>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsClientRankingRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<ClientRanking> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsClientRankingRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<ClientRanking>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/inflows-outflows/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return RelationshipManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipManager apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<RelationshipManager> localVarResp = apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;RelationshipManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipManager> apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<RelationshipManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/portfolio-risk-performance/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return RelationshipManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipManager apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<RelationshipManager> localVarResp = apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;RelationshipManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipManager> apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<RelationshipManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve
     * @param relationshipManagerUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/total-active-clients/"
            .replaceAll("\\{" + "relationship_manager_uuid" + "\\}", localVarApiClient.escapeString(relationshipManagerUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveValidateBeforeCall(UUID relationshipManagerUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relationshipManagerUuid' is set
        if (relationshipManagerUuid == null) {
            throw new ApiException("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveCall(relationshipManagerUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return RelationshipManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RelationshipManager apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(UUID relationshipManagerUuid) throws ApiException {
        ApiResponse<RelationshipManager> localVarResp = apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveWithHttpInfo(relationshipManagerUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param relationshipManagerUuid  (required)
     * @return ApiResponse&lt;RelationshipManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelationshipManager> apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveWithHttpInfo(UUID relationshipManagerUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveValidateBeforeCall(relationshipManagerUuid, null);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param relationshipManagerUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveAsync(UUID relationshipManagerUuid, final ApiCallback<RelationshipManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveValidateBeforeCall(relationshipManagerUuid, _callback);
        Type localVarReturnType = new TypeToken<RelationshipManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
