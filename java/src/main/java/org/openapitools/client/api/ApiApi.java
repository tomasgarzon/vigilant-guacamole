/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AllocationDetail;
import org.openapitools.client.model.AllocationList;
import org.openapitools.client.model.AssetDetail;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.AuthenticationResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.ClientReferral;
import org.openapitools.client.model.ConversationCreate;
import org.openapitools.client.model.CreateOrder;
import org.openapitools.client.model.CurrentAllocation;
import org.openapitools.client.model.DepositCreate;
import org.openapitools.client.model.DepositDetail;
import org.openapitools.client.model.ETSForecastRequest;
import org.openapitools.client.model.EmailVerifyRequest;
import org.openapitools.client.model.EmailVerifyView;
import org.openapitools.client.model.FeedActivityList;
import org.openapitools.client.model.ForecastDecumulationRequest;
import org.openapitools.client.model.ForecastRequest;
import org.openapitools.client.model.Goal;
import org.openapitools.client.model.IntradayPrice;
import org.openapitools.client.model.InvestorModelPortfolio;
import org.openapitools.client.model.InvestorWithdrawalCreate;
import org.openapitools.client.model.InvoiceDetails;
import org.threeten.bp.LocalDate;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.MinimumAppVersion;
import org.openapitools.client.model.ModelPortfolioForecastRequest;
import org.openapitools.client.model.NucoroSetting;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.OrderList;
import org.openapitools.client.model.PaginatedAccessLogList;
import org.openapitools.client.model.PaginatedAllocationListList;
import org.openapitools.client.model.PaginatedAssetCategoryList;
import org.openapitools.client.model.PaginatedAssetGrowthList;
import org.openapitools.client.model.PaginatedAssetListList;
import org.openapitools.client.model.PaginatedBasePortfolioTypeRestrictionsList;
import org.openapitools.client.model.PaginatedCategoryList;
import org.openapitools.client.model.PaginatedConversationListList;
import org.openapitools.client.model.PaginatedCoreCategoryGroupList;
import org.openapitools.client.model.PaginatedCountryListList;
import org.openapitools.client.model.PaginatedDepositListList;
import org.openapitools.client.model.PaginatedFeedActivityListList;
import org.openapitools.client.model.PaginatedGoalList;
import org.openapitools.client.model.PaginatedIntradayPriceList;
import org.openapitools.client.model.PaginatedInvestorModelPortfolioList;
import org.openapitools.client.model.PaginatedInvestorWithdrawalListList;
import org.openapitools.client.model.PaginatedInvoiceListList;
import org.openapitools.client.model.PaginatedMessageList;
import org.openapitools.client.model.PaginatedNationalDocumentList;
import org.openapitools.client.model.PaginatedOrderListList;
import org.openapitools.client.model.PaginatedPortfolioListList;
import org.openapitools.client.model.PaginatedPortfolioPerformanceList;
import org.openapitools.client.model.PaginatedPortfolioPerformancePositionsList;
import org.openapitools.client.model.PaginatedPortfolioTypeList;
import org.openapitools.client.model.PaginatedPresetCategoryGroupList;
import org.openapitools.client.model.PaginatedPriceList;
import org.openapitools.client.model.PaginatedQuestionList;
import org.openapitools.client.model.PaginatedRebalanceList;
import org.openapitools.client.model.PaginatedTosList;
import org.openapitools.client.model.PatchedGoal;
import org.openapitools.client.model.PatchedPortfolioUpdate;
import org.openapitools.client.model.PortalSettingValueList;
import org.openapitools.client.model.PortfolioCreate;
import org.openapitools.client.model.PortfolioDetail;
import org.openapitools.client.model.PortfolioTypeRestrictions;
import org.openapitools.client.model.PortfolioUpdate;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.Rebalance;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.Subscribe;
import org.openapitools.client.model.Tos;
import java.util.UUID;
import org.openapitools.client.model.Unsubscribe;
import org.openapitools.client.model.WebsocketAuthentication;
import org.openapitools.client.model.WithdrawalDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiApi {
    private ApiClient localVarApiClient;

    public ApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apiSchemaRetrieve
     * @param format  (optional)
     * @param lang  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSchemaRetrieveCall(String format, String lang, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/schema/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/vnd.oai.openapi", "application/yaml", "application/vnd.oai.openapi+json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiSchemaRetrieveValidateBeforeCall(String format, String lang, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiSchemaRetrieveCall(format, lang, _callback);
        return localVarCall;

    }

    /**
     * 
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param format  (optional)
     * @param lang  (optional)
     * @return Map&lt;String, Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Object> apiSchemaRetrieve(String format, String lang) throws ApiException {
        ApiResponse<Map<String, Object>> localVarResp = apiSchemaRetrieveWithHttpInfo(format, lang);
        return localVarResp.getData();
    }

    /**
     * 
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param format  (optional)
     * @param lang  (optional)
     * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Object>> apiSchemaRetrieveWithHttpInfo(String format, String lang) throws ApiException {
        okhttp3.Call localVarCall = apiSchemaRetrieveValidateBeforeCall(format, lang, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param format  (optional)
     * @param lang  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiSchemaRetrieveAsync(String format, String lang, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiSchemaRetrieveValidateBeforeCall(format, lang, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AdviceEnginesEtsCategoriesList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesEtsCategoriesListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/advice-engines/ets/categories/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AdviceEnginesEtsCategoriesListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsCategoriesListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedCategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCategoryList apiV2AdviceEnginesEtsCategoriesList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedCategoryList> localVarResp = apiV2AdviceEnginesEtsCategoriesListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCategoryList> apiV2AdviceEnginesEtsCategoriesListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsCategoriesListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedCategoryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesEtsCategoriesListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedCategoryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsCategoriesListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCategoryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AdviceEnginesEtsCoreCategoryGroupsList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesEtsCoreCategoryGroupsListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/advice-engines/ets/core-category-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AdviceEnginesEtsCoreCategoryGroupsListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsCoreCategoryGroupsListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedCoreCategoryGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCoreCategoryGroupList apiV2AdviceEnginesEtsCoreCategoryGroupsList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedCoreCategoryGroupList> localVarResp = apiV2AdviceEnginesEtsCoreCategoryGroupsListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedCoreCategoryGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCoreCategoryGroupList> apiV2AdviceEnginesEtsCoreCategoryGroupsListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsCoreCategoryGroupsListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedCoreCategoryGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesEtsCoreCategoryGroupsListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedCoreCategoryGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsCoreCategoryGroupsListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCoreCategoryGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AdviceEnginesEtsForecastCreate
     * @param etSForecastRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesEtsForecastCreateCall(ETSForecastRequest etSForecastRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = etSForecastRequest;

        // create path and map variables
        String localVarPath = "/api/v2/advice-engines/ets/forecast/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AdviceEnginesEtsForecastCreateValidateBeforeCall(ETSForecastRequest etSForecastRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'etSForecastRequest' is set
        if (etSForecastRequest == null) {
            throw new ApiException("Missing the required parameter 'etSForecastRequest' when calling apiV2AdviceEnginesEtsForecastCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsForecastCreateCall(etSForecastRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * The forecast positions and amounts for the time_horizon and  risk_level chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     * @param etSForecastRequest  (required)
     * @return ETSForecastRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ETSForecastRequest apiV2AdviceEnginesEtsForecastCreate(ETSForecastRequest etSForecastRequest) throws ApiException {
        ApiResponse<ETSForecastRequest> localVarResp = apiV2AdviceEnginesEtsForecastCreateWithHttpInfo(etSForecastRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * The forecast positions and amounts for the time_horizon and  risk_level chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     * @param etSForecastRequest  (required)
     * @return ApiResponse&lt;ETSForecastRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ETSForecastRequest> apiV2AdviceEnginesEtsForecastCreateWithHttpInfo(ETSForecastRequest etSForecastRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsForecastCreateValidateBeforeCall(etSForecastRequest, null);
        Type localVarReturnType = new TypeToken<ETSForecastRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The forecast positions and amounts for the time_horizon and  risk_level chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     * @param etSForecastRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesEtsForecastCreateAsync(ETSForecastRequest etSForecastRequest, final ApiCallback<ETSForecastRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsForecastCreateValidateBeforeCall(etSForecastRequest, _callback);
        Type localVarReturnType = new TypeToken<ETSForecastRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AdviceEnginesEtsPresetCategoryGroupsList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesEtsPresetCategoryGroupsListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/advice-engines/ets/preset-category-groups/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AdviceEnginesEtsPresetCategoryGroupsListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsPresetCategoryGroupsListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedPresetCategoryGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPresetCategoryGroupList apiV2AdviceEnginesEtsPresetCategoryGroupsList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedPresetCategoryGroupList> localVarResp = apiV2AdviceEnginesEtsPresetCategoryGroupsListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedPresetCategoryGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPresetCategoryGroupList> apiV2AdviceEnginesEtsPresetCategoryGroupsListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsPresetCategoryGroupsListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedPresetCategoryGroupList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesEtsPresetCategoryGroupsListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedPresetCategoryGroupList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AdviceEnginesEtsPresetCategoryGroupsListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPresetCategoryGroupList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AdviceEnginesModelPortfolioForecastCreate
     * @param modelPortfolioForecastRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesModelPortfolioForecastCreateCall(ModelPortfolioForecastRequest modelPortfolioForecastRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = modelPortfolioForecastRequest;

        // create path and map variables
        String localVarPath = "/api/v2/advice-engines/model-portfolio/forecast/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AdviceEnginesModelPortfolioForecastCreateValidateBeforeCall(ModelPortfolioForecastRequest modelPortfolioForecastRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'modelPortfolioForecastRequest' is set
        if (modelPortfolioForecastRequest == null) {
            throw new ApiException("Missing the required parameter 'modelPortfolioForecastRequest' when calling apiV2AdviceEnginesModelPortfolioForecastCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioForecastCreateCall(modelPortfolioForecastRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * The forecast positions and amounts for the time_horizon chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     * @param modelPortfolioForecastRequest  (required)
     * @return ModelPortfolioForecastRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ModelPortfolioForecastRequest apiV2AdviceEnginesModelPortfolioForecastCreate(ModelPortfolioForecastRequest modelPortfolioForecastRequest) throws ApiException {
        ApiResponse<ModelPortfolioForecastRequest> localVarResp = apiV2AdviceEnginesModelPortfolioForecastCreateWithHttpInfo(modelPortfolioForecastRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * The forecast positions and amounts for the time_horizon chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     * @param modelPortfolioForecastRequest  (required)
     * @return ApiResponse&lt;ModelPortfolioForecastRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelPortfolioForecastRequest> apiV2AdviceEnginesModelPortfolioForecastCreateWithHttpInfo(ModelPortfolioForecastRequest modelPortfolioForecastRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioForecastCreateValidateBeforeCall(modelPortfolioForecastRequest, null);
        Type localVarReturnType = new TypeToken<ModelPortfolioForecastRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The forecast positions and amounts for the time_horizon chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     * @param modelPortfolioForecastRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesModelPortfolioForecastCreateAsync(ModelPortfolioForecastRequest modelPortfolioForecastRequest, final ApiCallback<ModelPortfolioForecastRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioForecastCreateValidateBeforeCall(modelPortfolioForecastRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelPortfolioForecastRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AdviceEnginesModelPortfolioModelPortfoliosList
     * @param extraData Additional ModelPortfolio attributes (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param riskHigher  (optional)
     * @param riskLevel  (optional)
     * @param riskLower  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesModelPortfolioModelPortfoliosListCall(Map<String, Object> extraData, Integer limit, String name, Integer offset, Integer riskHigher, Integer riskLevel, Integer riskLower, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/advice-engines/model-portfolio/model-portfolios/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (extraData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra_data", extraData));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (riskHigher != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("risk_higher", riskHigher));
        }

        if (riskLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("risk_level", riskLevel));
        }

        if (riskLower != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("risk_lower", riskLower));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AdviceEnginesModelPortfolioModelPortfoliosListValidateBeforeCall(Map<String, Object> extraData, Integer limit, String name, Integer offset, Integer riskHigher, Integer riskLevel, Integer riskLower, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioModelPortfoliosListCall(extraData, limit, name, offset, riskHigher, riskLevel, riskLower, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param extraData Additional ModelPortfolio attributes (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param riskHigher  (optional)
     * @param riskLevel  (optional)
     * @param riskLower  (optional)
     * @return PaginatedInvestorModelPortfolioList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedInvestorModelPortfolioList apiV2AdviceEnginesModelPortfolioModelPortfoliosList(Map<String, Object> extraData, Integer limit, String name, Integer offset, Integer riskHigher, Integer riskLevel, Integer riskLower) throws ApiException {
        ApiResponse<PaginatedInvestorModelPortfolioList> localVarResp = apiV2AdviceEnginesModelPortfolioModelPortfoliosListWithHttpInfo(extraData, limit, name, offset, riskHigher, riskLevel, riskLower);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param extraData Additional ModelPortfolio attributes (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param riskHigher  (optional)
     * @param riskLevel  (optional)
     * @param riskLower  (optional)
     * @return ApiResponse&lt;PaginatedInvestorModelPortfolioList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedInvestorModelPortfolioList> apiV2AdviceEnginesModelPortfolioModelPortfoliosListWithHttpInfo(Map<String, Object> extraData, Integer limit, String name, Integer offset, Integer riskHigher, Integer riskLevel, Integer riskLower) throws ApiException {
        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioModelPortfoliosListValidateBeforeCall(extraData, limit, name, offset, riskHigher, riskLevel, riskLower, null);
        Type localVarReturnType = new TypeToken<PaginatedInvestorModelPortfolioList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param extraData Additional ModelPortfolio attributes (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param riskHigher  (optional)
     * @param riskLevel  (optional)
     * @param riskLower  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesModelPortfolioModelPortfoliosListAsync(Map<String, Object> extraData, Integer limit, String name, Integer offset, Integer riskHigher, Integer riskLevel, Integer riskLower, final ApiCallback<PaginatedInvestorModelPortfolioList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioModelPortfoliosListValidateBeforeCall(extraData, limit, name, offset, riskHigher, riskLevel, riskLower, _callback);
        Type localVarReturnType = new TypeToken<PaginatedInvestorModelPortfolioList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieve
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/advice-engines/model-portfolio/model-portfolios/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param uuid  (required)
     * @return InvestorModelPortfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InvestorModelPortfolio apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieve(UUID uuid) throws ApiException {
        ApiResponse<InvestorModelPortfolio> localVarResp = apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uuid  (required)
     * @return ApiResponse&lt;InvestorModelPortfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvestorModelPortfolio> apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<InvestorModelPortfolio>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveAsync(UUID uuid, final ApiCallback<InvestorModelPortfolio> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<InvestorModelPortfolio>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AssetsCategoriesList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param type  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsCategoriesListCall(Integer limit, Integer offset, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/assets/categories/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AssetsCategoriesListValidateBeforeCall(Integer limit, Integer offset, String type, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2AssetsCategoriesListCall(limit, offset, type, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve all asset categories
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param type  (optional)
     * @return PaginatedAssetCategoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAssetCategoryList apiV2AssetsCategoriesList(Integer limit, Integer offset, String type) throws ApiException {
        ApiResponse<PaginatedAssetCategoryList> localVarResp = apiV2AssetsCategoriesListWithHttpInfo(limit, offset, type);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all asset categories
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param type  (optional)
     * @return ApiResponse&lt;PaginatedAssetCategoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAssetCategoryList> apiV2AssetsCategoriesListWithHttpInfo(Integer limit, Integer offset, String type) throws ApiException {
        okhttp3.Call localVarCall = apiV2AssetsCategoriesListValidateBeforeCall(limit, offset, type, null);
        Type localVarReturnType = new TypeToken<PaginatedAssetCategoryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all asset categories
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param type  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsCategoriesListAsync(Integer limit, Integer offset, String type, final ApiCallback<PaginatedAssetCategoryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AssetsCategoriesListValidateBeforeCall(limit, offset, type, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAssetCategoryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AssetsIntradayPricesLatestRetrieve
     * @param assetIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsIntradayPricesLatestRetrieveCall(UUID assetIdentifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/assets/{asset_identifier}/intraday-prices/latest/"
            .replaceAll("\\{" + "asset_identifier" + "\\}", localVarApiClient.escapeString(assetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AssetsIntradayPricesLatestRetrieveValidateBeforeCall(UUID assetIdentifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetIdentifier' is set
        if (assetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsIntradayPricesLatestRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AssetsIntradayPricesLatestRetrieveCall(assetIdentifier, _callback);
        return localVarCall;

    }

    /**
     * 
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @return IntradayPrice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public IntradayPrice apiV2AssetsIntradayPricesLatestRetrieve(UUID assetIdentifier) throws ApiException {
        ApiResponse<IntradayPrice> localVarResp = apiV2AssetsIntradayPricesLatestRetrieveWithHttpInfo(assetIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @return ApiResponse&lt;IntradayPrice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntradayPrice> apiV2AssetsIntradayPricesLatestRetrieveWithHttpInfo(UUID assetIdentifier) throws ApiException {
        okhttp3.Call localVarCall = apiV2AssetsIntradayPricesLatestRetrieveValidateBeforeCall(assetIdentifier, null);
        Type localVarReturnType = new TypeToken<IntradayPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsIntradayPricesLatestRetrieveAsync(UUID assetIdentifier, final ApiCallback<IntradayPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AssetsIntradayPricesLatestRetrieveValidateBeforeCall(assetIdentifier, _callback);
        Type localVarReturnType = new TypeToken<IntradayPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AssetsIntradayPricesList
     * @param assetIdentifier  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param datetimeAfter  (optional)
     * @param datetimeBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsIntradayPricesListCall(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/assets/{asset_identifier}/intraday-prices/"
            .replaceAll("\\{" + "asset_identifier" + "\\}", localVarApiClient.escapeString(assetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_after", dateAfter));
        }

        if (dateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_before", dateBefore));
        }

        if (datetimeAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datetime_after", datetimeAfter));
        }

        if (datetimeBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datetime_before", datetimeBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AssetsIntradayPricesListValidateBeforeCall(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetIdentifier' is set
        if (assetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsIntradayPricesList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AssetsIntradayPricesListCall(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param datetimeAfter  (optional)
     * @param datetimeBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedIntradayPriceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedIntradayPriceList apiV2AssetsIntradayPricesList(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedIntradayPriceList> localVarResp = apiV2AssetsIntradayPricesListWithHttpInfo(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param datetimeAfter  (optional)
     * @param datetimeBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedIntradayPriceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedIntradayPriceList> apiV2AssetsIntradayPricesListWithHttpInfo(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2AssetsIntradayPricesListValidateBeforeCall(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedIntradayPriceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param datetimeAfter  (optional)
     * @param datetimeBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsIntradayPricesListAsync(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset, final ApiCallback<PaginatedIntradayPriceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AssetsIntradayPricesListValidateBeforeCall(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedIntradayPriceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AssetsList
     * @param assetType  (optional)
     * @param categoryCode  (optional)
     * @param categoryType  (optional)
     * @param currency  (optional)
     * @param isin  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param market  (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param ticker  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsListCall(String assetType, List<String> categoryCode, List<String> categoryType, Integer currency, String isin, Integer limit, Integer market, String name, Integer offset, String status, String ticker, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/assets/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_type", assetType));
        }

        if (categoryCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category_code", categoryCode));
        }

        if (categoryType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category_type", categoryType));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (isin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isin", isin));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (market != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("market", market));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (ticker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ticker", ticker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AssetsListValidateBeforeCall(String assetType, List<String> categoryCode, List<String> categoryType, Integer currency, String isin, Integer limit, Integer market, String name, Integer offset, String status, String ticker, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2AssetsListCall(assetType, categoryCode, categoryType, currency, isin, limit, market, name, offset, status, ticker, _callback);
        return localVarCall;

    }

    /**
     * 
     * A list of Assets filtered by category codes. Default is an empty dict which returns the whole universe.
     * @param assetType  (optional)
     * @param categoryCode  (optional)
     * @param categoryType  (optional)
     * @param currency  (optional)
     * @param isin  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param market  (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param ticker  (optional)
     * @return PaginatedAssetListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAssetListList apiV2AssetsList(String assetType, List<String> categoryCode, List<String> categoryType, Integer currency, String isin, Integer limit, Integer market, String name, Integer offset, String status, String ticker) throws ApiException {
        ApiResponse<PaginatedAssetListList> localVarResp = apiV2AssetsListWithHttpInfo(assetType, categoryCode, categoryType, currency, isin, limit, market, name, offset, status, ticker);
        return localVarResp.getData();
    }

    /**
     * 
     * A list of Assets filtered by category codes. Default is an empty dict which returns the whole universe.
     * @param assetType  (optional)
     * @param categoryCode  (optional)
     * @param categoryType  (optional)
     * @param currency  (optional)
     * @param isin  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param market  (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param ticker  (optional)
     * @return ApiResponse&lt;PaginatedAssetListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAssetListList> apiV2AssetsListWithHttpInfo(String assetType, List<String> categoryCode, List<String> categoryType, Integer currency, String isin, Integer limit, Integer market, String name, Integer offset, String status, String ticker) throws ApiException {
        okhttp3.Call localVarCall = apiV2AssetsListValidateBeforeCall(assetType, categoryCode, categoryType, currency, isin, limit, market, name, offset, status, ticker, null);
        Type localVarReturnType = new TypeToken<PaginatedAssetListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A list of Assets filtered by category codes. Default is an empty dict which returns the whole universe.
     * @param assetType  (optional)
     * @param categoryCode  (optional)
     * @param categoryType  (optional)
     * @param currency  (optional)
     * @param isin  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param market  (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param ticker  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsListAsync(String assetType, List<String> categoryCode, List<String> categoryType, Integer currency, String isin, Integer limit, Integer market, String name, Integer offset, String status, String ticker, final ApiCallback<PaginatedAssetListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AssetsListValidateBeforeCall(assetType, categoryCode, categoryType, currency, isin, limit, market, name, offset, status, ticker, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAssetListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AssetsPerformanceList
     * @param assetIdentifier  (required)
     * @param dateYearAfter  (optional)
     * @param dateYearBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsPerformanceListCall(UUID assetIdentifier, BigDecimal dateYearAfter, BigDecimal dateYearBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/assets/{asset_identifier}/performance/"
            .replaceAll("\\{" + "asset_identifier" + "\\}", localVarApiClient.escapeString(assetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateYearAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_year_after", dateYearAfter));
        }

        if (dateYearBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_year_before", dateYearBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AssetsPerformanceListValidateBeforeCall(UUID assetIdentifier, BigDecimal dateYearAfter, BigDecimal dateYearBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetIdentifier' is set
        if (assetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsPerformanceList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AssetsPerformanceListCall(assetIdentifier, dateYearAfter, dateYearBefore, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve asset&#39;s yearly performance.  This View overwrites ListAPIView&#39;s &#39;list&#39; method because it doesn&#39;t have any hook that allows us to call &#39;get_asset_price_year_graph after the filtering is applied.
     * @param assetIdentifier  (required)
     * @param dateYearAfter  (optional)
     * @param dateYearBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedAssetGrowthList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAssetGrowthList apiV2AssetsPerformanceList(UUID assetIdentifier, BigDecimal dateYearAfter, BigDecimal dateYearBefore, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedAssetGrowthList> localVarResp = apiV2AssetsPerformanceListWithHttpInfo(assetIdentifier, dateYearAfter, dateYearBefore, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve asset&#39;s yearly performance.  This View overwrites ListAPIView&#39;s &#39;list&#39; method because it doesn&#39;t have any hook that allows us to call &#39;get_asset_price_year_graph after the filtering is applied.
     * @param assetIdentifier  (required)
     * @param dateYearAfter  (optional)
     * @param dateYearBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedAssetGrowthList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAssetGrowthList> apiV2AssetsPerformanceListWithHttpInfo(UUID assetIdentifier, BigDecimal dateYearAfter, BigDecimal dateYearBefore, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2AssetsPerformanceListValidateBeforeCall(assetIdentifier, dateYearAfter, dateYearBefore, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedAssetGrowthList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve asset&#39;s yearly performance.  This View overwrites ListAPIView&#39;s &#39;list&#39; method because it doesn&#39;t have any hook that allows us to call &#39;get_asset_price_year_graph after the filtering is applied.
     * @param assetIdentifier  (required)
     * @param dateYearAfter  (optional)
     * @param dateYearBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsPerformanceListAsync(UUID assetIdentifier, BigDecimal dateYearAfter, BigDecimal dateYearBefore, Integer limit, Integer offset, final ApiCallback<PaginatedAssetGrowthList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AssetsPerformanceListValidateBeforeCall(assetIdentifier, dateYearAfter, dateYearBefore, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAssetGrowthList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AssetsPricesLatestRetrieve
     * @param assetIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsPricesLatestRetrieveCall(UUID assetIdentifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/assets/{asset_identifier}/prices/latest/"
            .replaceAll("\\{" + "asset_identifier" + "\\}", localVarApiClient.escapeString(assetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AssetsPricesLatestRetrieveValidateBeforeCall(UUID assetIdentifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetIdentifier' is set
        if (assetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsPricesLatestRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AssetsPricesLatestRetrieveCall(assetIdentifier, _callback);
        return localVarCall;

    }

    /**
     * 
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @return Price
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Price apiV2AssetsPricesLatestRetrieve(UUID assetIdentifier) throws ApiException {
        ApiResponse<Price> localVarResp = apiV2AssetsPricesLatestRetrieveWithHttpInfo(assetIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @return ApiResponse&lt;Price&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Price> apiV2AssetsPricesLatestRetrieveWithHttpInfo(UUID assetIdentifier) throws ApiException {
        okhttp3.Call localVarCall = apiV2AssetsPricesLatestRetrieveValidateBeforeCall(assetIdentifier, null);
        Type localVarReturnType = new TypeToken<Price>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsPricesLatestRetrieveAsync(UUID assetIdentifier, final ApiCallback<Price> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AssetsPricesLatestRetrieveValidateBeforeCall(assetIdentifier, _callback);
        Type localVarReturnType = new TypeToken<Price>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AssetsPricesList
     * @param assetIdentifier  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param datetimeAfter  (optional)
     * @param datetimeBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsPricesListCall(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/assets/{asset_identifier}/prices/"
            .replaceAll("\\{" + "asset_identifier" + "\\}", localVarApiClient.escapeString(assetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_after", dateAfter));
        }

        if (dateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_before", dateBefore));
        }

        if (datetimeAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datetime_after", datetimeAfter));
        }

        if (datetimeBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datetime_before", datetimeBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AssetsPricesListValidateBeforeCall(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetIdentifier' is set
        if (assetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsPricesList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AssetsPricesListCall(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param datetimeAfter  (optional)
     * @param datetimeBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedPriceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPriceList apiV2AssetsPricesList(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedPriceList> localVarResp = apiV2AssetsPricesListWithHttpInfo(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param datetimeAfter  (optional)
     * @param datetimeBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedPriceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPriceList> apiV2AssetsPricesListWithHttpInfo(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2AssetsPricesListValidateBeforeCall(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedPriceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param assetIdentifier  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param datetimeAfter  (optional)
     * @param datetimeBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsPricesListAsync(UUID assetIdentifier, LocalDate dateAfter, LocalDate dateBefore, OffsetDateTime datetimeAfter, OffsetDateTime datetimeBefore, Integer limit, Integer offset, final ApiCallback<PaginatedPriceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AssetsPricesListValidateBeforeCall(assetIdentifier, dateAfter, dateBefore, datetimeAfter, datetimeBefore, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPriceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2AssetsRetrieve
     * @param assetIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsRetrieveCall(UUID assetIdentifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/assets/{asset_identifier}/"
            .replaceAll("\\{" + "asset_identifier" + "\\}", localVarApiClient.escapeString(assetIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2AssetsRetrieveValidateBeforeCall(UUID assetIdentifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'assetIdentifier' is set
        if (assetIdentifier == null) {
            throw new ApiException("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2AssetsRetrieveCall(assetIdentifier, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allows get an asset instance by * UUID * ISIN * ISIN &amp; MARKET_CODE * ISIN &amp; MARKET_CODE &amp; CURRENCY_CODE  Examples:     * assets/a66633d7-4418-4c85-9582-01c80df531d4/     * assets/IE00B579F325/     * assets/IE00B579F325_XETR_GBP/     * assets/IE00B579F325_XETR/
     * @param assetIdentifier  (required)
     * @return AssetDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AssetDetail apiV2AssetsRetrieve(UUID assetIdentifier) throws ApiException {
        ApiResponse<AssetDetail> localVarResp = apiV2AssetsRetrieveWithHttpInfo(assetIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows get an asset instance by * UUID * ISIN * ISIN &amp; MARKET_CODE * ISIN &amp; MARKET_CODE &amp; CURRENCY_CODE  Examples:     * assets/a66633d7-4418-4c85-9582-01c80df531d4/     * assets/IE00B579F325/     * assets/IE00B579F325_XETR_GBP/     * assets/IE00B579F325_XETR/
     * @param assetIdentifier  (required)
     * @return ApiResponse&lt;AssetDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssetDetail> apiV2AssetsRetrieveWithHttpInfo(UUID assetIdentifier) throws ApiException {
        okhttp3.Call localVarCall = apiV2AssetsRetrieveValidateBeforeCall(assetIdentifier, null);
        Type localVarReturnType = new TypeToken<AssetDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows get an asset instance by * UUID * ISIN * ISIN &amp; MARKET_CODE * ISIN &amp; MARKET_CODE &amp; CURRENCY_CODE  Examples:     * assets/a66633d7-4418-4c85-9582-01c80df531d4/     * assets/IE00B579F325/     * assets/IE00B579F325_XETR_GBP/     * assets/IE00B579F325_XETR/
     * @param assetIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2AssetsRetrieveAsync(UUID assetIdentifier, final ApiCallback<AssetDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2AssetsRetrieveValidateBeforeCall(assetIdentifier, _callback);
        Type localVarReturnType = new TypeToken<AssetDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2BillingInvoicesList
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BillingInvoicesListCall(LocalDate dateFrom, LocalDate dateTo, Integer limit, Integer offset, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/billing/invoices/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2BillingInvoicesListValidateBeforeCall(LocalDate dateFrom, LocalDate dateTo, Integer limit, Integer offset, String status, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2BillingInvoicesListCall(dateFrom, dateTo, limit, offset, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @return PaginatedInvoiceListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedInvoiceListList apiV2BillingInvoicesList(LocalDate dateFrom, LocalDate dateTo, Integer limit, Integer offset, String status) throws ApiException {
        ApiResponse<PaginatedInvoiceListList> localVarResp = apiV2BillingInvoicesListWithHttpInfo(dateFrom, dateTo, limit, offset, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;PaginatedInvoiceListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedInvoiceListList> apiV2BillingInvoicesListWithHttpInfo(LocalDate dateFrom, LocalDate dateTo, Integer limit, Integer offset, String status) throws ApiException {
        okhttp3.Call localVarCall = apiV2BillingInvoicesListValidateBeforeCall(dateFrom, dateTo, limit, offset, status, null);
        Type localVarReturnType = new TypeToken<PaginatedInvoiceListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BillingInvoicesListAsync(LocalDate dateFrom, LocalDate dateTo, Integer limit, Integer offset, String status, final ApiCallback<PaginatedInvoiceListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2BillingInvoicesListValidateBeforeCall(dateFrom, dateTo, limit, offset, status, _callback);
        Type localVarReturnType = new TypeToken<PaginatedInvoiceListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2BillingInvoicesRetrieve
     * @param uuid  (required)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BillingInvoicesRetrieveCall(UUID uuid, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/billing/invoices/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json", "application/pdf", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2BillingInvoicesRetrieveValidateBeforeCall(UUID uuid, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2BillingInvoicesRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2BillingInvoicesRetrieveCall(uuid, format, _callback);
        return localVarCall;

    }

    /**
     * 
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param uuid  (required)
     * @param format  (optional)
     * @return InvoiceDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InvoiceDetails apiV2BillingInvoicesRetrieve(UUID uuid, String format) throws ApiException {
        ApiResponse<InvoiceDetails> localVarResp = apiV2BillingInvoicesRetrieveWithHttpInfo(uuid, format);
        return localVarResp.getData();
    }

    /**
     * 
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param uuid  (required)
     * @param format  (optional)
     * @return ApiResponse&lt;InvoiceDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoiceDetails> apiV2BillingInvoicesRetrieveWithHttpInfo(UUID uuid, String format) throws ApiException {
        okhttp3.Call localVarCall = apiV2BillingInvoicesRetrieveValidateBeforeCall(uuid, format, null);
        Type localVarReturnType = new TypeToken<InvoiceDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param uuid  (required)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BillingInvoicesRetrieveAsync(UUID uuid, String format, final ApiCallback<InvoiceDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2BillingInvoicesRetrieveValidateBeforeCall(uuid, format, _callback);
        Type localVarReturnType = new TypeToken<InvoiceDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2BrokerOrdersCreate
     * @param portfolioUuid  (required)
     * @param createOrder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BrokerOrdersCreateCall(UUID portfolioUuid, CreateOrder createOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createOrder;

        // create path and map variables
        String localVarPath = "/api/v2/broker/orders/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2BrokerOrdersCreateValidateBeforeCall(UUID portfolioUuid, CreateOrder createOrder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2BrokerOrdersCreate(Async)");
        }
        
        // verify the required parameter 'createOrder' is set
        if (createOrder == null) {
            throw new ApiException("Missing the required parameter 'createOrder' when calling apiV2BrokerOrdersCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2BrokerOrdersCreateCall(portfolioUuid, createOrder, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param createOrder  (required)
     * @return CreateOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrder apiV2BrokerOrdersCreate(UUID portfolioUuid, CreateOrder createOrder) throws ApiException {
        ApiResponse<CreateOrder> localVarResp = apiV2BrokerOrdersCreateWithHttpInfo(portfolioUuid, createOrder);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param createOrder  (required)
     * @return ApiResponse&lt;CreateOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrder> apiV2BrokerOrdersCreateWithHttpInfo(UUID portfolioUuid, CreateOrder createOrder) throws ApiException {
        okhttp3.Call localVarCall = apiV2BrokerOrdersCreateValidateBeforeCall(portfolioUuid, createOrder, null);
        Type localVarReturnType = new TypeToken<CreateOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param createOrder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BrokerOrdersCreateAsync(UUID portfolioUuid, CreateOrder createOrder, final ApiCallback<CreateOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2BrokerOrdersCreateValidateBeforeCall(portfolioUuid, createOrder, _callback);
        Type localVarReturnType = new TypeToken<CreateOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2BrokerOrdersDestroy
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BrokerOrdersDestroyCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/broker/orders/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2BrokerOrdersDestroyValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2BrokerOrdersDestroy(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2BrokerOrdersDestroy(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2BrokerOrdersDestroyCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Cancel or request cancellation to the broker
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2BrokerOrdersDestroy(UUID portfolioUuid, UUID uuid) throws ApiException {
        apiV2BrokerOrdersDestroyWithHttpInfo(portfolioUuid, uuid);
    }

    /**
     * 
     * Cancel or request cancellation to the broker
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2BrokerOrdersDestroyWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2BrokerOrdersDestroyValidateBeforeCall(portfolioUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancel or request cancellation to the broker
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BrokerOrdersDestroyAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2BrokerOrdersDestroyValidateBeforeCall(portfolioUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2BrokerOrdersList
     * @param portfolioUuid  (required)
     * @param adviceExternalId  (optional)
     * @param asset  (optional)
     * @param completedAfter  (optional)
     * @param completedBefore  (optional)
     * @param extraData Additional order attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param portfolio  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BrokerOrdersListCall(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/broker/orders/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adviceExternalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advice_external_id", adviceExternalId));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (completedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_after", completedAfter));
        }

        if (completedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_before", completedBefore));
        }

        if (extraData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra_data", extraData));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (portfolio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolio", portfolio));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2BrokerOrdersListValidateBeforeCall(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2BrokerOrdersList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2BrokerOrdersListCall(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param adviceExternalId  (optional)
     * @param asset  (optional)
     * @param completedAfter  (optional)
     * @param completedBefore  (optional)
     * @param extraData Additional order attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param portfolio  (optional)
     * @param status  (optional)
     * @return PaginatedOrderListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedOrderListList apiV2BrokerOrdersList(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status) throws ApiException {
        ApiResponse<PaginatedOrderListList> localVarResp = apiV2BrokerOrdersListWithHttpInfo(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param adviceExternalId  (optional)
     * @param asset  (optional)
     * @param completedAfter  (optional)
     * @param completedBefore  (optional)
     * @param extraData Additional order attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param portfolio  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;PaginatedOrderListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedOrderListList> apiV2BrokerOrdersListWithHttpInfo(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status) throws ApiException {
        okhttp3.Call localVarCall = apiV2BrokerOrdersListValidateBeforeCall(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status, null);
        Type localVarReturnType = new TypeToken<PaginatedOrderListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param adviceExternalId  (optional)
     * @param asset  (optional)
     * @param completedAfter  (optional)
     * @param completedBefore  (optional)
     * @param extraData Additional order attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param portfolio  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BrokerOrdersListAsync(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status, final ApiCallback<PaginatedOrderListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2BrokerOrdersListValidateBeforeCall(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status, _callback);
        Type localVarReturnType = new TypeToken<PaginatedOrderListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2BrokerOrdersRetrieve
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BrokerOrdersRetrieveCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/broker/orders/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2BrokerOrdersRetrieveValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2BrokerOrdersRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2BrokerOrdersRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2BrokerOrdersRetrieveCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return OrderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OrderList apiV2BrokerOrdersRetrieve(UUID portfolioUuid, UUID uuid) throws ApiException {
        ApiResponse<OrderList> localVarResp = apiV2BrokerOrdersRetrieveWithHttpInfo(portfolioUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;OrderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderList> apiV2BrokerOrdersRetrieveWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2BrokerOrdersRetrieveValidateBeforeCall(portfolioUuid, uuid, null);
        Type localVarReturnType = new TypeToken<OrderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2BrokerOrdersRetrieveAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<OrderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2BrokerOrdersRetrieveValidateBeforeCall(portfolioUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<OrderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2ClientsMeVerifyEmailCreate
     * @param emailVerifyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ClientsMeVerifyEmailCreateCall(EmailVerifyRequest emailVerifyRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = emailVerifyRequest;

        // create path and map variables
        String localVarPath = "/api/v2/clients/me/verify/email/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ClientsMeVerifyEmailCreateValidateBeforeCall(EmailVerifyRequest emailVerifyRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2ClientsMeVerifyEmailCreateCall(emailVerifyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Request e-mail account verification notification.
     * @param emailVerifyRequest  (optional)
     * @return EmailVerifyRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EmailVerifyRequest apiV2ClientsMeVerifyEmailCreate(EmailVerifyRequest emailVerifyRequest) throws ApiException {
        ApiResponse<EmailVerifyRequest> localVarResp = apiV2ClientsMeVerifyEmailCreateWithHttpInfo(emailVerifyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Request e-mail account verification notification.
     * @param emailVerifyRequest  (optional)
     * @return ApiResponse&lt;EmailVerifyRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailVerifyRequest> apiV2ClientsMeVerifyEmailCreateWithHttpInfo(EmailVerifyRequest emailVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV2ClientsMeVerifyEmailCreateValidateBeforeCall(emailVerifyRequest, null);
        Type localVarReturnType = new TypeToken<EmailVerifyRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Request e-mail account verification notification.
     * @param emailVerifyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ClientsMeVerifyEmailCreateAsync(EmailVerifyRequest emailVerifyRequest, final ApiCallback<EmailVerifyRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ClientsMeVerifyEmailCreateValidateBeforeCall(emailVerifyRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailVerifyRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2ClientsNationalDocumentsList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ClientsNationalDocumentsListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/national_documents/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ClientsNationalDocumentsListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2ClientsNationalDocumentsListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedNationalDocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedNationalDocumentList apiV2ClientsNationalDocumentsList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedNationalDocumentList> localVarResp = apiV2ClientsNationalDocumentsListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedNationalDocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedNationalDocumentList> apiV2ClientsNationalDocumentsListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2ClientsNationalDocumentsListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedNationalDocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ClientsNationalDocumentsListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedNationalDocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ClientsNationalDocumentsListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedNationalDocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2ClientsReferralRetrieve
     * @param referralCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ClientsReferralRetrieveCall(String referralCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/referral/{referral_code}/"
            .replaceAll("\\{" + "referral_code" + "\\}", localVarApiClient.escapeString(referralCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ClientsReferralRetrieveValidateBeforeCall(String referralCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'referralCode' is set
        if (referralCode == null) {
            throw new ApiException("Missing the required parameter 'referralCode' when calling apiV2ClientsReferralRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2ClientsReferralRetrieveCall(referralCode, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the currently logged in client referral code
     * @param referralCode  (required)
     * @return ClientReferral
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ClientReferral apiV2ClientsReferralRetrieve(String referralCode) throws ApiException {
        ApiResponse<ClientReferral> localVarResp = apiV2ClientsReferralRetrieveWithHttpInfo(referralCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the currently logged in client referral code
     * @param referralCode  (required)
     * @return ApiResponse&lt;ClientReferral&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientReferral> apiV2ClientsReferralRetrieveWithHttpInfo(String referralCode) throws ApiException {
        okhttp3.Call localVarCall = apiV2ClientsReferralRetrieveValidateBeforeCall(referralCode, null);
        Type localVarReturnType = new TypeToken<ClientReferral>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the currently logged in client referral code
     * @param referralCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ClientsReferralRetrieveAsync(String referralCode, final ApiCallback<ClientReferral> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ClientsReferralRetrieveValidateBeforeCall(referralCode, _callback);
        Type localVarReturnType = new TypeToken<ClientReferral>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2ClientsVerifyEmailUpdate
     * @param uuid  (required)
     * @param emailVerifyView  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ClientsVerifyEmailUpdateCall(UUID uuid, EmailVerifyView emailVerifyView, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = emailVerifyView;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{uuid}/verify/email/"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2ClientsVerifyEmailUpdateValidateBeforeCall(UUID uuid, EmailVerifyView emailVerifyView, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2ClientsVerifyEmailUpdate(Async)");
        }
        
        // verify the required parameter 'emailVerifyView' is set
        if (emailVerifyView == null) {
            throw new ApiException("Missing the required parameter 'emailVerifyView' when calling apiV2ClientsVerifyEmailUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2ClientsVerifyEmailUpdateCall(uuid, emailVerifyView, _callback);
        return localVarCall;

    }

    /**
     * 
     * Verify e-mail account with the given email token.
     * @param uuid  (required)
     * @param emailVerifyView  (required)
     * @return EmailVerifyView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public EmailVerifyView apiV2ClientsVerifyEmailUpdate(UUID uuid, EmailVerifyView emailVerifyView) throws ApiException {
        ApiResponse<EmailVerifyView> localVarResp = apiV2ClientsVerifyEmailUpdateWithHttpInfo(uuid, emailVerifyView);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify e-mail account with the given email token.
     * @param uuid  (required)
     * @param emailVerifyView  (required)
     * @return ApiResponse&lt;EmailVerifyView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailVerifyView> apiV2ClientsVerifyEmailUpdateWithHttpInfo(UUID uuid, EmailVerifyView emailVerifyView) throws ApiException {
        okhttp3.Call localVarCall = apiV2ClientsVerifyEmailUpdateValidateBeforeCall(uuid, emailVerifyView, null);
        Type localVarReturnType = new TypeToken<EmailVerifyView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify e-mail account with the given email token.
     * @param uuid  (required)
     * @param emailVerifyView  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2ClientsVerifyEmailUpdateAsync(UUID uuid, EmailVerifyView emailVerifyView, final ApiCallback<EmailVerifyView> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2ClientsVerifyEmailUpdateValidateBeforeCall(uuid, emailVerifyView, _callback);
        Type localVarReturnType = new TypeToken<EmailVerifyView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2FeedsAccessLogsList
     * @param browser  (optional)
     * @param browserVersion  (optional)
     * @param channel  (optional)
     * @param city  (optional)
     * @param country  (optional)
     * @param deviceBrand  (optional)
     * @param deviceModel  (optional)
     * @param ipAddress  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param os  (optional)
     * @param osVersion  (optional)
     * @param userAgent  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2FeedsAccessLogsListCall(String browser, String browserVersion, String channel, String city, Integer country, String deviceBrand, String deviceModel, String ipAddress, Integer limit, Integer offset, String os, String osVersion, String userAgent, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/feeds/access-logs/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (browser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser", browser));
        }

        if (browserVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browser_version", browserVersion));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (deviceBrand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_brand", deviceBrand));
        }

        if (deviceModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("device_model", deviceModel));
        }

        if (ipAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip_address", ipAddress));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (os != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("os", os));
        }

        if (osVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("os_version", osVersion));
        }

        if (userAgent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_agent", userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2FeedsAccessLogsListValidateBeforeCall(String browser, String browserVersion, String channel, String city, Integer country, String deviceBrand, String deviceModel, String ipAddress, Integer limit, Integer offset, String os, String osVersion, String userAgent, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2FeedsAccessLogsListCall(browser, browserVersion, channel, city, country, deviceBrand, deviceModel, ipAddress, limit, offset, os, osVersion, userAgent, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the latest access to the client&#39;s account
     * @param browser  (optional)
     * @param browserVersion  (optional)
     * @param channel  (optional)
     * @param city  (optional)
     * @param country  (optional)
     * @param deviceBrand  (optional)
     * @param deviceModel  (optional)
     * @param ipAddress  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param os  (optional)
     * @param osVersion  (optional)
     * @param userAgent  (optional)
     * @return PaginatedAccessLogList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAccessLogList apiV2FeedsAccessLogsList(String browser, String browserVersion, String channel, String city, Integer country, String deviceBrand, String deviceModel, String ipAddress, Integer limit, Integer offset, String os, String osVersion, String userAgent) throws ApiException {
        ApiResponse<PaginatedAccessLogList> localVarResp = apiV2FeedsAccessLogsListWithHttpInfo(browser, browserVersion, channel, city, country, deviceBrand, deviceModel, ipAddress, limit, offset, os, osVersion, userAgent);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the latest access to the client&#39;s account
     * @param browser  (optional)
     * @param browserVersion  (optional)
     * @param channel  (optional)
     * @param city  (optional)
     * @param country  (optional)
     * @param deviceBrand  (optional)
     * @param deviceModel  (optional)
     * @param ipAddress  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param os  (optional)
     * @param osVersion  (optional)
     * @param userAgent  (optional)
     * @return ApiResponse&lt;PaginatedAccessLogList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAccessLogList> apiV2FeedsAccessLogsListWithHttpInfo(String browser, String browserVersion, String channel, String city, Integer country, String deviceBrand, String deviceModel, String ipAddress, Integer limit, Integer offset, String os, String osVersion, String userAgent) throws ApiException {
        okhttp3.Call localVarCall = apiV2FeedsAccessLogsListValidateBeforeCall(browser, browserVersion, channel, city, country, deviceBrand, deviceModel, ipAddress, limit, offset, os, osVersion, userAgent, null);
        Type localVarReturnType = new TypeToken<PaginatedAccessLogList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the latest access to the client&#39;s account
     * @param browser  (optional)
     * @param browserVersion  (optional)
     * @param channel  (optional)
     * @param city  (optional)
     * @param country  (optional)
     * @param deviceBrand  (optional)
     * @param deviceModel  (optional)
     * @param ipAddress  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param os  (optional)
     * @param osVersion  (optional)
     * @param userAgent  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2FeedsAccessLogsListAsync(String browser, String browserVersion, String channel, String city, Integer country, String deviceBrand, String deviceModel, String ipAddress, Integer limit, Integer offset, String os, String osVersion, String userAgent, final ApiCallback<PaginatedAccessLogList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2FeedsAccessLogsListValidateBeforeCall(browser, browserVersion, channel, city, country, deviceBrand, deviceModel, ipAddress, limit, offset, os, osVersion, userAgent, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAccessLogList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2FeedsActivitiesList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param target  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2FeedsActivitiesListCall(Integer limit, Integer offset, List<String> target, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/feeds/activities/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (target != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "target", target));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2FeedsActivitiesListValidateBeforeCall(Integer limit, Integer offset, List<String> target, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2FeedsActivitiesListCall(limit, offset, target, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param target  (optional)
     * @return PaginatedFeedActivityListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedFeedActivityListList apiV2FeedsActivitiesList(Integer limit, Integer offset, List<String> target) throws ApiException {
        ApiResponse<PaginatedFeedActivityListList> localVarResp = apiV2FeedsActivitiesListWithHttpInfo(limit, offset, target);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param target  (optional)
     * @return ApiResponse&lt;PaginatedFeedActivityListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedFeedActivityListList> apiV2FeedsActivitiesListWithHttpInfo(Integer limit, Integer offset, List<String> target) throws ApiException {
        okhttp3.Call localVarCall = apiV2FeedsActivitiesListValidateBeforeCall(limit, offset, target, null);
        Type localVarReturnType = new TypeToken<PaginatedFeedActivityListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param target  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2FeedsActivitiesListAsync(Integer limit, Integer offset, List<String> target, final ApiCallback<PaginatedFeedActivityListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2FeedsActivitiesListValidateBeforeCall(limit, offset, target, _callback);
        Type localVarReturnType = new TypeToken<PaginatedFeedActivityListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2GoalsCreate
     * @param goalUuid  (required)
     * @param goal  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsCreateCall(UUID goalUuid, Goal goal, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = goal;

        // create path and map variables
        String localVarPath = "/api/v2/goals/"
            .replaceAll("\\{" + "goal_uuid" + "\\}", localVarApiClient.escapeString(goalUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2GoalsCreateValidateBeforeCall(UUID goalUuid, Goal goal, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'goalUuid' is set
        if (goalUuid == null) {
            throw new ApiException("Missing the required parameter 'goalUuid' when calling apiV2GoalsCreate(Async)");
        }
        
        // verify the required parameter 'goal' is set
        if (goal == null) {
            throw new ApiException("Missing the required parameter 'goal' when calling apiV2GoalsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2GoalsCreateCall(goalUuid, goal, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param goal  (required)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Goal apiV2GoalsCreate(UUID goalUuid, Goal goal) throws ApiException {
        ApiResponse<Goal> localVarResp = apiV2GoalsCreateWithHttpInfo(goalUuid, goal);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param goal  (required)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Goal> apiV2GoalsCreateWithHttpInfo(UUID goalUuid, Goal goal) throws ApiException {
        okhttp3.Call localVarCall = apiV2GoalsCreateValidateBeforeCall(goalUuid, goal, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param goalUuid  (required)
     * @param goal  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsCreateAsync(UUID goalUuid, Goal goal, final ApiCallback<Goal> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2GoalsCreateValidateBeforeCall(goalUuid, goal, _callback);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2GoalsDecumulationCreate
     * @param forecastDecumulationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsDecumulationCreateCall(ForecastDecumulationRequest forecastDecumulationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = forecastDecumulationRequest;

        // create path and map variables
        String localVarPath = "/api/v2/goals/decumulation/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2GoalsDecumulationCreateValidateBeforeCall(ForecastDecumulationRequest forecastDecumulationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'forecastDecumulationRequest' is set
        if (forecastDecumulationRequest == null) {
            throw new ApiException("Missing the required parameter 'forecastDecumulationRequest' when calling apiV2GoalsDecumulationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2GoalsDecumulationCreateCall(forecastDecumulationRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return a Goal Forecast Decumulation
     * @param forecastDecumulationRequest  (required)
     * @return ForecastDecumulationRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ForecastDecumulationRequest apiV2GoalsDecumulationCreate(ForecastDecumulationRequest forecastDecumulationRequest) throws ApiException {
        ApiResponse<ForecastDecumulationRequest> localVarResp = apiV2GoalsDecumulationCreateWithHttpInfo(forecastDecumulationRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a Goal Forecast Decumulation
     * @param forecastDecumulationRequest  (required)
     * @return ApiResponse&lt;ForecastDecumulationRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForecastDecumulationRequest> apiV2GoalsDecumulationCreateWithHttpInfo(ForecastDecumulationRequest forecastDecumulationRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV2GoalsDecumulationCreateValidateBeforeCall(forecastDecumulationRequest, null);
        Type localVarReturnType = new TypeToken<ForecastDecumulationRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a Goal Forecast Decumulation
     * @param forecastDecumulationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsDecumulationCreateAsync(ForecastDecumulationRequest forecastDecumulationRequest, final ApiCallback<ForecastDecumulationRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2GoalsDecumulationCreateValidateBeforeCall(forecastDecumulationRequest, _callback);
        Type localVarReturnType = new TypeToken<ForecastDecumulationRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2GoalsDestroy
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsDestroyCall(UUID goalUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/goals/{uuid}/"
            .replaceAll("\\{" + "goal_uuid" + "\\}", localVarApiClient.escapeString(goalUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2GoalsDestroyValidateBeforeCall(UUID goalUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'goalUuid' is set
        if (goalUuid == null) {
            throw new ApiException("Missing the required parameter 'goalUuid' when calling apiV2GoalsDestroy(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2GoalsDestroy(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2GoalsDestroyCall(goalUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2GoalsDestroy(UUID goalUuid, UUID uuid) throws ApiException {
        apiV2GoalsDestroyWithHttpInfo(goalUuid, uuid);
    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2GoalsDestroyWithHttpInfo(UUID goalUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2GoalsDestroyValidateBeforeCall(goalUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsDestroyAsync(UUID goalUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2GoalsDestroyValidateBeforeCall(goalUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2GoalsForecastCreate
     * @param forecastRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsForecastCreateCall(ForecastRequest forecastRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = forecastRequest;

        // create path and map variables
        String localVarPath = "/api/v2/goals/forecast/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2GoalsForecastCreateValidateBeforeCall(ForecastRequest forecastRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'forecastRequest' is set
        if (forecastRequest == null) {
            throw new ApiException("Missing the required parameter 'forecastRequest' when calling apiV2GoalsForecastCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2GoalsForecastCreateCall(forecastRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return a Goal Forecast
     * @param forecastRequest  (required)
     * @return ForecastRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ForecastRequest apiV2GoalsForecastCreate(ForecastRequest forecastRequest) throws ApiException {
        ApiResponse<ForecastRequest> localVarResp = apiV2GoalsForecastCreateWithHttpInfo(forecastRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a Goal Forecast
     * @param forecastRequest  (required)
     * @return ApiResponse&lt;ForecastRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForecastRequest> apiV2GoalsForecastCreateWithHttpInfo(ForecastRequest forecastRequest) throws ApiException {
        okhttp3.Call localVarCall = apiV2GoalsForecastCreateValidateBeforeCall(forecastRequest, null);
        Type localVarReturnType = new TypeToken<ForecastRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a Goal Forecast
     * @param forecastRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsForecastCreateAsync(ForecastRequest forecastRequest, final ApiCallback<ForecastRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2GoalsForecastCreateValidateBeforeCall(forecastRequest, _callback);
        Type localVarReturnType = new TypeToken<ForecastRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2GoalsList
     * @param goalUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsListCall(UUID goalUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/goals/"
            .replaceAll("\\{" + "goal_uuid" + "\\}", localVarApiClient.escapeString(goalUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2GoalsListValidateBeforeCall(UUID goalUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'goalUuid' is set
        if (goalUuid == null) {
            throw new ApiException("Missing the required parameter 'goalUuid' when calling apiV2GoalsList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2GoalsListCall(goalUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedGoalList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedGoalList apiV2GoalsList(UUID goalUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedGoalList> localVarResp = apiV2GoalsListWithHttpInfo(goalUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedGoalList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedGoalList> apiV2GoalsListWithHttpInfo(UUID goalUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2GoalsListValidateBeforeCall(goalUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedGoalList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param goalUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsListAsync(UUID goalUuid, Integer limit, Integer offset, final ApiCallback<PaginatedGoalList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2GoalsListValidateBeforeCall(goalUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedGoalList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2GoalsPartialUpdate
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @param patchedGoal  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsPartialUpdateCall(UUID goalUuid, UUID uuid, PatchedGoal patchedGoal, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedGoal;

        // create path and map variables
        String localVarPath = "/api/v2/goals/{uuid}/"
            .replaceAll("\\{" + "goal_uuid" + "\\}", localVarApiClient.escapeString(goalUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2GoalsPartialUpdateValidateBeforeCall(UUID goalUuid, UUID uuid, PatchedGoal patchedGoal, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'goalUuid' is set
        if (goalUuid == null) {
            throw new ApiException("Missing the required parameter 'goalUuid' when calling apiV2GoalsPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2GoalsPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2GoalsPartialUpdateCall(goalUuid, uuid, patchedGoal, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @param patchedGoal  (optional)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Goal apiV2GoalsPartialUpdate(UUID goalUuid, UUID uuid, PatchedGoal patchedGoal) throws ApiException {
        ApiResponse<Goal> localVarResp = apiV2GoalsPartialUpdateWithHttpInfo(goalUuid, uuid, patchedGoal);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @param patchedGoal  (optional)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Goal> apiV2GoalsPartialUpdateWithHttpInfo(UUID goalUuid, UUID uuid, PatchedGoal patchedGoal) throws ApiException {
        okhttp3.Call localVarCall = apiV2GoalsPartialUpdateValidateBeforeCall(goalUuid, uuid, patchedGoal, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @param patchedGoal  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsPartialUpdateAsync(UUID goalUuid, UUID uuid, PatchedGoal patchedGoal, final ApiCallback<Goal> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2GoalsPartialUpdateValidateBeforeCall(goalUuid, uuid, patchedGoal, _callback);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2GoalsRetrieve
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsRetrieveCall(UUID goalUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/goals/{uuid}/"
            .replaceAll("\\{" + "goal_uuid" + "\\}", localVarApiClient.escapeString(goalUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2GoalsRetrieveValidateBeforeCall(UUID goalUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'goalUuid' is set
        if (goalUuid == null) {
            throw new ApiException("Missing the required parameter 'goalUuid' when calling apiV2GoalsRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2GoalsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2GoalsRetrieveCall(goalUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @return Goal
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Goal apiV2GoalsRetrieve(UUID goalUuid, UUID uuid) throws ApiException {
        ApiResponse<Goal> localVarResp = apiV2GoalsRetrieveWithHttpInfo(goalUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Goal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Goal> apiV2GoalsRetrieveWithHttpInfo(UUID goalUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2GoalsRetrieveValidateBeforeCall(goalUuid, uuid, null);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param goalUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2GoalsRetrieveAsync(UUID goalUuid, UUID uuid, final ApiCallback<Goal> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2GoalsRetrieveValidateBeforeCall(goalUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<Goal>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InboxConversationDetailMessagesList
     * @param conversation  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationDetailMessagesListCall(UUID conversation, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/inbox/conversations/{conversation}/"
            .replaceAll("\\{" + "conversation" + "\\}", localVarApiClient.escapeString(conversation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InboxConversationDetailMessagesListValidateBeforeCall(UUID conversation, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'conversation' is set
        if (conversation == null) {
            throw new ApiException("Missing the required parameter 'conversation' when calling apiV2InboxConversationDetailMessagesList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2InboxConversationDetailMessagesListCall(conversation, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List all messages from a conversation uuid
     * @param conversation  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedMessageList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedMessageList apiV2InboxConversationDetailMessagesList(UUID conversation, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedMessageList> localVarResp = apiV2InboxConversationDetailMessagesListWithHttpInfo(conversation, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List all messages from a conversation uuid
     * @param conversation  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedMessageList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedMessageList> apiV2InboxConversationDetailMessagesListWithHttpInfo(UUID conversation, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2InboxConversationDetailMessagesListValidateBeforeCall(conversation, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedMessageList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all messages from a conversation uuid
     * @param conversation  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationDetailMessagesListAsync(UUID conversation, Integer limit, Integer offset, final ApiCallback<PaginatedMessageList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InboxConversationDetailMessagesListValidateBeforeCall(conversation, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedMessageList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InboxConversationsCreate
     * @param uuid  (required)
     * @param portal  (required)
     * @param created  (required)
     * @param subject  (required)
     * @param messages  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationsCreateCall(UUID uuid, Integer portal, OffsetDateTime created, String subject, Message messages, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/inbox/conversations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarFormParams.put("uuid", uuid);
        }

        if (portal != null) {
            localVarFormParams.put("portal", portal);
        }

        if (created != null) {
            localVarFormParams.put("created", created);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        if (messages != null) {
            localVarFormParams.put("messages", messages);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InboxConversationsCreateValidateBeforeCall(UUID uuid, Integer portal, OffsetDateTime created, String subject, Message messages, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2InboxConversationsCreate(Async)");
        }
        
        // verify the required parameter 'portal' is set
        if (portal == null) {
            throw new ApiException("Missing the required parameter 'portal' when calling apiV2InboxConversationsCreate(Async)");
        }
        
        // verify the required parameter 'created' is set
        if (created == null) {
            throw new ApiException("Missing the required parameter 'created' when calling apiV2InboxConversationsCreate(Async)");
        }
        
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling apiV2InboxConversationsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2InboxConversationsCreateCall(uuid, portal, created, subject, messages, _callback);
        return localVarCall;

    }

    /**
     * 
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     * @param uuid  (required)
     * @param portal  (required)
     * @param created  (required)
     * @param subject  (required)
     * @param messages  (optional)
     * @return ConversationCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConversationCreate apiV2InboxConversationsCreate(UUID uuid, Integer portal, OffsetDateTime created, String subject, Message messages) throws ApiException {
        ApiResponse<ConversationCreate> localVarResp = apiV2InboxConversationsCreateWithHttpInfo(uuid, portal, created, subject, messages);
        return localVarResp.getData();
    }

    /**
     * 
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     * @param uuid  (required)
     * @param portal  (required)
     * @param created  (required)
     * @param subject  (required)
     * @param messages  (optional)
     * @return ApiResponse&lt;ConversationCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationCreate> apiV2InboxConversationsCreateWithHttpInfo(UUID uuid, Integer portal, OffsetDateTime created, String subject, Message messages) throws ApiException {
        okhttp3.Call localVarCall = apiV2InboxConversationsCreateValidateBeforeCall(uuid, portal, created, subject, messages, null);
        Type localVarReturnType = new TypeToken<ConversationCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     * @param uuid  (required)
     * @param portal  (required)
     * @param created  (required)
     * @param subject  (required)
     * @param messages  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationsCreateAsync(UUID uuid, Integer portal, OffsetDateTime created, String subject, Message messages, final ApiCallback<ConversationCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InboxConversationsCreateValidateBeforeCall(uuid, portal, created, subject, messages, _callback);
        Type localVarReturnType = new TypeToken<ConversationCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InboxConversationsList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationsListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/inbox/conversations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InboxConversationsListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2InboxConversationsListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedConversationListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedConversationListList apiV2InboxConversationsList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedConversationListList> localVarResp = apiV2InboxConversationsListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedConversationListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedConversationListList> apiV2InboxConversationsListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2InboxConversationsListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedConversationListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationsListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedConversationListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InboxConversationsListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedConversationListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InboxConversationsMessagesAttachmentsRetrieve
     * @param conversation  (required)
     * @param message  (required)
     * @param uuid  (required)
     * @param format  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationsMessagesAttachmentsRetrieveCall(UUID conversation, UUID message, UUID uuid, String format, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/inbox/conversations/{conversation}/messages/{message}/attachments/{uuid}/"
            .replaceAll("\\{" + "conversation" + "\\}", localVarApiClient.escapeString(conversation.toString()))
            .replaceAll("\\{" + "message" + "\\}", localVarApiClient.escapeString(message.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json", "application/pdf", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InboxConversationsMessagesAttachmentsRetrieveValidateBeforeCall(UUID conversation, UUID message, UUID uuid, String format, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'conversation' is set
        if (conversation == null) {
            throw new ApiException("Missing the required parameter 'conversation' when calling apiV2InboxConversationsMessagesAttachmentsRetrieve(Async)");
        }
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling apiV2InboxConversationsMessagesAttachmentsRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2InboxConversationsMessagesAttachmentsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2InboxConversationsMessagesAttachmentsRetrieveCall(conversation, message, uuid, format, _callback);
        return localVarCall;

    }

    /**
     * 
     * View to access to an attachment
     * @param conversation  (required)
     * @param message  (required)
     * @param uuid  (required)
     * @param format  (optional)
     * @return Attachment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Attachment apiV2InboxConversationsMessagesAttachmentsRetrieve(UUID conversation, UUID message, UUID uuid, String format) throws ApiException {
        ApiResponse<Attachment> localVarResp = apiV2InboxConversationsMessagesAttachmentsRetrieveWithHttpInfo(conversation, message, uuid, format);
        return localVarResp.getData();
    }

    /**
     * 
     * View to access to an attachment
     * @param conversation  (required)
     * @param message  (required)
     * @param uuid  (required)
     * @param format  (optional)
     * @return ApiResponse&lt;Attachment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Attachment> apiV2InboxConversationsMessagesAttachmentsRetrieveWithHttpInfo(UUID conversation, UUID message, UUID uuid, String format) throws ApiException {
        okhttp3.Call localVarCall = apiV2InboxConversationsMessagesAttachmentsRetrieveValidateBeforeCall(conversation, message, uuid, format, null);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View to access to an attachment
     * @param conversation  (required)
     * @param message  (required)
     * @param uuid  (required)
     * @param format  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationsMessagesAttachmentsRetrieveAsync(UUID conversation, UUID message, UUID uuid, String format, final ApiCallback<Attachment> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InboxConversationsMessagesAttachmentsRetrieveValidateBeforeCall(conversation, message, uuid, format, _callback);
        Type localVarReturnType = new TypeToken<Attachment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2InboxConversationsMessagesCreate
     * @param conversation  (required)
     * @param user  (required)
     * @param readDate  (required)
     * @param created  (required)
     * @param attachments  (required)
     * @param uuid  (required)
     * @param content  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationsMessagesCreateCall(UUID conversation, String user, OffsetDateTime readDate, OffsetDateTime created, List<Attachment> attachments, UUID uuid, String content, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/inbox/conversations/{conversation}/messages/"
            .replaceAll("\\{" + "conversation" + "\\}", localVarApiClient.escapeString(conversation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarFormParams.put("user", user);
        }

        if (readDate != null) {
            localVarFormParams.put("read_date", readDate);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (created != null) {
            localVarFormParams.put("created", created);
        }

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (uuid != null) {
            localVarFormParams.put("uuid", uuid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2InboxConversationsMessagesCreateValidateBeforeCall(UUID conversation, String user, OffsetDateTime readDate, OffsetDateTime created, List<Attachment> attachments, UUID uuid, String content, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'conversation' is set
        if (conversation == null) {
            throw new ApiException("Missing the required parameter 'conversation' when calling apiV2InboxConversationsMessagesCreate(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling apiV2InboxConversationsMessagesCreate(Async)");
        }
        
        // verify the required parameter 'readDate' is set
        if (readDate == null) {
            throw new ApiException("Missing the required parameter 'readDate' when calling apiV2InboxConversationsMessagesCreate(Async)");
        }
        
        // verify the required parameter 'created' is set
        if (created == null) {
            throw new ApiException("Missing the required parameter 'created' when calling apiV2InboxConversationsMessagesCreate(Async)");
        }
        
        // verify the required parameter 'attachments' is set
        if (attachments == null) {
            throw new ApiException("Missing the required parameter 'attachments' when calling apiV2InboxConversationsMessagesCreate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2InboxConversationsMessagesCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2InboxConversationsMessagesCreateCall(conversation, user, readDate, created, attachments, uuid, content, _callback);
        return localVarCall;

    }

    /**
     * 
     * View for creating message on a specific conversation
     * @param conversation  (required)
     * @param user  (required)
     * @param readDate  (required)
     * @param created  (required)
     * @param attachments  (required)
     * @param uuid  (required)
     * @param content  (optional)
     * @return Message
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Message apiV2InboxConversationsMessagesCreate(UUID conversation, String user, OffsetDateTime readDate, OffsetDateTime created, List<Attachment> attachments, UUID uuid, String content) throws ApiException {
        ApiResponse<Message> localVarResp = apiV2InboxConversationsMessagesCreateWithHttpInfo(conversation, user, readDate, created, attachments, uuid, content);
        return localVarResp.getData();
    }

    /**
     * 
     * View for creating message on a specific conversation
     * @param conversation  (required)
     * @param user  (required)
     * @param readDate  (required)
     * @param created  (required)
     * @param attachments  (required)
     * @param uuid  (required)
     * @param content  (optional)
     * @return ApiResponse&lt;Message&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Message> apiV2InboxConversationsMessagesCreateWithHttpInfo(UUID conversation, String user, OffsetDateTime readDate, OffsetDateTime created, List<Attachment> attachments, UUID uuid, String content) throws ApiException {
        okhttp3.Call localVarCall = apiV2InboxConversationsMessagesCreateValidateBeforeCall(conversation, user, readDate, created, attachments, uuid, content, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * View for creating message on a specific conversation
     * @param conversation  (required)
     * @param user  (required)
     * @param readDate  (required)
     * @param created  (required)
     * @param attachments  (required)
     * @param uuid  (required)
     * @param content  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2InboxConversationsMessagesCreateAsync(UUID conversation, String user, OffsetDateTime readDate, OffsetDateTime created, List<Attachment> attachments, UUID uuid, String content, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2InboxConversationsMessagesCreateValidateBeforeCall(conversation, user, readDate, created, attachments, uuid, content, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2MobileVersionRetrieve
     * @param platform  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2MobileVersionRetrieveCall(String platform, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/mobile/{platform}/version/"
            .replaceAll("\\{" + "platform" + "\\}", localVarApiClient.escapeString(platform.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2MobileVersionRetrieveValidateBeforeCall(String platform, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'platform' is set
        if (platform == null) {
            throw new ApiException("Missing the required parameter 'platform' when calling apiV2MobileVersionRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2MobileVersionRetrieveCall(platform, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the number of the last required APP Version for a platform.
     * @param platform  (required)
     * @return MinimumAppVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public MinimumAppVersion apiV2MobileVersionRetrieve(String platform) throws ApiException {
        ApiResponse<MinimumAppVersion> localVarResp = apiV2MobileVersionRetrieveWithHttpInfo(platform);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the number of the last required APP Version for a platform.
     * @param platform  (required)
     * @return ApiResponse&lt;MinimumAppVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MinimumAppVersion> apiV2MobileVersionRetrieveWithHttpInfo(String platform) throws ApiException {
        okhttp3.Call localVarCall = apiV2MobileVersionRetrieveValidateBeforeCall(platform, null);
        Type localVarReturnType = new TypeToken<MinimumAppVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the number of the last required APP Version for a platform.
     * @param platform  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2MobileVersionRetrieveAsync(String platform, final ApiCallback<MinimumAppVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2MobileVersionRetrieveValidateBeforeCall(platform, _callback);
        Type localVarReturnType = new TypeToken<MinimumAppVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PlatformSettingsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PlatformSettingsListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/platform/settings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PlatformSettingsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2PlatformSettingsListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return List&lt;NucoroSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<NucoroSetting> apiV2PlatformSettingsList() throws ApiException {
        ApiResponse<List<NucoroSetting>> localVarResp = apiV2PlatformSettingsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;List&lt;NucoroSetting&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<NucoroSetting>> apiV2PlatformSettingsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV2PlatformSettingsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<NucoroSetting>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PlatformSettingsListAsync(final ApiCallback<List<NucoroSetting>> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PlatformSettingsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<NucoroSetting>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortalCountriesList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalCountriesListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portal/countries/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortalCountriesListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2PortalCountriesListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the list of countries
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedCountryListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedCountryListList apiV2PortalCountriesList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedCountryListList> localVarResp = apiV2PortalCountriesListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the list of countries
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedCountryListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedCountryListList> apiV2PortalCountriesListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortalCountriesListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedCountryListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the list of countries
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalCountriesListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedCountryListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortalCountriesListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedCountryListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortalSettingsRetrieve
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalSettingsRetrieveCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portal/settings/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth", "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortalSettingsRetrieveValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2PortalSettingsRetrieveCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return PortalSettingValueList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PortalSettingValueList apiV2PortalSettingsRetrieve() throws ApiException {
        ApiResponse<PortalSettingValueList> localVarResp = apiV2PortalSettingsRetrieveWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;PortalSettingValueList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortalSettingValueList> apiV2PortalSettingsRetrieveWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV2PortalSettingsRetrieveValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PortalSettingValueList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalSettingsRetrieveAsync(final ApiCallback<PortalSettingValueList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortalSettingsRetrieveValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PortalSettingValueList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortalTosCurrentRetrieve
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalTosCurrentRetrieveCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portal/tos/current/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortalTosCurrentRetrieveValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2PortalTosCurrentRetrieveCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the current ToS for the Portal
     * @return Tos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tos apiV2PortalTosCurrentRetrieve() throws ApiException {
        ApiResponse<Tos> localVarResp = apiV2PortalTosCurrentRetrieveWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the current ToS for the Portal
     * @return ApiResponse&lt;Tos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tos> apiV2PortalTosCurrentRetrieveWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = apiV2PortalTosCurrentRetrieveValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Tos>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the current ToS for the Portal
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalTosCurrentRetrieveAsync(final ApiCallback<Tos> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortalTosCurrentRetrieveValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Tos>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortalTosList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalTosListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portal/tos/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortalTosListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2PortalTosListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List all ToS for the current Portal
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedTosList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedTosList apiV2PortalTosList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedTosList> localVarResp = apiV2PortalTosListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List all ToS for the current Portal
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedTosList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedTosList> apiV2PortalTosListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortalTosListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedTosList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all ToS for the current Portal
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalTosListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedTosList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortalTosListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedTosList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortalTosRetrieve
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalTosRetrieveCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portal/tos/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortalTosRetrieveValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortalTosRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortalTosRetrieveCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a specific ToS
     * @param uuid  (required)
     * @return Tos
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Tos apiV2PortalTosRetrieve(UUID uuid) throws ApiException {
        ApiResponse<Tos> localVarResp = apiV2PortalTosRetrieveWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a specific ToS
     * @param uuid  (required)
     * @return ApiResponse&lt;Tos&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tos> apiV2PortalTosRetrieveWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortalTosRetrieveValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<Tos>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a specific ToS
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortalTosRetrieveAsync(UUID uuid, final ApiCallback<Tos> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortalTosRetrieveValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<Tos>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosActivitiesList
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param target  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosActivitiesListCall(UUID portfolioUuid, Integer limit, Integer offset, List<String> target, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/activities/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (target != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "target", target));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosActivitiesListValidateBeforeCall(UUID portfolioUuid, Integer limit, Integer offset, List<String> target, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosActivitiesList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosActivitiesListCall(portfolioUuid, limit, offset, target, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param target  (optional)
     * @return PaginatedFeedActivityListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedFeedActivityListList apiV2PortfoliosActivitiesList(UUID portfolioUuid, Integer limit, Integer offset, List<String> target) throws ApiException {
        ApiResponse<PaginatedFeedActivityListList> localVarResp = apiV2PortfoliosActivitiesListWithHttpInfo(portfolioUuid, limit, offset, target);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param target  (optional)
     * @return ApiResponse&lt;PaginatedFeedActivityListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedFeedActivityListList> apiV2PortfoliosActivitiesListWithHttpInfo(UUID portfolioUuid, Integer limit, Integer offset, List<String> target) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosActivitiesListValidateBeforeCall(portfolioUuid, limit, offset, target, null);
        Type localVarReturnType = new TypeToken<PaginatedFeedActivityListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param target  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosActivitiesListAsync(UUID portfolioUuid, Integer limit, Integer offset, List<String> target, final ApiCallback<PaginatedFeedActivityListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosActivitiesListValidateBeforeCall(portfolioUuid, limit, offset, target, _callback);
        Type localVarReturnType = new TypeToken<PaginatedFeedActivityListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosActivitiesRetrieve
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosActivitiesRetrieveCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/activities/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosActivitiesRetrieveValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosActivitiesRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosActivitiesRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosActivitiesRetrieveCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return FeedActivityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public FeedActivityList apiV2PortfoliosActivitiesRetrieve(UUID portfolioUuid, UUID uuid) throws ApiException {
        ApiResponse<FeedActivityList> localVarResp = apiV2PortfoliosActivitiesRetrieveWithHttpInfo(portfolioUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;FeedActivityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeedActivityList> apiV2PortfoliosActivitiesRetrieveWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosActivitiesRetrieveValidateBeforeCall(portfolioUuid, uuid, null);
        Type localVarReturnType = new TypeToken<FeedActivityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosActivitiesRetrieveAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<FeedActivityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosActivitiesRetrieveValidateBeforeCall(portfolioUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<FeedActivityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosAllocationsEndDay
     * @param portfolioUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsEndDayCall(UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosAllocationsEndDayValidateBeforeCall(UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsEndDay(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayCall(portfolioUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @return AllocationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AllocationList apiV2PortfoliosAllocationsEndDay(UUID portfolioUuid) throws ApiException {
        ApiResponse<AllocationList> localVarResp = apiV2PortfoliosAllocationsEndDayWithHttpInfo(portfolioUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @return ApiResponse&lt;AllocationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllocationList> apiV2PortfoliosAllocationsEndDayWithHttpInfo(UUID portfolioUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayValidateBeforeCall(portfolioUuid, null);
        Type localVarReturnType = new TypeToken<AllocationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsEndDayAsync(UUID portfolioUuid, final ApiCallback<AllocationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayValidateBeforeCall(portfolioUuid, _callback);
        Type localVarReturnType = new TypeToken<AllocationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosAllocationsEndDayByDateRetrieve
     * @param allocationDate  (required)
     * @param portfolioUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsEndDayByDateRetrieveCall(String allocationDate, UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/{allocation_date}/"
            .replaceAll("\\{" + "allocation_date" + "\\}", localVarApiClient.escapeString(allocationDate.toString()))
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosAllocationsEndDayByDateRetrieveValidateBeforeCall(String allocationDate, UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'allocationDate' is set
        if (allocationDate == null) {
            throw new ApiException("Missing the required parameter 'allocationDate' when calling apiV2PortfoliosAllocationsEndDayByDateRetrieve(Async)");
        }
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsEndDayByDateRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayByDateRetrieveCall(allocationDate, portfolioUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param allocationDate  (required)
     * @param portfolioUuid  (required)
     * @return AllocationDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AllocationDetail apiV2PortfoliosAllocationsEndDayByDateRetrieve(String allocationDate, UUID portfolioUuid) throws ApiException {
        ApiResponse<AllocationDetail> localVarResp = apiV2PortfoliosAllocationsEndDayByDateRetrieveWithHttpInfo(allocationDate, portfolioUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param allocationDate  (required)
     * @param portfolioUuid  (required)
     * @return ApiResponse&lt;AllocationDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllocationDetail> apiV2PortfoliosAllocationsEndDayByDateRetrieveWithHttpInfo(String allocationDate, UUID portfolioUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayByDateRetrieveValidateBeforeCall(allocationDate, portfolioUuid, null);
        Type localVarReturnType = new TypeToken<AllocationDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param allocationDate  (required)
     * @param portfolioUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsEndDayByDateRetrieveAsync(String allocationDate, UUID portfolioUuid, final ApiCallback<AllocationDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayByDateRetrieveValidateBeforeCall(allocationDate, portfolioUuid, _callback);
        Type localVarReturnType = new TypeToken<AllocationDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosAllocationsEndDayLatestRetrieve
     * @param portfolioUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsEndDayLatestRetrieveCall(UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/latest/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosAllocationsEndDayLatestRetrieveValidateBeforeCall(UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsEndDayLatestRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayLatestRetrieveCall(portfolioUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @return AllocationDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AllocationDetail apiV2PortfoliosAllocationsEndDayLatestRetrieve(UUID portfolioUuid) throws ApiException {
        ApiResponse<AllocationDetail> localVarResp = apiV2PortfoliosAllocationsEndDayLatestRetrieveWithHttpInfo(portfolioUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @return ApiResponse&lt;AllocationDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllocationDetail> apiV2PortfoliosAllocationsEndDayLatestRetrieveWithHttpInfo(UUID portfolioUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayLatestRetrieveValidateBeforeCall(portfolioUuid, null);
        Type localVarReturnType = new TypeToken<AllocationDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsEndDayLatestRetrieveAsync(UUID portfolioUuid, final ApiCallback<AllocationDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsEndDayLatestRetrieveValidateBeforeCall(portfolioUuid, _callback);
        Type localVarReturnType = new TypeToken<AllocationDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosAllocationsHistoryRetrieve
     * @param portfolio  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsHistoryRetrieveCall(UUID portfolio, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio}/allocations/history/"
            .replaceAll("\\{" + "portfolio" + "\\}", localVarApiClient.escapeString(portfolio.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosAllocationsHistoryRetrieveValidateBeforeCall(UUID portfolio, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolio' is set
        if (portfolio == null) {
            throw new ApiException("Missing the required parameter 'portfolio' when calling apiV2PortfoliosAllocationsHistoryRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsHistoryRetrieveCall(portfolio, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allocations History for a given portfolio  It accepts two optional parameters, &#x60;date_to&#x60; and &#x60;date_from&#x60; to limit the daily allocations to a certain data range. If they are not given, all the allocations are returned.  ---  ## Parameters:   * **name**: &#x60;date_from&#x60;  * **description**: The initial date.  * **parameter type**: query param   * **name**: &#x60;date_from&#x60;  * **description**: The final date.  * **parameter type**: query param
     * @param portfolio  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2PortfoliosAllocationsHistoryRetrieve(UUID portfolio) throws ApiException {
        apiV2PortfoliosAllocationsHistoryRetrieveWithHttpInfo(portfolio);
    }

    /**
     * 
     * Allocations History for a given portfolio  It accepts two optional parameters, &#x60;date_to&#x60; and &#x60;date_from&#x60; to limit the daily allocations to a certain data range. If they are not given, all the allocations are returned.  ---  ## Parameters:   * **name**: &#x60;date_from&#x60;  * **description**: The initial date.  * **parameter type**: query param   * **name**: &#x60;date_from&#x60;  * **description**: The final date.  * **parameter type**: query param
     * @param portfolio  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2PortfoliosAllocationsHistoryRetrieveWithHttpInfo(UUID portfolio) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsHistoryRetrieveValidateBeforeCall(portfolio, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allocations History for a given portfolio  It accepts two optional parameters, &#x60;date_to&#x60; and &#x60;date_from&#x60; to limit the daily allocations to a certain data range. If they are not given, all the allocations are returned.  ---  ## Parameters:   * **name**: &#x60;date_from&#x60;  * **description**: The initial date.  * **parameter type**: query param   * **name**: &#x60;date_from&#x60;  * **description**: The final date.  * **parameter type**: query param
     * @param portfolio  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsHistoryRetrieveAsync(UUID portfolio, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsHistoryRetrieveValidateBeforeCall(portfolio, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosAllocationsIntradayLatestRetrieve
     * @param portfolioUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsIntradayLatestRetrieveCall(UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/allocations/intraday/latest/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosAllocationsIntradayLatestRetrieveValidateBeforeCall(UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsIntradayLatestRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsIntradayLatestRetrieveCall(portfolioUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @return CurrentAllocation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CurrentAllocation apiV2PortfoliosAllocationsIntradayLatestRetrieve(UUID portfolioUuid) throws ApiException {
        ApiResponse<CurrentAllocation> localVarResp = apiV2PortfoliosAllocationsIntradayLatestRetrieveWithHttpInfo(portfolioUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @return ApiResponse&lt;CurrentAllocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CurrentAllocation> apiV2PortfoliosAllocationsIntradayLatestRetrieveWithHttpInfo(UUID portfolioUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsIntradayLatestRetrieveValidateBeforeCall(portfolioUuid, null);
        Type localVarReturnType = new TypeToken<CurrentAllocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsIntradayLatestRetrieveAsync(UUID portfolioUuid, final ApiCallback<CurrentAllocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsIntradayLatestRetrieveValidateBeforeCall(portfolioUuid, _callback);
        Type localVarReturnType = new TypeToken<CurrentAllocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosAllocationsList
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param valuationDateAfter  (optional)
     * @param valuationDateBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsListCall(UUID portfolioUuid, Integer limit, Integer offset, LocalDate valuationDateAfter, LocalDate valuationDateBefore, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/allocations/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (valuationDateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valuation_date_after", valuationDateAfter));
        }

        if (valuationDateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valuation_date_before", valuationDateBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosAllocationsListValidateBeforeCall(UUID portfolioUuid, Integer limit, Integer offset, LocalDate valuationDateAfter, LocalDate valuationDateBefore, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsListCall(portfolioUuid, limit, offset, valuationDateAfter, valuationDateBefore, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param valuationDateAfter  (optional)
     * @param valuationDateBefore  (optional)
     * @return PaginatedAllocationListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAllocationListList apiV2PortfoliosAllocationsList(UUID portfolioUuid, Integer limit, Integer offset, LocalDate valuationDateAfter, LocalDate valuationDateBefore) throws ApiException {
        ApiResponse<PaginatedAllocationListList> localVarResp = apiV2PortfoliosAllocationsListWithHttpInfo(portfolioUuid, limit, offset, valuationDateAfter, valuationDateBefore);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param valuationDateAfter  (optional)
     * @param valuationDateBefore  (optional)
     * @return ApiResponse&lt;PaginatedAllocationListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAllocationListList> apiV2PortfoliosAllocationsListWithHttpInfo(UUID portfolioUuid, Integer limit, Integer offset, LocalDate valuationDateAfter, LocalDate valuationDateBefore) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsListValidateBeforeCall(portfolioUuid, limit, offset, valuationDateAfter, valuationDateBefore, null);
        Type localVarReturnType = new TypeToken<PaginatedAllocationListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param valuationDateAfter  (optional)
     * @param valuationDateBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsListAsync(UUID portfolioUuid, Integer limit, Integer offset, LocalDate valuationDateAfter, LocalDate valuationDateBefore, final ApiCallback<PaginatedAllocationListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsListValidateBeforeCall(portfolioUuid, limit, offset, valuationDateAfter, valuationDateBefore, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAllocationListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosAllocationsRetrieve
     * @param id A unique integer value identifying this allocation. (required)
     * @param portfolioUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsRetrieveCall(Integer id, UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/allocations/{id}/"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosAllocationsRetrieveValidateBeforeCall(Integer id, UUID portfolioUuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV2PortfoliosAllocationsRetrieve(Async)");
        }
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsRetrieveCall(id, portfolioUuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this allocation. (required)
     * @param portfolioUuid  (required)
     * @return AllocationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AllocationList apiV2PortfoliosAllocationsRetrieve(Integer id, UUID portfolioUuid) throws ApiException {
        ApiResponse<AllocationList> localVarResp = apiV2PortfoliosAllocationsRetrieveWithHttpInfo(id, portfolioUuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id A unique integer value identifying this allocation. (required)
     * @param portfolioUuid  (required)
     * @return ApiResponse&lt;AllocationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllocationList> apiV2PortfoliosAllocationsRetrieveWithHttpInfo(Integer id, UUID portfolioUuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsRetrieveValidateBeforeCall(id, portfolioUuid, null);
        Type localVarReturnType = new TypeToken<AllocationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id A unique integer value identifying this allocation. (required)
     * @param portfolioUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosAllocationsRetrieveAsync(Integer id, UUID portfolioUuid, final ApiCallback<AllocationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosAllocationsRetrieveValidateBeforeCall(id, portfolioUuid, _callback);
        Type localVarReturnType = new TypeToken<AllocationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosCreate
     * @param portfolioUuid  (required)
     * @param portfolioCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosCreateCall(UUID portfolioUuid, PortfolioCreate portfolioCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = portfolioCreate;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosCreateValidateBeforeCall(UUID portfolioUuid, PortfolioCreate portfolioCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosCreate(Async)");
        }
        
        // verify the required parameter 'portfolioCreate' is set
        if (portfolioCreate == null) {
            throw new ApiException("Missing the required parameter 'portfolioCreate' when calling apiV2PortfoliosCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosCreateCall(portfolioUuid, portfolioCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param portfolioCreate  (required)
     * @return PortfolioCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioCreate apiV2PortfoliosCreate(UUID portfolioUuid, PortfolioCreate portfolioCreate) throws ApiException {
        ApiResponse<PortfolioCreate> localVarResp = apiV2PortfoliosCreateWithHttpInfo(portfolioUuid, portfolioCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param portfolioCreate  (required)
     * @return ApiResponse&lt;PortfolioCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioCreate> apiV2PortfoliosCreateWithHttpInfo(UUID portfolioUuid, PortfolioCreate portfolioCreate) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosCreateValidateBeforeCall(portfolioUuid, portfolioCreate, null);
        Type localVarReturnType = new TypeToken<PortfolioCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param portfolioCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosCreateAsync(UUID portfolioUuid, PortfolioCreate portfolioCreate, final ApiCallback<PortfolioCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosCreateValidateBeforeCall(portfolioUuid, portfolioCreate, _callback);
        Type localVarReturnType = new TypeToken<PortfolioCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosDepositsCreate
     * @param portfolioUuid  (required)
     * @param depositCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDepositsCreateCall(UUID portfolioUuid, DepositCreate depositCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = depositCreate;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/deposits/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosDepositsCreateValidateBeforeCall(UUID portfolioUuid, DepositCreate depositCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDepositsCreate(Async)");
        }
        
        // verify the required parameter 'depositCreate' is set
        if (depositCreate == null) {
            throw new ApiException("Missing the required parameter 'depositCreate' when calling apiV2PortfoliosDepositsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosDepositsCreateCall(portfolioUuid, depositCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param depositCreate  (required)
     * @return DepositCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DepositCreate apiV2PortfoliosDepositsCreate(UUID portfolioUuid, DepositCreate depositCreate) throws ApiException {
        ApiResponse<DepositCreate> localVarResp = apiV2PortfoliosDepositsCreateWithHttpInfo(portfolioUuid, depositCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param depositCreate  (required)
     * @return ApiResponse&lt;DepositCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DepositCreate> apiV2PortfoliosDepositsCreateWithHttpInfo(UUID portfolioUuid, DepositCreate depositCreate) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosDepositsCreateValidateBeforeCall(portfolioUuid, depositCreate, null);
        Type localVarReturnType = new TypeToken<DepositCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param depositCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDepositsCreateAsync(UUID portfolioUuid, DepositCreate depositCreate, final ApiCallback<DepositCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosDepositsCreateValidateBeforeCall(portfolioUuid, depositCreate, _callback);
        Type localVarReturnType = new TypeToken<DepositCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosDepositsDestroy
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDepositsDestroyCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosDepositsDestroyValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDepositsDestroy(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosDepositsDestroy(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosDepositsDestroyCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2PortfoliosDepositsDestroy(UUID portfolioUuid, UUID uuid) throws ApiException {
        apiV2PortfoliosDepositsDestroyWithHttpInfo(portfolioUuid, uuid);
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2PortfoliosDepositsDestroyWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosDepositsDestroyValidateBeforeCall(portfolioUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDepositsDestroyAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosDepositsDestroyValidateBeforeCall(portfolioUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosDepositsList
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDepositsListCall(UUID portfolioUuid, Integer limit, Integer offset, List<String> status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/deposits/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosDepositsListValidateBeforeCall(UUID portfolioUuid, Integer limit, Integer offset, List<String> status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDepositsList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosDepositsListCall(portfolioUuid, limit, offset, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @return PaginatedDepositListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedDepositListList apiV2PortfoliosDepositsList(UUID portfolioUuid, Integer limit, Integer offset, List<String> status) throws ApiException {
        ApiResponse<PaginatedDepositListList> localVarResp = apiV2PortfoliosDepositsListWithHttpInfo(portfolioUuid, limit, offset, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;PaginatedDepositListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedDepositListList> apiV2PortfoliosDepositsListWithHttpInfo(UUID portfolioUuid, Integer limit, Integer offset, List<String> status) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosDepositsListValidateBeforeCall(portfolioUuid, limit, offset, status, null);
        Type localVarReturnType = new TypeToken<PaginatedDepositListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDepositsListAsync(UUID portfolioUuid, Integer limit, Integer offset, List<String> status, final ApiCallback<PaginatedDepositListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosDepositsListValidateBeforeCall(portfolioUuid, limit, offset, status, _callback);
        Type localVarReturnType = new TypeToken<PaginatedDepositListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosDepositsRetrieve
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDepositsRetrieveCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosDepositsRetrieveValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDepositsRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosDepositsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosDepositsRetrieveCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return DepositDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DepositDetail apiV2PortfoliosDepositsRetrieve(UUID portfolioUuid, UUID uuid) throws ApiException {
        ApiResponse<DepositDetail> localVarResp = apiV2PortfoliosDepositsRetrieveWithHttpInfo(portfolioUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;DepositDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DepositDetail> apiV2PortfoliosDepositsRetrieveWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosDepositsRetrieveValidateBeforeCall(portfolioUuid, uuid, null);
        Type localVarReturnType = new TypeToken<DepositDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDepositsRetrieveAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<DepositDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosDepositsRetrieveValidateBeforeCall(portfolioUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<DepositDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosDestroy
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDestroyCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosDestroyValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDestroy(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosDestroy(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosDestroyCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2PortfoliosDestroy(UUID portfolioUuid, UUID uuid) throws ApiException {
        apiV2PortfoliosDestroyWithHttpInfo(portfolioUuid, uuid);
    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2PortfoliosDestroyWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosDestroyValidateBeforeCall(portfolioUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosDestroyAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosDestroyValidateBeforeCall(portfolioUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosList
     * @param portfolioUuid  (required)
     * @param client  (optional)
     * @param externalCustodianId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param ordering Ordering (optional)
     * @param portfolioType  (optional)
     * @param status  (optional)
     * @param valuationDateAfter  (optional)
     * @param valuationDateBefore  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosListCall(UUID portfolioUuid, UUID client, String externalCustodianId, Integer limit, String name, Integer offset, List<String> ordering, Integer portfolioType, List<String> status, LocalDate valuationDateAfter, LocalDate valuationDateBefore, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (client != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client", client));
        }

        if (externalCustodianId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_custodian_id", externalCustodianId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ordering", ordering));
        }

        if (portfolioType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolio_type", portfolioType));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (valuationDateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valuation_date_after", valuationDateAfter));
        }

        if (valuationDateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valuation_date_before", valuationDateBefore));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosListValidateBeforeCall(UUID portfolioUuid, UUID client, String externalCustodianId, Integer limit, String name, Integer offset, List<String> ordering, Integer portfolioType, List<String> status, LocalDate valuationDateAfter, LocalDate valuationDateBefore, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosListCall(portfolioUuid, client, externalCustodianId, limit, name, offset, ordering, portfolioType, status, valuationDateAfter, valuationDateBefore, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param client  (optional)
     * @param externalCustodianId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param ordering Ordering (optional)
     * @param portfolioType  (optional)
     * @param status  (optional)
     * @param valuationDateAfter  (optional)
     * @param valuationDateBefore  (optional)
     * @return PaginatedPortfolioListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPortfolioListList apiV2PortfoliosList(UUID portfolioUuid, UUID client, String externalCustodianId, Integer limit, String name, Integer offset, List<String> ordering, Integer portfolioType, List<String> status, LocalDate valuationDateAfter, LocalDate valuationDateBefore) throws ApiException {
        ApiResponse<PaginatedPortfolioListList> localVarResp = apiV2PortfoliosListWithHttpInfo(portfolioUuid, client, externalCustodianId, limit, name, offset, ordering, portfolioType, status, valuationDateAfter, valuationDateBefore);
        return localVarResp.getData();
    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param client  (optional)
     * @param externalCustodianId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param ordering Ordering (optional)
     * @param portfolioType  (optional)
     * @param status  (optional)
     * @param valuationDateAfter  (optional)
     * @param valuationDateBefore  (optional)
     * @return ApiResponse&lt;PaginatedPortfolioListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPortfolioListList> apiV2PortfoliosListWithHttpInfo(UUID portfolioUuid, UUID client, String externalCustodianId, Integer limit, String name, Integer offset, List<String> ordering, Integer portfolioType, List<String> status, LocalDate valuationDateAfter, LocalDate valuationDateBefore) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosListValidateBeforeCall(portfolioUuid, client, externalCustodianId, limit, name, offset, ordering, portfolioType, status, valuationDateAfter, valuationDateBefore, null);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param client  (optional)
     * @param externalCustodianId  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param ordering Ordering (optional)
     * @param portfolioType  (optional)
     * @param status  (optional)
     * @param valuationDateAfter  (optional)
     * @param valuationDateBefore  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosListAsync(UUID portfolioUuid, UUID client, String externalCustodianId, Integer limit, String name, Integer offset, List<String> ordering, Integer portfolioType, List<String> status, LocalDate valuationDateAfter, LocalDate valuationDateBefore, final ApiCallback<PaginatedPortfolioListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosListValidateBeforeCall(portfolioUuid, client, externalCustodianId, limit, name, offset, ordering, portfolioType, status, valuationDateAfter, valuationDateBefore, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosOrdersCreate
     * @param portfolioUuid  (required)
     * @param createOrder  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosOrdersCreateCall(UUID portfolioUuid, CreateOrder createOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createOrder;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/orders/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosOrdersCreateValidateBeforeCall(UUID portfolioUuid, CreateOrder createOrder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosOrdersCreate(Async)");
        }
        
        // verify the required parameter 'createOrder' is set
        if (createOrder == null) {
            throw new ApiException("Missing the required parameter 'createOrder' when calling apiV2PortfoliosOrdersCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosOrdersCreateCall(portfolioUuid, createOrder, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param createOrder  (required)
     * @return CreateOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrder apiV2PortfoliosOrdersCreate(UUID portfolioUuid, CreateOrder createOrder) throws ApiException {
        ApiResponse<CreateOrder> localVarResp = apiV2PortfoliosOrdersCreateWithHttpInfo(portfolioUuid, createOrder);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param createOrder  (required)
     * @return ApiResponse&lt;CreateOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateOrder> apiV2PortfoliosOrdersCreateWithHttpInfo(UUID portfolioUuid, CreateOrder createOrder) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosOrdersCreateValidateBeforeCall(portfolioUuid, createOrder, null);
        Type localVarReturnType = new TypeToken<CreateOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param createOrder  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosOrdersCreateAsync(UUID portfolioUuid, CreateOrder createOrder, final ApiCallback<CreateOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosOrdersCreateValidateBeforeCall(portfolioUuid, createOrder, _callback);
        Type localVarReturnType = new TypeToken<CreateOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosOrdersDestroy
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosOrdersDestroyCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosOrdersDestroyValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosOrdersDestroy(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosOrdersDestroy(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosOrdersDestroyCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Cancel or request cancellation to the broker
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2PortfoliosOrdersDestroy(UUID portfolioUuid, UUID uuid) throws ApiException {
        apiV2PortfoliosOrdersDestroyWithHttpInfo(portfolioUuid, uuid);
    }

    /**
     * 
     * Cancel or request cancellation to the broker
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2PortfoliosOrdersDestroyWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosOrdersDestroyValidateBeforeCall(portfolioUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancel or request cancellation to the broker
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosOrdersDestroyAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosOrdersDestroyValidateBeforeCall(portfolioUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosOrdersList
     * @param portfolioUuid  (required)
     * @param adviceExternalId  (optional)
     * @param asset  (optional)
     * @param completedAfter  (optional)
     * @param completedBefore  (optional)
     * @param extraData Additional order attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param portfolio  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosOrdersListCall(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/orders/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (adviceExternalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advice_external_id", adviceExternalId));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (completedAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_after", completedAfter));
        }

        if (completedBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completed_before", completedBefore));
        }

        if (extraData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra_data", extraData));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (portfolio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portfolio", portfolio));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosOrdersListValidateBeforeCall(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosOrdersList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosOrdersListCall(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param adviceExternalId  (optional)
     * @param asset  (optional)
     * @param completedAfter  (optional)
     * @param completedBefore  (optional)
     * @param extraData Additional order attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param portfolio  (optional)
     * @param status  (optional)
     * @return PaginatedOrderListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedOrderListList apiV2PortfoliosOrdersList(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status) throws ApiException {
        ApiResponse<PaginatedOrderListList> localVarResp = apiV2PortfoliosOrdersListWithHttpInfo(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param adviceExternalId  (optional)
     * @param asset  (optional)
     * @param completedAfter  (optional)
     * @param completedBefore  (optional)
     * @param extraData Additional order attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param portfolio  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;PaginatedOrderListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedOrderListList> apiV2PortfoliosOrdersListWithHttpInfo(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosOrdersListValidateBeforeCall(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status, null);
        Type localVarReturnType = new TypeToken<PaginatedOrderListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param adviceExternalId  (optional)
     * @param asset  (optional)
     * @param completedAfter  (optional)
     * @param completedBefore  (optional)
     * @param extraData Additional order attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param portfolio  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosOrdersListAsync(UUID portfolioUuid, String adviceExternalId, String asset, LocalDate completedAfter, LocalDate completedBefore, Map<String, Object> extraData, Integer limit, Integer offset, String portfolio, String status, final ApiCallback<PaginatedOrderListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosOrdersListValidateBeforeCall(portfolioUuid, adviceExternalId, asset, completedAfter, completedBefore, extraData, limit, offset, portfolio, status, _callback);
        Type localVarReturnType = new TypeToken<PaginatedOrderListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosOrdersRetrieve
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosOrdersRetrieveCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosOrdersRetrieveValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosOrdersRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosOrdersRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosOrdersRetrieveCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return OrderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OrderList apiV2PortfoliosOrdersRetrieve(UUID portfolioUuid, UUID uuid) throws ApiException {
        ApiResponse<OrderList> localVarResp = apiV2PortfoliosOrdersRetrieveWithHttpInfo(portfolioUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;OrderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderList> apiV2PortfoliosOrdersRetrieveWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosOrdersRetrieveValidateBeforeCall(portfolioUuid, uuid, null);
        Type localVarReturnType = new TypeToken<OrderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosOrdersRetrieveAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<OrderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosOrdersRetrieveValidateBeforeCall(portfolioUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<OrderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosPartialUpdate
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param patchedPortfolioUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPartialUpdateCall(UUID portfolioUuid, UUID uuid, PatchedPortfolioUpdate patchedPortfolioUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedPortfolioUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosPartialUpdateValidateBeforeCall(UUID portfolioUuid, UUID uuid, PatchedPortfolioUpdate patchedPortfolioUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosPartialUpdateCall(portfolioUuid, uuid, patchedPortfolioUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param patchedPortfolioUpdate  (optional)
     * @return PortfolioUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioUpdate apiV2PortfoliosPartialUpdate(UUID portfolioUuid, UUID uuid, PatchedPortfolioUpdate patchedPortfolioUpdate) throws ApiException {
        ApiResponse<PortfolioUpdate> localVarResp = apiV2PortfoliosPartialUpdateWithHttpInfo(portfolioUuid, uuid, patchedPortfolioUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param patchedPortfolioUpdate  (optional)
     * @return ApiResponse&lt;PortfolioUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioUpdate> apiV2PortfoliosPartialUpdateWithHttpInfo(UUID portfolioUuid, UUID uuid, PatchedPortfolioUpdate patchedPortfolioUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosPartialUpdateValidateBeforeCall(portfolioUuid, uuid, patchedPortfolioUpdate, null);
        Type localVarReturnType = new TypeToken<PortfolioUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param patchedPortfolioUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPartialUpdateAsync(UUID portfolioUuid, UUID uuid, PatchedPortfolioUpdate patchedPortfolioUpdate, final ApiCallback<PortfolioUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosPartialUpdateValidateBeforeCall(portfolioUuid, uuid, patchedPortfolioUpdate, _callback);
        Type localVarReturnType = new TypeToken<PortfolioUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosPerformanceMwrrList
     * @param portfolioUuid  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPerformanceMwrrListCall(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/performance/mwrr/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_after", dateAfter));
        }

        if (dateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_before", dateBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosPerformanceMwrrListValidateBeforeCall(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosPerformanceMwrrList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosPerformanceMwrrListCall(portfolioUuid, dateAfter, dateBefore, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedPortfolioPerformanceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPortfolioPerformanceList apiV2PortfoliosPerformanceMwrrList(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedPortfolioPerformanceList> localVarResp = apiV2PortfoliosPerformanceMwrrListWithHttpInfo(portfolioUuid, dateAfter, dateBefore, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedPortfolioPerformanceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPortfolioPerformanceList> apiV2PortfoliosPerformanceMwrrListWithHttpInfo(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosPerformanceMwrrListValidateBeforeCall(portfolioUuid, dateAfter, dateBefore, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioPerformanceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPerformanceMwrrListAsync(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset, final ApiCallback<PaginatedPortfolioPerformanceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosPerformanceMwrrListValidateBeforeCall(portfolioUuid, dateAfter, dateBefore, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioPerformanceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosPerformancePositionsList
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPerformancePositionsListCall(UUID portfolioUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/performance/positions/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosPerformancePositionsListValidateBeforeCall(UUID portfolioUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosPerformancePositionsList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosPerformancePositionsListCall(portfolioUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedPortfolioPerformancePositionsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPortfolioPerformancePositionsList apiV2PortfoliosPerformancePositionsList(UUID portfolioUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedPortfolioPerformancePositionsList> localVarResp = apiV2PortfoliosPerformancePositionsListWithHttpInfo(portfolioUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedPortfolioPerformancePositionsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPortfolioPerformancePositionsList> apiV2PortfoliosPerformancePositionsListWithHttpInfo(UUID portfolioUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosPerformancePositionsListValidateBeforeCall(portfolioUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioPerformancePositionsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPerformancePositionsListAsync(UUID portfolioUuid, Integer limit, Integer offset, final ApiCallback<PaginatedPortfolioPerformancePositionsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosPerformancePositionsListValidateBeforeCall(portfolioUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioPerformancePositionsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosPerformanceTwrrList
     * @param portfolioUuid  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPerformanceTwrrListCall(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/performance/twrr/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_after", dateAfter));
        }

        if (dateBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_before", dateBefore));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosPerformanceTwrrListValidateBeforeCall(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosPerformanceTwrrList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosPerformanceTwrrListCall(portfolioUuid, dateAfter, dateBefore, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedPortfolioPerformanceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPortfolioPerformanceList apiV2PortfoliosPerformanceTwrrList(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedPortfolioPerformanceList> localVarResp = apiV2PortfoliosPerformanceTwrrListWithHttpInfo(portfolioUuid, dateAfter, dateBefore, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedPortfolioPerformanceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPortfolioPerformanceList> apiV2PortfoliosPerformanceTwrrListWithHttpInfo(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosPerformanceTwrrListValidateBeforeCall(portfolioUuid, dateAfter, dateBefore, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioPerformanceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param dateAfter  (optional)
     * @param dateBefore  (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPerformanceTwrrListAsync(UUID portfolioUuid, LocalDate dateAfter, LocalDate dateBefore, Integer limit, Integer offset, final ApiCallback<PaginatedPortfolioPerformanceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosPerformanceTwrrListValidateBeforeCall(portfolioUuid, dateAfter, dateBefore, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioPerformanceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosPortfoliotypesList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPortfoliotypesListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/portfoliotypes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosPortfoliotypesListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2PortfoliosPortfoliotypesListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedPortfolioTypeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedPortfolioTypeList apiV2PortfoliosPortfoliotypesList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedPortfolioTypeList> localVarResp = apiV2PortfoliosPortfoliotypesListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedPortfolioTypeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedPortfolioTypeList> apiV2PortfoliosPortfoliotypesListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosPortfoliotypesListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioTypeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPortfoliotypesListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedPortfolioTypeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosPortfoliotypesListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedPortfolioTypeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosPortfoliotypesRestrictionsList
     * @param code  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPortfoliotypesRestrictionsListCall(String code, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/portfoliotypes/{code}/restrictions/"
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosPortfoliotypesRestrictionsListValidateBeforeCall(String code, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling apiV2PortfoliosPortfoliotypesRestrictionsList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosPortfoliotypesRestrictionsListCall(code, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param code  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedBasePortfolioTypeRestrictionsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedBasePortfolioTypeRestrictionsList apiV2PortfoliosPortfoliotypesRestrictionsList(String code, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedBasePortfolioTypeRestrictionsList> localVarResp = apiV2PortfoliosPortfoliotypesRestrictionsListWithHttpInfo(code, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param code  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedBasePortfolioTypeRestrictionsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedBasePortfolioTypeRestrictionsList> apiV2PortfoliosPortfoliotypesRestrictionsListWithHttpInfo(String code, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosPortfoliotypesRestrictionsListValidateBeforeCall(code, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedBasePortfolioTypeRestrictionsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param code  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosPortfoliotypesRestrictionsListAsync(String code, Integer limit, Integer offset, final ApiCallback<PaginatedBasePortfolioTypeRestrictionsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosPortfoliotypesRestrictionsListValidateBeforeCall(code, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedBasePortfolioTypeRestrictionsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosRebalancesList
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosRebalancesListCall(UUID portfolioUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/rebalances/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosRebalancesListValidateBeforeCall(UUID portfolioUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosRebalancesList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosRebalancesListCall(portfolioUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedRebalanceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedRebalanceList apiV2PortfoliosRebalancesList(UUID portfolioUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedRebalanceList> localVarResp = apiV2PortfoliosRebalancesListWithHttpInfo(portfolioUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedRebalanceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedRebalanceList> apiV2PortfoliosRebalancesListWithHttpInfo(UUID portfolioUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosRebalancesListValidateBeforeCall(portfolioUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedRebalanceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosRebalancesListAsync(UUID portfolioUuid, Integer limit, Integer offset, final ApiCallback<PaginatedRebalanceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosRebalancesListValidateBeforeCall(portfolioUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedRebalanceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosRebalancesRetrieve
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosRebalancesRetrieveCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/rebalances/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosRebalancesRetrieveValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosRebalancesRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosRebalancesRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosRebalancesRetrieveCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return Rebalance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Rebalance apiV2PortfoliosRebalancesRetrieve(UUID portfolioUuid, UUID uuid) throws ApiException {
        ApiResponse<Rebalance> localVarResp = apiV2PortfoliosRebalancesRetrieveWithHttpInfo(portfolioUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Rebalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rebalance> apiV2PortfoliosRebalancesRetrieveWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosRebalancesRetrieveValidateBeforeCall(portfolioUuid, uuid, null);
        Type localVarReturnType = new TypeToken<Rebalance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosRebalancesRetrieveAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<Rebalance> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosRebalancesRetrieveValidateBeforeCall(portfolioUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<Rebalance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosRestrictionsRetrieve
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosRestrictionsRetrieveCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{uuid}/restrictions/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosRestrictionsRetrieveValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosRestrictionsRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosRestrictionsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosRestrictionsRetrieveCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return PortfolioTypeRestrictions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioTypeRestrictions apiV2PortfoliosRestrictionsRetrieve(UUID portfolioUuid, UUID uuid) throws ApiException {
        ApiResponse<PortfolioTypeRestrictions> localVarResp = apiV2PortfoliosRestrictionsRetrieveWithHttpInfo(portfolioUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;PortfolioTypeRestrictions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioTypeRestrictions> apiV2PortfoliosRestrictionsRetrieveWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosRestrictionsRetrieveValidateBeforeCall(portfolioUuid, uuid, null);
        Type localVarReturnType = new TypeToken<PortfolioTypeRestrictions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosRestrictionsRetrieveAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<PortfolioTypeRestrictions> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosRestrictionsRetrieveValidateBeforeCall(portfolioUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<PortfolioTypeRestrictions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosRetrieve
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosRetrieveCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosRetrieveValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosRetrieveCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return PortfolioDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioDetail apiV2PortfoliosRetrieve(UUID portfolioUuid, UUID uuid) throws ApiException {
        ApiResponse<PortfolioDetail> localVarResp = apiV2PortfoliosRetrieveWithHttpInfo(portfolioUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;PortfolioDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioDetail> apiV2PortfoliosRetrieveWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosRetrieveValidateBeforeCall(portfolioUuid, uuid, null);
        Type localVarReturnType = new TypeToken<PortfolioDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosRetrieveAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<PortfolioDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosRetrieveValidateBeforeCall(portfolioUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<PortfolioDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosUpdate
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param portfolioUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosUpdateCall(UUID portfolioUuid, UUID uuid, PortfolioUpdate portfolioUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = portfolioUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosUpdateValidateBeforeCall(UUID portfolioUuid, UUID uuid, PortfolioUpdate portfolioUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosUpdate(Async)");
        }
        
        // verify the required parameter 'portfolioUpdate' is set
        if (portfolioUpdate == null) {
            throw new ApiException("Missing the required parameter 'portfolioUpdate' when calling apiV2PortfoliosUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosUpdateCall(portfolioUuid, uuid, portfolioUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param portfolioUpdate  (required)
     * @return PortfolioUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PortfolioUpdate apiV2PortfoliosUpdate(UUID portfolioUuid, UUID uuid, PortfolioUpdate portfolioUpdate) throws ApiException {
        ApiResponse<PortfolioUpdate> localVarResp = apiV2PortfoliosUpdateWithHttpInfo(portfolioUuid, uuid, portfolioUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param portfolioUpdate  (required)
     * @return ApiResponse&lt;PortfolioUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PortfolioUpdate> apiV2PortfoliosUpdateWithHttpInfo(UUID portfolioUuid, UUID uuid, PortfolioUpdate portfolioUpdate) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosUpdateValidateBeforeCall(portfolioUuid, uuid, portfolioUpdate, null);
        Type localVarReturnType = new TypeToken<PortfolioUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \&quot;__\&quot; notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields &#x3D; {                 &#39;allocations__balance&#39;: [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \&quot;__\&quot; notation).         Example:             groupable_fields &#x3D; [&#39;portfolio__portfolio_type&#39;]  Query Param Examples:     &gt;&gt;&gt; ?group_by&#x3D;portfolio.portfolio_type     &gt;&gt;&gt; ?aggregate[Sum]&#x3D;portfolio.allocations.balance     &gt;&gt;&gt; ?group_by&#x3D;valuation_date&amp;aggregate[Sum]&#x3D;portfolio.allocations.balance
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param portfolioUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosUpdateAsync(UUID portfolioUuid, UUID uuid, PortfolioUpdate portfolioUpdate, final ApiCallback<PortfolioUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosUpdateValidateBeforeCall(portfolioUuid, uuid, portfolioUpdate, _callback);
        Type localVarReturnType = new TypeToken<PortfolioUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosWithdrawalsCreate
     * @param portfolioUuid  (required)
     * @param investorWithdrawalCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosWithdrawalsCreateCall(UUID portfolioUuid, InvestorWithdrawalCreate investorWithdrawalCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = investorWithdrawalCreate;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/withdrawals/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosWithdrawalsCreateValidateBeforeCall(UUID portfolioUuid, InvestorWithdrawalCreate investorWithdrawalCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosWithdrawalsCreate(Async)");
        }
        
        // verify the required parameter 'investorWithdrawalCreate' is set
        if (investorWithdrawalCreate == null) {
            throw new ApiException("Missing the required parameter 'investorWithdrawalCreate' when calling apiV2PortfoliosWithdrawalsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsCreateCall(portfolioUuid, investorWithdrawalCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param investorWithdrawalCreate  (required)
     * @return InvestorWithdrawalCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InvestorWithdrawalCreate apiV2PortfoliosWithdrawalsCreate(UUID portfolioUuid, InvestorWithdrawalCreate investorWithdrawalCreate) throws ApiException {
        ApiResponse<InvestorWithdrawalCreate> localVarResp = apiV2PortfoliosWithdrawalsCreateWithHttpInfo(portfolioUuid, investorWithdrawalCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param investorWithdrawalCreate  (required)
     * @return ApiResponse&lt;InvestorWithdrawalCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvestorWithdrawalCreate> apiV2PortfoliosWithdrawalsCreateWithHttpInfo(UUID portfolioUuid, InvestorWithdrawalCreate investorWithdrawalCreate) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsCreateValidateBeforeCall(portfolioUuid, investorWithdrawalCreate, null);
        Type localVarReturnType = new TypeToken<InvestorWithdrawalCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param investorWithdrawalCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosWithdrawalsCreateAsync(UUID portfolioUuid, InvestorWithdrawalCreate investorWithdrawalCreate, final ApiCallback<InvestorWithdrawalCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsCreateValidateBeforeCall(portfolioUuid, investorWithdrawalCreate, _callback);
        Type localVarReturnType = new TypeToken<InvestorWithdrawalCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosWithdrawalsDestroy
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosWithdrawalsDestroyCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosWithdrawalsDestroyValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosWithdrawalsDestroy(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosWithdrawalsDestroy(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsDestroyCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2PortfoliosWithdrawalsDestroy(UUID portfolioUuid, UUID uuid) throws ApiException {
        apiV2PortfoliosWithdrawalsDestroyWithHttpInfo(portfolioUuid, uuid);
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2PortfoliosWithdrawalsDestroyWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsDestroyValidateBeforeCall(portfolioUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosWithdrawalsDestroyAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsDestroyValidateBeforeCall(portfolioUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosWithdrawalsList
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosWithdrawalsListCall(UUID portfolioUuid, Integer limit, Integer offset, List<String> status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/withdrawals/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosWithdrawalsListValidateBeforeCall(UUID portfolioUuid, Integer limit, Integer offset, List<String> status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosWithdrawalsList(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsListCall(portfolioUuid, limit, offset, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @return PaginatedInvestorWithdrawalListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedInvestorWithdrawalListList apiV2PortfoliosWithdrawalsList(UUID portfolioUuid, Integer limit, Integer offset, List<String> status) throws ApiException {
        ApiResponse<PaginatedInvestorWithdrawalListList> localVarResp = apiV2PortfoliosWithdrawalsListWithHttpInfo(portfolioUuid, limit, offset, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;PaginatedInvestorWithdrawalListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedInvestorWithdrawalListList> apiV2PortfoliosWithdrawalsListWithHttpInfo(UUID portfolioUuid, Integer limit, Integer offset, List<String> status) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsListValidateBeforeCall(portfolioUuid, limit, offset, status, null);
        Type localVarReturnType = new TypeToken<PaginatedInvestorWithdrawalListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosWithdrawalsListAsync(UUID portfolioUuid, Integer limit, Integer offset, List<String> status, final ApiCallback<PaginatedInvestorWithdrawalListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsListValidateBeforeCall(portfolioUuid, limit, offset, status, _callback);
        Type localVarReturnType = new TypeToken<PaginatedInvestorWithdrawalListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2PortfoliosWithdrawalsRetrieve
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosWithdrawalsRetrieveCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/"
            .replaceAll("\\{" + "portfolio_uuid" + "\\}", localVarApiClient.escapeString(portfolioUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2PortfoliosWithdrawalsRetrieveValidateBeforeCall(UUID portfolioUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'portfolioUuid' is set
        if (portfolioUuid == null) {
            throw new ApiException("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosWithdrawalsRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling apiV2PortfoliosWithdrawalsRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsRetrieveCall(portfolioUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return WithdrawalDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public WithdrawalDetail apiV2PortfoliosWithdrawalsRetrieve(UUID portfolioUuid, UUID uuid) throws ApiException {
        ApiResponse<WithdrawalDetail> localVarResp = apiV2PortfoliosWithdrawalsRetrieveWithHttpInfo(portfolioUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;WithdrawalDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WithdrawalDetail> apiV2PortfoliosWithdrawalsRetrieveWithHttpInfo(UUID portfolioUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsRetrieveValidateBeforeCall(portfolioUuid, uuid, null);
        Type localVarReturnType = new TypeToken<WithdrawalDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param portfolioUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2PortfoliosWithdrawalsRetrieveAsync(UUID portfolioUuid, UUID uuid, final ApiCallback<WithdrawalDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2PortfoliosWithdrawalsRetrieveValidateBeforeCall(portfolioUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<WithdrawalDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2RiskQuestionsList
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RiskQuestionsListCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/risk/questions/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2RiskQuestionsListValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = apiV2RiskQuestionsListCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedQuestionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedQuestionList apiV2RiskQuestionsList(Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedQuestionList> localVarResp = apiV2RiskQuestionsListWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedQuestionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedQuestionList> apiV2RiskQuestionsListWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = apiV2RiskQuestionsListValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedQuestionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2RiskQuestionsListAsync(Integer limit, Integer offset, final ApiCallback<PaginatedQuestionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2RiskQuestionsListValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedQuestionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2VerificationsVerifierWebhookCreate
     * @param action  (required)
     * @param verifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2VerificationsVerifierWebhookCreateCall(String action, String verifier, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/verifications/verifier_webhook/{verifier}/{action}/"
            .replaceAll("\\{" + "action" + "\\}", localVarApiClient.escapeString(action.toString()))
            .replaceAll("\\{" + "verifier" + "\\}", localVarApiClient.escapeString(verifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2VerificationsVerifierWebhookCreateValidateBeforeCall(String action, String verifier, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling apiV2VerificationsVerifierWebhookCreate(Async)");
        }
        
        // verify the required parameter 'verifier' is set
        if (verifier == null) {
            throw new ApiException("Missing the required parameter 'verifier' when calling apiV2VerificationsVerifierWebhookCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2VerificationsVerifierWebhookCreateCall(action, verifier, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param action  (required)
     * @param verifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void apiV2VerificationsVerifierWebhookCreate(String action, String verifier) throws ApiException {
        apiV2VerificationsVerifierWebhookCreateWithHttpInfo(action, verifier);
    }

    /**
     * 
     * 
     * @param action  (required)
     * @param verifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV2VerificationsVerifierWebhookCreateWithHttpInfo(String action, String verifier) throws ApiException {
        okhttp3.Call localVarCall = apiV2VerificationsVerifierWebhookCreateValidateBeforeCall(action, verifier, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param action  (required)
     * @param verifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2VerificationsVerifierWebhookCreateAsync(String action, String verifier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2VerificationsVerifierWebhookCreateValidateBeforeCall(action, verifier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebsocketAuthenticationTicketCreate
     * @param websocketAuthentication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketAuthenticationTicketCreateCall(WebsocketAuthentication websocketAuthentication, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = websocketAuthentication;

        // create path and map variables
        String localVarPath = "/api/v2/websocket/authentication/ticket/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebsocketAuthenticationTicketCreateValidateBeforeCall(WebsocketAuthentication websocketAuthentication, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'websocketAuthentication' is set
        if (websocketAuthentication == null) {
            throw new ApiException("Missing the required parameter 'websocketAuthentication' when calling apiV2WebsocketAuthenticationTicketCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2WebsocketAuthenticationTicketCreateCall(websocketAuthentication, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param websocketAuthentication  (required)
     * @return AuthenticationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticationResponse apiV2WebsocketAuthenticationTicketCreate(WebsocketAuthentication websocketAuthentication) throws ApiException {
        ApiResponse<AuthenticationResponse> localVarResp = apiV2WebsocketAuthenticationTicketCreateWithHttpInfo(websocketAuthentication);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param websocketAuthentication  (required)
     * @return ApiResponse&lt;AuthenticationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticationResponse> apiV2WebsocketAuthenticationTicketCreateWithHttpInfo(WebsocketAuthentication websocketAuthentication) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebsocketAuthenticationTicketCreateValidateBeforeCall(websocketAuthentication, null);
        Type localVarReturnType = new TypeToken<AuthenticationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param websocketAuthentication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketAuthenticationTicketCreateAsync(WebsocketAuthentication websocketAuthentication, final ApiCallback<AuthenticationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebsocketAuthenticationTicketCreateValidateBeforeCall(websocketAuthentication, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebsocketAuthorizeAssetCreate
     * @param websocketAuthentication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketAuthorizeAssetCreateCall(WebsocketAuthentication websocketAuthentication, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = websocketAuthentication;

        // create path and map variables
        String localVarPath = "/api/v2/websocket/authorize/asset/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebsocketAuthorizeAssetCreateValidateBeforeCall(WebsocketAuthentication websocketAuthentication, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'websocketAuthentication' is set
        if (websocketAuthentication == null) {
            throw new ApiException("Missing the required parameter 'websocketAuthentication' when calling apiV2WebsocketAuthorizeAssetCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2WebsocketAuthorizeAssetCreateCall(websocketAuthentication, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param websocketAuthentication  (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response apiV2WebsocketAuthorizeAssetCreate(WebsocketAuthentication websocketAuthentication) throws ApiException {
        ApiResponse<Response> localVarResp = apiV2WebsocketAuthorizeAssetCreateWithHttpInfo(websocketAuthentication);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param websocketAuthentication  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> apiV2WebsocketAuthorizeAssetCreateWithHttpInfo(WebsocketAuthentication websocketAuthentication) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebsocketAuthorizeAssetCreateValidateBeforeCall(websocketAuthentication, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param websocketAuthentication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketAuthorizeAssetCreateAsync(WebsocketAuthentication websocketAuthentication, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebsocketAuthorizeAssetCreateValidateBeforeCall(websocketAuthentication, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebsocketAuthorizeCreate
     * @param websocketAuthentication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketAuthorizeCreateCall(WebsocketAuthentication websocketAuthentication, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = websocketAuthentication;

        // create path and map variables
        String localVarPath = "/api/v2/websocket/authorize/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebsocketAuthorizeCreateValidateBeforeCall(WebsocketAuthentication websocketAuthentication, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'websocketAuthentication' is set
        if (websocketAuthentication == null) {
            throw new ApiException("Missing the required parameter 'websocketAuthentication' when calling apiV2WebsocketAuthorizeCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2WebsocketAuthorizeCreateCall(websocketAuthentication, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param websocketAuthentication  (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response apiV2WebsocketAuthorizeCreate(WebsocketAuthentication websocketAuthentication) throws ApiException {
        ApiResponse<Response> localVarResp = apiV2WebsocketAuthorizeCreateWithHttpInfo(websocketAuthentication);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param websocketAuthentication  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> apiV2WebsocketAuthorizeCreateWithHttpInfo(WebsocketAuthentication websocketAuthentication) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebsocketAuthorizeCreateValidateBeforeCall(websocketAuthentication, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param websocketAuthentication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketAuthorizeCreateAsync(WebsocketAuthentication websocketAuthentication, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebsocketAuthorizeCreateValidateBeforeCall(websocketAuthentication, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebsocketAuthorizePortfolioCreate
     * @param websocketAuthentication  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketAuthorizePortfolioCreateCall(WebsocketAuthentication websocketAuthentication, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = websocketAuthentication;

        // create path and map variables
        String localVarPath = "/api/v2/websocket/authorize/portfolio/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebsocketAuthorizePortfolioCreateValidateBeforeCall(WebsocketAuthentication websocketAuthentication, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'websocketAuthentication' is set
        if (websocketAuthentication == null) {
            throw new ApiException("Missing the required parameter 'websocketAuthentication' when calling apiV2WebsocketAuthorizePortfolioCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2WebsocketAuthorizePortfolioCreateCall(websocketAuthentication, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param websocketAuthentication  (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Response apiV2WebsocketAuthorizePortfolioCreate(WebsocketAuthentication websocketAuthentication) throws ApiException {
        ApiResponse<Response> localVarResp = apiV2WebsocketAuthorizePortfolioCreateWithHttpInfo(websocketAuthentication);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param websocketAuthentication  (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> apiV2WebsocketAuthorizePortfolioCreateWithHttpInfo(WebsocketAuthentication websocketAuthentication) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebsocketAuthorizePortfolioCreateValidateBeforeCall(websocketAuthentication, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param websocketAuthentication  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketAuthorizePortfolioCreateAsync(WebsocketAuthentication websocketAuthentication, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebsocketAuthorizePortfolioCreateValidateBeforeCall(websocketAuthentication, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebsocketOnSubscribeCreate
     * @param subscribe  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketOnSubscribeCreateCall(Subscribe subscribe, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = subscribe;

        // create path and map variables
        String localVarPath = "/api/v2/websocket/on_subscribe/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebsocketOnSubscribeCreateValidateBeforeCall(Subscribe subscribe, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscribe' is set
        if (subscribe == null) {
            throw new ApiException("Missing the required parameter 'subscribe' when calling apiV2WebsocketOnSubscribeCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2WebsocketOnSubscribeCreateCall(subscribe, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param subscribe  (required)
     * @return Subscribe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Subscribe apiV2WebsocketOnSubscribeCreate(Subscribe subscribe) throws ApiException {
        ApiResponse<Subscribe> localVarResp = apiV2WebsocketOnSubscribeCreateWithHttpInfo(subscribe);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param subscribe  (required)
     * @return ApiResponse&lt;Subscribe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscribe> apiV2WebsocketOnSubscribeCreateWithHttpInfo(Subscribe subscribe) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebsocketOnSubscribeCreateValidateBeforeCall(subscribe, null);
        Type localVarReturnType = new TypeToken<Subscribe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param subscribe  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketOnSubscribeCreateAsync(Subscribe subscribe, final ApiCallback<Subscribe> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebsocketOnSubscribeCreateValidateBeforeCall(subscribe, _callback);
        Type localVarReturnType = new TypeToken<Subscribe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV2WebsocketOnUnsubscribeCreate
     * @param unsubscribe  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketOnUnsubscribeCreateCall(Unsubscribe unsubscribe, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = unsubscribe;

        // create path and map variables
        String localVarPath = "/api/v2/websocket/on_unsubscribe/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV2WebsocketOnUnsubscribeCreateValidateBeforeCall(Unsubscribe unsubscribe, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'unsubscribe' is set
        if (unsubscribe == null) {
            throw new ApiException("Missing the required parameter 'unsubscribe' when calling apiV2WebsocketOnUnsubscribeCreate(Async)");
        }
        

        okhttp3.Call localVarCall = apiV2WebsocketOnUnsubscribeCreateCall(unsubscribe, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param unsubscribe  (required)
     * @return Unsubscribe
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Unsubscribe apiV2WebsocketOnUnsubscribeCreate(Unsubscribe unsubscribe) throws ApiException {
        ApiResponse<Unsubscribe> localVarResp = apiV2WebsocketOnUnsubscribeCreateWithHttpInfo(unsubscribe);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param unsubscribe  (required)
     * @return ApiResponse&lt;Unsubscribe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Unsubscribe> apiV2WebsocketOnUnsubscribeCreateWithHttpInfo(Unsubscribe unsubscribe) throws ApiException {
        okhttp3.Call localVarCall = apiV2WebsocketOnUnsubscribeCreateValidateBeforeCall(unsubscribe, null);
        Type localVarReturnType = new TypeToken<Unsubscribe>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param unsubscribe  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV2WebsocketOnUnsubscribeCreateAsync(Unsubscribe unsubscribe, final ApiCallback<Unsubscribe> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV2WebsocketOnUnsubscribeCreateValidateBeforeCall(unsubscribe, _callback);
        Type localVarReturnType = new TypeToken<Unsubscribe>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
