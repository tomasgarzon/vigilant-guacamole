/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DocumentTypeEnum;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.OneOfResultEnumBlankEnum;
import org.openapitools.client.model.PaginatedVerificationDocumentList;
import org.openapitools.client.model.PaginatedVerificationListList;
import org.openapitools.client.model.StatusBd7Enum;
import java.util.UUID;
import org.openapitools.client.model.VerificationCreate;
import org.openapitools.client.model.VerificationDocument;
import org.openapitools.client.model.VerificationDocumentCreate;
import org.openapitools.client.model.VerificationList;
import org.openapitools.client.model.VerificationWithType;
import org.openapitools.client.model.VerifyTypeEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KycApi {
    private ApiClient localVarApiClient;

    public KycApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KycApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clientVerificationCreate
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param verificationCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationCreateCall(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = verificationCreate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationCreateValidateBeforeCall(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationCreate(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationCreate(Async)");
        }
        
        // verify the required parameter 'verificationCreate' is set
        if (verificationCreate == null) {
            throw new ApiException("Missing the required parameter 'verificationCreate' when calling clientVerificationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationCreateCall(clientUuid, verifyTypeCode, verificationCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param verificationCreate  (required)
     * @return VerificationCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationCreate clientVerificationCreate(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate) throws ApiException {
        ApiResponse<VerificationCreate> localVarResp = clientVerificationCreateWithHttpInfo(clientUuid, verifyTypeCode, verificationCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param verificationCreate  (required)
     * @return ApiResponse&lt;VerificationCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationCreate> clientVerificationCreateWithHttpInfo(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationCreateValidateBeforeCall(clientUuid, verifyTypeCode, verificationCreate, null);
        Type localVarReturnType = new TypeToken<VerificationCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param verificationCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationCreateAsync(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate, final ApiCallback<VerificationCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationCreateValidateBeforeCall(clientUuid, verifyTypeCode, verificationCreate, _callback);
        Type localVarReturnType = new TypeToken<VerificationCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentCreate
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid  (required)
     * @param verifyType  (required)
     * @param created  (required)
     * @param updated  (required)
     * @param verificationDocuments  (required)
     * @param status  (optional)
     * @param result  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentCreateCall(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarFormParams.put("uuid", uuid);
        }

        if (verifyType != null) {
            localVarFormParams.put("verify_type", verifyType);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (result != null) {
            localVarFormParams.put("result", result);
        }

        if (created != null) {
            localVarFormParams.put("created", created);
        }

        if (updated != null) {
            localVarFormParams.put("updated", updated);
        }

        if (verificationDocuments != null) {
            localVarFormParams.put("verification_documents", verificationDocuments);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentCreateValidateBeforeCall(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'verifyType' is set
        if (verifyType == null) {
            throw new ApiException("Missing the required parameter 'verifyType' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'created' is set
        if (created == null) {
            throw new ApiException("Missing the required parameter 'created' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'updated' is set
        if (updated == null) {
            throw new ApiException("Missing the required parameter 'updated' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'verificationDocuments' is set
        if (verificationDocuments == null) {
            throw new ApiException("Missing the required parameter 'verificationDocuments' when calling clientVerificationDocumentCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentCreateCall(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid  (required)
     * @param verifyType  (required)
     * @param created  (required)
     * @param updated  (required)
     * @param verificationDocuments  (required)
     * @param status  (optional)
     * @param result  (optional)
     * @return VerificationWithType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationWithType clientVerificationDocumentCreate(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result) throws ApiException {
        ApiResponse<VerificationWithType> localVarResp = clientVerificationDocumentCreateWithHttpInfo(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid  (required)
     * @param verifyType  (required)
     * @param created  (required)
     * @param updated  (required)
     * @param verificationDocuments  (required)
     * @param status  (optional)
     * @param result  (optional)
     * @return ApiResponse&lt;VerificationWithType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationWithType> clientVerificationDocumentCreateWithHttpInfo(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentCreateValidateBeforeCall(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result, null);
        Type localVarReturnType = new TypeToken<VerificationWithType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid  (required)
     * @param verifyType  (required)
     * @param created  (required)
     * @param updated  (required)
     * @param verificationDocuments  (required)
     * @param status  (optional)
     * @param result  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentCreateAsync(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result, final ApiCallback<VerificationWithType> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentCreateValidateBeforeCall(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result, _callback);
        Type localVarReturnType = new TypeToken<VerificationWithType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentDeleteCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentDelete(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentDeleteCall(clientUuid, uuid, verifyTypeCode, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client verificatoin document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientVerificationDocumentDelete(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        clientVerificationDocumentDeleteWithHttpInfo(clientUuid, uuid, verifyTypeCode);
    }

    /**
     * 
     * Delete a client verificatoin document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientVerificationDocumentDeleteWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentDeleteValidateBeforeCall(clientUuid, uuid, verifyTypeCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client verificatoin document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentDeleteAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentDeleteValidateBeforeCall(clientUuid, uuid, verifyTypeCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentList
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentListCall(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentListValidateBeforeCall(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentList(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentList(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentListCall(clientUuid, verifyTypeCode, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List Verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedVerificationDocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedVerificationDocumentList clientVerificationDocumentList(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedVerificationDocumentList> localVarResp = clientVerificationDocumentListWithHttpInfo(clientUuid, verifyTypeCode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List Verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedVerificationDocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedVerificationDocumentList> clientVerificationDocumentListWithHttpInfo(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentListValidateBeforeCall(clientUuid, verifyTypeCode, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedVerificationDocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentListAsync(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback<PaginatedVerificationDocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentListValidateBeforeCall(clientUuid, verifyTypeCode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedVerificationDocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (optional)
     * @param documentType  (optional)
     * @param documentFront  (optional)
     * @param documentBack  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentPartialUpdateCall(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid2 != null) {
            localVarFormParams.put("uuid", uuid2);
        }

        if (documentType != null) {
            localVarFormParams.put("document_type", documentType);
        }

        if (documentFront != null) {
            localVarFormParams.put("document_front", documentFront);
        }

        if (documentBack != null) {
            localVarFormParams.put("document_back", documentBack);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentPartialUpdate(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentPartialUpdateCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (optional)
     * @param documentType  (optional)
     * @param documentFront  (optional)
     * @param documentBack  (optional)
     * @return VerificationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationDocument clientVerificationDocumentPartialUpdate(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack) throws ApiException {
        ApiResponse<VerificationDocument> localVarResp = clientVerificationDocumentPartialUpdateWithHttpInfo(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (optional)
     * @param documentType  (optional)
     * @param documentFront  (optional)
     * @param documentBack  (optional)
     * @return ApiResponse&lt;VerificationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationDocument> clientVerificationDocumentPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentPartialUpdateValidateBeforeCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, null);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (optional)
     * @param documentType  (optional)
     * @param documentFront  (optional)
     * @param documentBack  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentPartialUpdateAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback<VerificationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentPartialUpdateValidateBeforeCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, _callback);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentRetrieveCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentRetrieve(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentRetrieveCall(clientUuid, uuid, verifyTypeCode, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return VerificationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationDocument clientVerificationDocumentRetrieve(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        ApiResponse<VerificationDocument> localVarResp = clientVerificationDocumentRetrieveWithHttpInfo(clientUuid, uuid, verifyTypeCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return ApiResponse&lt;VerificationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationDocument> clientVerificationDocumentRetrieveWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentRetrieveValidateBeforeCall(clientUuid, uuid, verifyTypeCode, null);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentRetrieveAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback<VerificationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentRetrieveValidateBeforeCall(clientUuid, uuid, verifyTypeCode, _callback);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (required)
     * @param documentType  (required)
     * @param documentFront  (required)
     * @param documentBack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentUpdateCall(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid2 != null) {
            localVarFormParams.put("uuid", uuid2);
        }

        if (documentType != null) {
            localVarFormParams.put("document_type", documentType);
        }

        if (documentFront != null) {
            localVarFormParams.put("document_front", documentFront);
        }

        if (documentBack != null) {
            localVarFormParams.put("document_back", documentBack);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'uuid2' is set
        if (uuid2 == null) {
            throw new ApiException("Missing the required parameter 'uuid2' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'documentFront' is set
        if (documentFront == null) {
            throw new ApiException("Missing the required parameter 'documentFront' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'documentBack' is set
        if (documentBack == null) {
            throw new ApiException("Missing the required parameter 'documentBack' when calling clientVerificationDocumentUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentUpdateCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (required)
     * @param documentType  (required)
     * @param documentFront  (required)
     * @param documentBack  (required)
     * @return VerificationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationDocument clientVerificationDocumentUpdate(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack) throws ApiException {
        ApiResponse<VerificationDocument> localVarResp = clientVerificationDocumentUpdateWithHttpInfo(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (required)
     * @param documentType  (required)
     * @param documentFront  (required)
     * @param documentBack  (required)
     * @return ApiResponse&lt;VerificationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationDocument> clientVerificationDocumentUpdateWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentUpdateValidateBeforeCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, null);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (required)
     * @param documentType  (required)
     * @param documentFront  (required)
     * @param documentBack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentUpdateAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback<VerificationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentUpdateValidateBeforeCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, _callback);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationList
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationListCall(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationListValidateBeforeCall(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationList(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationList(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationListCall(clientUuid, verifyTypeCode, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List Verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedVerificationListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedVerificationListList clientVerificationList(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedVerificationListList> localVarResp = clientVerificationListWithHttpInfo(clientUuid, verifyTypeCode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List Verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedVerificationListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedVerificationListList> clientVerificationListWithHttpInfo(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationListValidateBeforeCall(clientUuid, verifyTypeCode, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedVerificationListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationListAsync(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback<PaginatedVerificationListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationListValidateBeforeCall(clientUuid, verifyTypeCode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedVerificationListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationRetrieveCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationRetrieve(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationRetrieveCall(clientUuid, uuid, verifyTypeCode, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client verification 
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return VerificationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationList clientVerificationRetrieve(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        ApiResponse<VerificationList> localVarResp = clientVerificationRetrieveWithHttpInfo(clientUuid, uuid, verifyTypeCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client verification 
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return ApiResponse&lt;VerificationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationList> clientVerificationRetrieveWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationRetrieveValidateBeforeCall(clientUuid, uuid, verifyTypeCode, null);
        Type localVarReturnType = new TypeToken<VerificationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client verification 
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationRetrieveAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback<VerificationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationRetrieveValidateBeforeCall(clientUuid, uuid, verifyTypeCode, _callback);
        Type localVarReturnType = new TypeToken<VerificationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
