/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PaginatedTaxInformationListList;
import org.openapitools.client.model.PatchedTaxInformationCreateUpdate;
import org.openapitools.client.model.TaxInformationCreateUpdate;
import org.openapitools.client.model.TaxInformationList;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxInformationApi {
    private ApiClient localVarApiClient;

    public TaxInformationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxInformationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clientTaxInformationCreate
     * @param clientUuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationCreateCall(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taxInformationCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationCreateValidateBeforeCall(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationCreate(Async)");
        }
        
        // verify the required parameter 'taxInformationCreateUpdate' is set
        if (taxInformationCreateUpdate == null) {
            throw new ApiException("Missing the required parameter 'taxInformationCreateUpdate' when calling clientTaxInformationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationCreateCall(clientUuid, taxInformationCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a tax inforation for a client
     * @param clientUuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @return TaxInformationCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaxInformationCreateUpdate clientTaxInformationCreate(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate) throws ApiException {
        ApiResponse<TaxInformationCreateUpdate> localVarResp = clientTaxInformationCreateWithHttpInfo(clientUuid, taxInformationCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a tax inforation for a client
     * @param clientUuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @return ApiResponse&lt;TaxInformationCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxInformationCreateUpdate> clientTaxInformationCreateWithHttpInfo(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationCreateValidateBeforeCall(clientUuid, taxInformationCreateUpdate, null);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a tax inforation for a client
     * @param clientUuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationCreateAsync(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback<TaxInformationCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationCreateValidateBeforeCall(clientUuid, taxInformationCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTaxInformationDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientTaxInformationDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientTaxInformationDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientTaxInformationDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationList
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationListCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationListValidateBeforeCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationList(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationListCall(clientUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List tax information for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedTaxInformationListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedTaxInformationListList clientTaxInformationList(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedTaxInformationListList> localVarResp = clientTaxInformationListWithHttpInfo(clientUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List tax information for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedTaxInformationListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedTaxInformationListList> clientTaxInformationListWithHttpInfo(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationListValidateBeforeCall(clientUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedTaxInformationListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List tax information for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationListAsync(UUID clientUuid, Integer limit, Integer offset, final ApiCallback<PaginatedTaxInformationListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationListValidateBeforeCall(clientUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedTaxInformationListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedTaxInformationCreateUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationPartialUpdateCall(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedTaxInformationCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTaxInformationPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationPartialUpdateCall(clientUuid, uuid, patchedTaxInformationCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedTaxInformationCreateUpdate  (optional)
     * @return TaxInformationCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaxInformationCreateUpdate clientTaxInformationPartialUpdate(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate) throws ApiException {
        ApiResponse<TaxInformationCreateUpdate> localVarResp = clientTaxInformationPartialUpdateWithHttpInfo(clientUuid, uuid, patchedTaxInformationCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedTaxInformationCreateUpdate  (optional)
     * @return ApiResponse&lt;TaxInformationCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxInformationCreateUpdate> clientTaxInformationPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedTaxInformationCreateUpdate, null);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedTaxInformationCreateUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationPartialUpdateAsync(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate, final ApiCallback<TaxInformationCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedTaxInformationCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTaxInformationRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return TaxInformationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaxInformationList clientTaxInformationRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<TaxInformationList> localVarResp = clientTaxInformationRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;TaxInformationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxInformationList> clientTaxInformationRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<TaxInformationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<TaxInformationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<TaxInformationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationUpdateCall(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taxInformationCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTaxInformationUpdate(Async)");
        }
        
        // verify the required parameter 'taxInformationCreateUpdate' is set
        if (taxInformationCreateUpdate == null) {
            throw new ApiException("Missing the required parameter 'taxInformationCreateUpdate' when calling clientTaxInformationUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationUpdateCall(clientUuid, uuid, taxInformationCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @return TaxInformationCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaxInformationCreateUpdate clientTaxInformationUpdate(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate) throws ApiException {
        ApiResponse<TaxInformationCreateUpdate> localVarResp = clientTaxInformationUpdateWithHttpInfo(clientUuid, uuid, taxInformationCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @return ApiResponse&lt;TaxInformationCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxInformationCreateUpdate> clientTaxInformationUpdateWithHttpInfo(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationUpdateValidateBeforeCall(clientUuid, uuid, taxInformationCreateUpdate, null);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationUpdateAsync(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback<TaxInformationCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationUpdateValidateBeforeCall(clientUuid, uuid, taxInformationCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
