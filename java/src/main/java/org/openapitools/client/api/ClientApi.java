/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddressCreate;
import org.openapitools.client.model.AddressList;
import org.openapitools.client.model.AddressUpdate;
import org.openapitools.client.model.ApplicationClientUpdate;
import org.openapitools.client.model.Assessment;
import org.openapitools.client.model.BankAccountCreateUpdate;
import org.openapitools.client.model.BankAccountList;
import org.openapitools.client.model.ClientCreate;
import org.openapitools.client.model.ClientDetail;
import org.openapitools.client.model.ClientPerformance;
import org.openapitools.client.model.DocTypeEnum;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentTypeEnum;
import org.openapitools.client.model.NationalityCreate;
import org.openapitools.client.model.NationalityList;
import org.openapitools.client.model.NationalityUpdate;
import org.threeten.bp.OffsetDateTime;
import org.openapitools.client.model.OneOfResultEnumBlankEnum;
import org.openapitools.client.model.PaginatedAddressListList;
import org.openapitools.client.model.PaginatedAssessmentList;
import org.openapitools.client.model.PaginatedBankAccountListList;
import org.openapitools.client.model.PaginatedClientDetailList;
import org.openapitools.client.model.PaginatedDocumentList;
import org.openapitools.client.model.PaginatedNationalityListList;
import org.openapitools.client.model.PaginatedTaxInformationListList;
import org.openapitools.client.model.PaginatedVerificationDocumentList;
import org.openapitools.client.model.PaginatedVerificationListList;
import org.openapitools.client.model.PatchedAddressUpdate;
import org.openapitools.client.model.PatchedApplicationClientUpdate;
import org.openapitools.client.model.PatchedAssessment;
import org.openapitools.client.model.PatchedBankAccountCreateUpdate;
import org.openapitools.client.model.PatchedNationalityUpdate;
import org.openapitools.client.model.PatchedTaxInformationCreateUpdate;
import org.openapitools.client.model.StatusBd7Enum;
import org.openapitools.client.model.TaxInformationCreateUpdate;
import org.openapitools.client.model.TaxInformationList;
import java.net.URI;
import java.util.UUID;
import org.openapitools.client.model.VerificationCreate;
import org.openapitools.client.model.VerificationDocument;
import org.openapitools.client.model.VerificationDocumentCreate;
import org.openapitools.client.model.VerificationList;
import org.openapitools.client.model.VerificationWithType;
import org.openapitools.client.model.VerifyTypeEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientApi {
    private ApiClient localVarApiClient;

    public ClientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clientAddressCreate
     * @param clientUuid  (required)
     * @param addressCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressCreateCall(UUID clientUuid, AddressCreate addressCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addressCreate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/addresses/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientAddressCreateValidateBeforeCall(UUID clientUuid, AddressCreate addressCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientAddressCreate(Async)");
        }
        
        // verify the required parameter 'addressCreate' is set
        if (addressCreate == null) {
            throw new ApiException("Missing the required parameter 'addressCreate' when calling clientAddressCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientAddressCreateCall(clientUuid, addressCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create an address for a client
     * @param clientUuid  (required)
     * @param addressCreate  (required)
     * @return AddressCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddressCreate clientAddressCreate(UUID clientUuid, AddressCreate addressCreate) throws ApiException {
        ApiResponse<AddressCreate> localVarResp = clientAddressCreateWithHttpInfo(clientUuid, addressCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create an address for a client
     * @param clientUuid  (required)
     * @param addressCreate  (required)
     * @return ApiResponse&lt;AddressCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressCreate> clientAddressCreateWithHttpInfo(UUID clientUuid, AddressCreate addressCreate) throws ApiException {
        okhttp3.Call localVarCall = clientAddressCreateValidateBeforeCall(clientUuid, addressCreate, null);
        Type localVarReturnType = new TypeToken<AddressCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create an address for a client
     * @param clientUuid  (required)
     * @param addressCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressCreateAsync(UUID clientUuid, AddressCreate addressCreate, final ApiCallback<AddressCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientAddressCreateValidateBeforeCall(clientUuid, addressCreate, _callback);
        Type localVarReturnType = new TypeToken<AddressCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientAddressDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/addresses/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientAddressDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientAddressDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientAddressDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientAddressDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientAddressDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientAddressDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientAddressDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientAddressDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientAddressDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientAddressPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedAddressUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressPartialUpdateCall(UUID clientUuid, UUID uuid, PatchedAddressUpdate patchedAddressUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedAddressUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/addresses/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientAddressPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, PatchedAddressUpdate patchedAddressUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientAddressPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientAddressPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientAddressPartialUpdateCall(clientUuid, uuid, patchedAddressUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedAddressUpdate  (optional)
     * @return AddressUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddressUpdate clientAddressPartialUpdate(UUID clientUuid, UUID uuid, PatchedAddressUpdate patchedAddressUpdate) throws ApiException {
        ApiResponse<AddressUpdate> localVarResp = clientAddressPartialUpdateWithHttpInfo(clientUuid, uuid, patchedAddressUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedAddressUpdate  (optional)
     * @return ApiResponse&lt;AddressUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressUpdate> clientAddressPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, PatchedAddressUpdate patchedAddressUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientAddressPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedAddressUpdate, null);
        Type localVarReturnType = new TypeToken<AddressUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedAddressUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressPartialUpdateAsync(UUID clientUuid, UUID uuid, PatchedAddressUpdate patchedAddressUpdate, final ApiCallback<AddressUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientAddressPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedAddressUpdate, _callback);
        Type localVarReturnType = new TypeToken<AddressUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientAddressRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/addresses/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientAddressRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientAddressRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientAddressRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientAddressRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return AddressList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddressList clientAddressRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<AddressList> localVarResp = clientAddressRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;AddressList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressList> clientAddressRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientAddressRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<AddressList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<AddressList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientAddressRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<AddressList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientAddressUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param addressUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressUpdateCall(UUID clientUuid, UUID uuid, AddressUpdate addressUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = addressUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/addresses/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientAddressUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, AddressUpdate addressUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientAddressUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientAddressUpdate(Async)");
        }
        
        // verify the required parameter 'addressUpdate' is set
        if (addressUpdate == null) {
            throw new ApiException("Missing the required parameter 'addressUpdate' when calling clientAddressUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientAddressUpdateCall(clientUuid, uuid, addressUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param addressUpdate  (required)
     * @return AddressUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddressUpdate clientAddressUpdate(UUID clientUuid, UUID uuid, AddressUpdate addressUpdate) throws ApiException {
        ApiResponse<AddressUpdate> localVarResp = clientAddressUpdateWithHttpInfo(clientUuid, uuid, addressUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param addressUpdate  (required)
     * @return ApiResponse&lt;AddressUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressUpdate> clientAddressUpdateWithHttpInfo(UUID clientUuid, UUID uuid, AddressUpdate addressUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientAddressUpdateValidateBeforeCall(clientUuid, uuid, addressUpdate, null);
        Type localVarReturnType = new TypeToken<AddressUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client address
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param addressUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressUpdateAsync(UUID clientUuid, UUID uuid, AddressUpdate addressUpdate, final ApiCallback<AddressUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientAddressUpdateValidateBeforeCall(clientUuid, uuid, addressUpdate, _callback);
        Type localVarReturnType = new TypeToken<AddressUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientAddressesList
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressesListCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/addresses/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientAddressesListValidateBeforeCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientAddressesList(Async)");
        }
        

        okhttp3.Call localVarCall = clientAddressesListCall(clientUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List address for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedAddressListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAddressListList clientAddressesList(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedAddressListList> localVarResp = clientAddressesListWithHttpInfo(clientUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List address for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedAddressListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAddressListList> clientAddressesListWithHttpInfo(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientAddressesListValidateBeforeCall(clientUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedAddressListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List address for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientAddressesListAsync(UUID clientUuid, Integer limit, Integer offset, final ApiCallback<PaginatedAddressListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientAddressesListValidateBeforeCall(clientUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAddressListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountCreate
     * @param clientUuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountCreateCall(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bankAccountCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountCreateValidateBeforeCall(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountCreateCall(clientUuid, bankAccountCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a bank account for a client
     * @param clientUuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @return BankAccountCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountCreateUpdate clientBankAccountCreate(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate) throws ApiException {
        ApiResponse<BankAccountCreateUpdate> localVarResp = clientBankAccountCreateWithHttpInfo(clientUuid, bankAccountCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a bank account for a client
     * @param clientUuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @return ApiResponse&lt;BankAccountCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountCreateUpdate> clientBankAccountCreateWithHttpInfo(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountCreateValidateBeforeCall(clientUuid, bankAccountCreateUpdate, null);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a bank account for a client
     * @param clientUuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountCreateAsync(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback<BankAccountCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountCreateValidateBeforeCall(clientUuid, bankAccountCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientBankAccountDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientBankAccountDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientBankAccountDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientBankAccountDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedBankAccountCreateUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountPartialUpdateCall(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedBankAccountCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientBankAccountPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountPartialUpdateCall(clientUuid, uuid, patchedBankAccountCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedBankAccountCreateUpdate  (optional)
     * @return BankAccountCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountCreateUpdate clientBankAccountPartialUpdate(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate) throws ApiException {
        ApiResponse<BankAccountCreateUpdate> localVarResp = clientBankAccountPartialUpdateWithHttpInfo(clientUuid, uuid, patchedBankAccountCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedBankAccountCreateUpdate  (optional)
     * @return ApiResponse&lt;BankAccountCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountCreateUpdate> clientBankAccountPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedBankAccountCreateUpdate, null);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedBankAccountCreateUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountPartialUpdateAsync(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate, final ApiCallback<BankAccountCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedBankAccountCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientBankAccountRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return BankAccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountList clientBankAccountRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<BankAccountList> localVarResp = clientBankAccountRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;BankAccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountList> clientBankAccountRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<BankAccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<BankAccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<BankAccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountUpdateCall(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bankAccountCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientBankAccountUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountUpdateCall(clientUuid, uuid, bankAccountCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @return BankAccountCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountCreateUpdate clientBankAccountUpdate(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate) throws ApiException {
        ApiResponse<BankAccountCreateUpdate> localVarResp = clientBankAccountUpdateWithHttpInfo(clientUuid, uuid, bankAccountCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @return ApiResponse&lt;BankAccountCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountCreateUpdate> clientBankAccountUpdateWithHttpInfo(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountUpdateValidateBeforeCall(clientUuid, uuid, bankAccountCreateUpdate, null);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountUpdateAsync(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback<BankAccountCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountUpdateValidateBeforeCall(clientUuid, uuid, bankAccountCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountsList
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountsListCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountsListValidateBeforeCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountsList(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountsListCall(clientUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List Bank Account for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedBankAccountListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedBankAccountListList clientBankAccountsList(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedBankAccountListList> localVarResp = clientBankAccountsListWithHttpInfo(clientUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List Bank Account for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedBankAccountListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedBankAccountListList> clientBankAccountsListWithHttpInfo(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountsListValidateBeforeCall(clientUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedBankAccountListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Bank Account for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountsListAsync(UUID clientUuid, Integer limit, Integer offset, final ApiCallback<PaginatedBankAccountListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountsListValidateBeforeCall(clientUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedBankAccountListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCompleteOnboarding
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param clientDetail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCompleteOnboardingCall(UUID clientUuid, UUID uuid, ClientDetail clientDetail, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = clientDetail;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{uuid}/onboarding/complete/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCompleteOnboardingValidateBeforeCall(UUID clientUuid, UUID uuid, ClientDetail clientDetail, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientCompleteOnboarding(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientCompleteOnboarding(Async)");
        }
        
        // verify the required parameter 'clientDetail' is set
        if (clientDetail == null) {
            throw new ApiException("Missing the required parameter 'clientDetail' when calling clientCompleteOnboarding(Async)");
        }
        

        okhttp3.Call localVarCall = clientCompleteOnboardingCall(clientUuid, uuid, clientDetail, _callback);
        return localVarCall;

    }

    /**
     * 
     * Complete onboarding for a client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param clientDetail  (required)
     * @return ClientDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ClientDetail clientCompleteOnboarding(UUID clientUuid, UUID uuid, ClientDetail clientDetail) throws ApiException {
        ApiResponse<ClientDetail> localVarResp = clientCompleteOnboardingWithHttpInfo(clientUuid, uuid, clientDetail);
        return localVarResp.getData();
    }

    /**
     * 
     * Complete onboarding for a client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param clientDetail  (required)
     * @return ApiResponse&lt;ClientDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientDetail> clientCompleteOnboardingWithHttpInfo(UUID clientUuid, UUID uuid, ClientDetail clientDetail) throws ApiException {
        okhttp3.Call localVarCall = clientCompleteOnboardingValidateBeforeCall(clientUuid, uuid, clientDetail, null);
        Type localVarReturnType = new TypeToken<ClientDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Complete onboarding for a client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param clientDetail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCompleteOnboardingAsync(UUID clientUuid, UUID uuid, ClientDetail clientDetail, final ApiCallback<ClientDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCompleteOnboardingValidateBeforeCall(clientUuid, uuid, clientDetail, _callback);
        Type localVarReturnType = new TypeToken<ClientDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientCreate
     * @param clientCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCreateCall(ClientCreate clientCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = clientCreate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientCreateValidateBeforeCall(ClientCreate clientCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientCreate' is set
        if (clientCreate == null) {
            throw new ApiException("Missing the required parameter 'clientCreate' when calling clientCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientCreateCall(clientCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a client
     * @param clientCreate  (required)
     * @return ClientCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ClientCreate clientCreate(ClientCreate clientCreate) throws ApiException {
        ApiResponse<ClientCreate> localVarResp = clientCreateWithHttpInfo(clientCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a client
     * @param clientCreate  (required)
     * @return ApiResponse&lt;ClientCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientCreate> clientCreateWithHttpInfo(ClientCreate clientCreate) throws ApiException {
        okhttp3.Call localVarCall = clientCreateValidateBeforeCall(clientCreate, null);
        Type localVarReturnType = new TypeToken<ClientCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a client
     * @param clientCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientCreateAsync(ClientCreate clientCreate, final ApiCallback<ClientCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientCreateValidateBeforeCall(clientCreate, _callback);
        Type localVarReturnType = new TypeToken<ClientCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientDocumentCreate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param name  (required)
     * @param docType  (required)
     * @param path  (required)
     * @param description  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientDocumentCreateCall(UUID clientUuid, UUID uuid, String name, DocTypeEnum docType, URI path, String description, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/documents/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarFormParams.put("uuid", uuid);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (docType != null) {
            localVarFormParams.put("doc_type", docType);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (path != null) {
            localVarFormParams.put("path", path);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientDocumentCreateValidateBeforeCall(UUID clientUuid, UUID uuid, String name, DocTypeEnum docType, URI path, String description, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientDocumentCreate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientDocumentCreate(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling clientDocumentCreate(Async)");
        }
        
        // verify the required parameter 'docType' is set
        if (docType == null) {
            throw new ApiException("Missing the required parameter 'docType' when calling clientDocumentCreate(Async)");
        }
        
        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling clientDocumentCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientDocumentCreateCall(clientUuid, uuid, name, docType, path, description, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a document for a client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param name  (required)
     * @param docType  (required)
     * @param path  (required)
     * @param description  (optional)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Document clientDocumentCreate(UUID clientUuid, UUID uuid, String name, DocTypeEnum docType, URI path, String description) throws ApiException {
        ApiResponse<Document> localVarResp = clientDocumentCreateWithHttpInfo(clientUuid, uuid, name, docType, path, description);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a document for a client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param name  (required)
     * @param docType  (required)
     * @param path  (required)
     * @param description  (optional)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> clientDocumentCreateWithHttpInfo(UUID clientUuid, UUID uuid, String name, DocTypeEnum docType, URI path, String description) throws ApiException {
        okhttp3.Call localVarCall = clientDocumentCreateValidateBeforeCall(clientUuid, uuid, name, docType, path, description, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a document for a client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param name  (required)
     * @param docType  (required)
     * @param path  (required)
     * @param description  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientDocumentCreateAsync(UUID clientUuid, UUID uuid, String name, DocTypeEnum docType, URI path, String description, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientDocumentCreateValidateBeforeCall(clientUuid, uuid, name, docType, path, description, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientDocumentDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientDocumentDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientDocumentDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientDocumentDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientDocumentDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientDocumentDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientDocumentDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientDocumentDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientDocumentDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientDocumentDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientDocumentDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientDocumentDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientDocumentList
     * @param clientUuid  (required)
     * @param client  (optional)
     * @param description  (optional)
     * @param docType  (optional)
     * @param extraData Additional document attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientDocumentListCall(UUID clientUuid, Integer client, String description, List<String> docType, Map<String, Object> extraData, Integer limit, String name, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/documents/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (client != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client", client));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (docType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "doc_type", docType));
        }

        if (extraData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra_data", extraData));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientDocumentListValidateBeforeCall(UUID clientUuid, Integer client, String description, List<String> docType, Map<String, Object> extraData, Integer limit, String name, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientDocumentList(Async)");
        }
        

        okhttp3.Call localVarCall = clientDocumentListCall(clientUuid, client, description, docType, extraData, limit, name, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List Document for a client
     * @param clientUuid  (required)
     * @param client  (optional)
     * @param description  (optional)
     * @param docType  (optional)
     * @param extraData Additional document attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedDocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedDocumentList clientDocumentList(UUID clientUuid, Integer client, String description, List<String> docType, Map<String, Object> extraData, Integer limit, String name, Integer offset) throws ApiException {
        ApiResponse<PaginatedDocumentList> localVarResp = clientDocumentListWithHttpInfo(clientUuid, client, description, docType, extraData, limit, name, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List Document for a client
     * @param clientUuid  (required)
     * @param client  (optional)
     * @param description  (optional)
     * @param docType  (optional)
     * @param extraData Additional document attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedDocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedDocumentList> clientDocumentListWithHttpInfo(UUID clientUuid, Integer client, String description, List<String> docType, Map<String, Object> extraData, Integer limit, String name, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientDocumentListValidateBeforeCall(clientUuid, client, description, docType, extraData, limit, name, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedDocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Document for a client
     * @param clientUuid  (required)
     * @param client  (optional)
     * @param description  (optional)
     * @param docType  (optional)
     * @param extraData Additional document attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param name  (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientDocumentListAsync(UUID clientUuid, Integer client, String description, List<String> docType, Map<String, Object> extraData, Integer limit, String name, Integer offset, final ApiCallback<PaginatedDocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientDocumentListValidateBeforeCall(clientUuid, client, description, docType, extraData, limit, name, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedDocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientDocumentRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientDocumentRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientDocumentRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientDocumentRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientDocumentRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientDocumentRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Document clientDocumentRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<Document> localVarResp = clientDocumentRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Document> clientDocumentRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientDocumentRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientDocumentRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<Document> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientDocumentRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientList
     * @param externalCustodianId  (optional)
     * @param extraData Additional client attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param ordering Ordering (optional)
     * @param search A search term. (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientListCall(String externalCustodianId, Map<String, Object> extraData, Integer limit, Integer offset, List<String> ordering, String search, String status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalCustodianId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_custodian_id", externalCustodianId));
        }

        if (extraData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extra_data", extraData));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (ordering != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ordering", ordering));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientListValidateBeforeCall(String externalCustodianId, Map<String, Object> extraData, Integer limit, Integer offset, List<String> ordering, String search, String status, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = clientListCall(externalCustodianId, extraData, limit, offset, ordering, search, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * List client for a Relationship manager
     * @param externalCustodianId  (optional)
     * @param extraData Additional client attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param ordering Ordering (optional)
     * @param search A search term. (optional)
     * @param status  (optional)
     * @return PaginatedClientDetailList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedClientDetailList clientList(String externalCustodianId, Map<String, Object> extraData, Integer limit, Integer offset, List<String> ordering, String search, String status) throws ApiException {
        ApiResponse<PaginatedClientDetailList> localVarResp = clientListWithHttpInfo(externalCustodianId, extraData, limit, offset, ordering, search, status);
        return localVarResp.getData();
    }

    /**
     * 
     * List client for a Relationship manager
     * @param externalCustodianId  (optional)
     * @param extraData Additional client attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param ordering Ordering (optional)
     * @param search A search term. (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;PaginatedClientDetailList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedClientDetailList> clientListWithHttpInfo(String externalCustodianId, Map<String, Object> extraData, Integer limit, Integer offset, List<String> ordering, String search, String status) throws ApiException {
        okhttp3.Call localVarCall = clientListValidateBeforeCall(externalCustodianId, extraData, limit, offset, ordering, search, status, null);
        Type localVarReturnType = new TypeToken<PaginatedClientDetailList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List client for a Relationship manager
     * @param externalCustodianId  (optional)
     * @param extraData Additional client attributes for the specific portal (optional)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param ordering Ordering (optional)
     * @param search A search term. (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientListAsync(String externalCustodianId, Map<String, Object> extraData, Integer limit, Integer offset, List<String> ordering, String search, String status, final ApiCallback<PaginatedClientDetailList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientListValidateBeforeCall(externalCustodianId, extraData, limit, offset, ordering, search, status, _callback);
        Type localVarReturnType = new TypeToken<PaginatedClientDetailList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationalityCreate
     * @param clientUuid  (required)
     * @param nationalityCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationalityCreateCall(UUID clientUuid, NationalityCreate nationalityCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nationalityCreate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationalityCreateValidateBeforeCall(UUID clientUuid, NationalityCreate nationalityCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationalityCreate(Async)");
        }
        
        // verify the required parameter 'nationalityCreate' is set
        if (nationalityCreate == null) {
            throw new ApiException("Missing the required parameter 'nationalityCreate' when calling clientNationalityCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationalityCreateCall(clientUuid, nationalityCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create nationality for a client
     * @param clientUuid  (required)
     * @param nationalityCreate  (required)
     * @return NationalityCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NationalityCreate clientNationalityCreate(UUID clientUuid, NationalityCreate nationalityCreate) throws ApiException {
        ApiResponse<NationalityCreate> localVarResp = clientNationalityCreateWithHttpInfo(clientUuid, nationalityCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create nationality for a client
     * @param clientUuid  (required)
     * @param nationalityCreate  (required)
     * @return ApiResponse&lt;NationalityCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NationalityCreate> clientNationalityCreateWithHttpInfo(UUID clientUuid, NationalityCreate nationalityCreate) throws ApiException {
        okhttp3.Call localVarCall = clientNationalityCreateValidateBeforeCall(clientUuid, nationalityCreate, null);
        Type localVarReturnType = new TypeToken<NationalityCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create nationality for a client
     * @param clientUuid  (required)
     * @param nationalityCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationalityCreateAsync(UUID clientUuid, NationalityCreate nationalityCreate, final ApiCallback<NationalityCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationalityCreateValidateBeforeCall(clientUuid, nationalityCreate, _callback);
        Type localVarReturnType = new TypeToken<NationalityCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlitiesList
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlitiesListCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlitiesListValidateBeforeCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlitiesList(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlitiesListCall(clientUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List nationlities for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedNationalityListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedNationalityListList clientNationlitiesList(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedNationalityListList> localVarResp = clientNationlitiesListWithHttpInfo(clientUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List nationlities for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedNationalityListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedNationalityListList> clientNationlitiesListWithHttpInfo(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientNationlitiesListValidateBeforeCall(clientUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedNationalityListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List nationlities for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlitiesListAsync(UUID clientUuid, Integer limit, Integer offset, final ApiCallback<PaginatedNationalityListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlitiesListValidateBeforeCall(clientUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedNationalityListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlityDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlityDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlityDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientNationlityDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlityDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientNationlityDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientNationlityDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientNationlityDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientNationlityDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlityDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlityPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedNationalityUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityPartialUpdateCall(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedNationalityUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlityPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlityPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientNationlityPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlityPartialUpdateCall(clientUuid, uuid, patchedNationalityUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedNationalityUpdate  (optional)
     * @return NationalityUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NationalityUpdate clientNationlityPartialUpdate(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate) throws ApiException {
        ApiResponse<NationalityUpdate> localVarResp = clientNationlityPartialUpdateWithHttpInfo(clientUuid, uuid, patchedNationalityUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedNationalityUpdate  (optional)
     * @return ApiResponse&lt;NationalityUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NationalityUpdate> clientNationlityPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientNationlityPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedNationalityUpdate, null);
        Type localVarReturnType = new TypeToken<NationalityUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedNationalityUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityPartialUpdateAsync(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate, final ApiCallback<NationalityUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlityPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedNationalityUpdate, _callback);
        Type localVarReturnType = new TypeToken<NationalityUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlityRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlityRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlityRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientNationlityRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlityRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return NationalityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NationalityList clientNationlityRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<NationalityList> localVarResp = clientNationlityRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;NationalityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NationalityList> clientNationlityRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientNationlityRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<NationalityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<NationalityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlityRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<NationalityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlityUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param nationalityUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityUpdateCall(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nationalityUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlityUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlityUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientNationlityUpdate(Async)");
        }
        
        // verify the required parameter 'nationalityUpdate' is set
        if (nationalityUpdate == null) {
            throw new ApiException("Missing the required parameter 'nationalityUpdate' when calling clientNationlityUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlityUpdateCall(clientUuid, uuid, nationalityUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param nationalityUpdate  (required)
     * @return NationalityUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NationalityUpdate clientNationlityUpdate(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate) throws ApiException {
        ApiResponse<NationalityUpdate> localVarResp = clientNationlityUpdateWithHttpInfo(clientUuid, uuid, nationalityUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param nationalityUpdate  (required)
     * @return ApiResponse&lt;NationalityUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NationalityUpdate> clientNationlityUpdateWithHttpInfo(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientNationlityUpdateValidateBeforeCall(clientUuid, uuid, nationalityUpdate, null);
        Type localVarReturnType = new TypeToken<NationalityUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param nationalityUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityUpdateAsync(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate, final ApiCallback<NationalityUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlityUpdateValidateBeforeCall(clientUuid, uuid, nationalityUpdate, _callback);
        Type localVarReturnType = new TypeToken<NationalityUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientPartialUpdate
     * @param uuid  (required)
     * @param patchedApplicationClientUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientPartialUpdateCall(UUID uuid, PatchedApplicationClientUpdate patchedApplicationClientUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedApplicationClientUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientPartialUpdateValidateBeforeCall(UUID uuid, PatchedApplicationClientUpdate patchedApplicationClientUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientPartialUpdateCall(uuid, patchedApplicationClientUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client
     * @param uuid  (required)
     * @param patchedApplicationClientUpdate  (optional)
     * @return ApplicationClientUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationClientUpdate clientPartialUpdate(UUID uuid, PatchedApplicationClientUpdate patchedApplicationClientUpdate) throws ApiException {
        ApiResponse<ApplicationClientUpdate> localVarResp = clientPartialUpdateWithHttpInfo(uuid, patchedApplicationClientUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client
     * @param uuid  (required)
     * @param patchedApplicationClientUpdate  (optional)
     * @return ApiResponse&lt;ApplicationClientUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationClientUpdate> clientPartialUpdateWithHttpInfo(UUID uuid, PatchedApplicationClientUpdate patchedApplicationClientUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientPartialUpdateValidateBeforeCall(uuid, patchedApplicationClientUpdate, null);
        Type localVarReturnType = new TypeToken<ApplicationClientUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client
     * @param uuid  (required)
     * @param patchedApplicationClientUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientPartialUpdateAsync(UUID uuid, PatchedApplicationClientUpdate patchedApplicationClientUpdate, final ApiCallback<ApplicationClientUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientPartialUpdateValidateBeforeCall(uuid, patchedApplicationClientUpdate, _callback);
        Type localVarReturnType = new TypeToken<ApplicationClientUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientRetrieve
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRetrieveCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientRetrieveValidateBeforeCall(UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientRetrieveCall(uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client
     * @param uuid  (required)
     * @return ClientDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ClientDetail clientRetrieve(UUID uuid) throws ApiException {
        ApiResponse<ClientDetail> localVarResp = clientRetrieveWithHttpInfo(uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client
     * @param uuid  (required)
     * @return ApiResponse&lt;ClientDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientDetail> clientRetrieveWithHttpInfo(UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientRetrieveValidateBeforeCall(uuid, null);
        Type localVarReturnType = new TypeToken<ClientDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRetrieveAsync(UUID uuid, final ApiCallback<ClientDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientRetrieveValidateBeforeCall(uuid, _callback);
        Type localVarReturnType = new TypeToken<ClientDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientRiskAssessmentCreate
     * @param clientUuid  (required)
     * @param assessment  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentCreateCall(UUID clientUuid, Assessment assessment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = assessment;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/risk-assessments/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientRiskAssessmentCreateValidateBeforeCall(UUID clientUuid, Assessment assessment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentCreate(Async)");
        }
        
        // verify the required parameter 'assessment' is set
        if (assessment == null) {
            throw new ApiException("Missing the required parameter 'assessment' when calling clientRiskAssessmentCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientRiskAssessmentCreateCall(clientUuid, assessment, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a risk assessment for a client
     * @param clientUuid  (required)
     * @param assessment  (required)
     * @return Assessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Assessment clientRiskAssessmentCreate(UUID clientUuid, Assessment assessment) throws ApiException {
        ApiResponse<Assessment> localVarResp = clientRiskAssessmentCreateWithHttpInfo(clientUuid, assessment);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a risk assessment for a client
     * @param clientUuid  (required)
     * @param assessment  (required)
     * @return ApiResponse&lt;Assessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assessment> clientRiskAssessmentCreateWithHttpInfo(UUID clientUuid, Assessment assessment) throws ApiException {
        okhttp3.Call localVarCall = clientRiskAssessmentCreateValidateBeforeCall(clientUuid, assessment, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a risk assessment for a client
     * @param clientUuid  (required)
     * @param assessment  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentCreateAsync(UUID clientUuid, Assessment assessment, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientRiskAssessmentCreateValidateBeforeCall(clientUuid, assessment, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientRiskAssessmentDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientRiskAssessmentDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientRiskAssessmentDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientRiskAssessmentDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientRiskAssessmentDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientRiskAssessmentDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientRiskAssessmentDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientRiskAssessmentDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientRiskAssessmentDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientRiskAssessmentList
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentListCall(UUID clientUuid, Integer limit, Integer offset, List<String> status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/risk-assessments/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientRiskAssessmentListValidateBeforeCall(UUID clientUuid, Integer limit, Integer offset, List<String> status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentList(Async)");
        }
        

        okhttp3.Call localVarCall = clientRiskAssessmentListCall(clientUuid, limit, offset, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * List Risk Assessment for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @return PaginatedAssessmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedAssessmentList clientRiskAssessmentList(UUID clientUuid, Integer limit, Integer offset, List<String> status) throws ApiException {
        ApiResponse<PaginatedAssessmentList> localVarResp = clientRiskAssessmentListWithHttpInfo(clientUuid, limit, offset, status);
        return localVarResp.getData();
    }

    /**
     * 
     * List Risk Assessment for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;PaginatedAssessmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedAssessmentList> clientRiskAssessmentListWithHttpInfo(UUID clientUuid, Integer limit, Integer offset, List<String> status) throws ApiException {
        okhttp3.Call localVarCall = clientRiskAssessmentListValidateBeforeCall(clientUuid, limit, offset, status, null);
        Type localVarReturnType = new TypeToken<PaginatedAssessmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Risk Assessment for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentListAsync(UUID clientUuid, Integer limit, Integer offset, List<String> status, final ApiCallback<PaginatedAssessmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientRiskAssessmentListValidateBeforeCall(clientUuid, limit, offset, status, _callback);
        Type localVarReturnType = new TypeToken<PaginatedAssessmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientRiskAssessmentPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedAssessment  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentPartialUpdateCall(UUID clientUuid, UUID uuid, PatchedAssessment patchedAssessment, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedAssessment;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientRiskAssessmentPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, PatchedAssessment patchedAssessment, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientRiskAssessmentPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientRiskAssessmentPartialUpdateCall(clientUuid, uuid, patchedAssessment, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedAssessment  (optional)
     * @return Assessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Assessment clientRiskAssessmentPartialUpdate(UUID clientUuid, UUID uuid, PatchedAssessment patchedAssessment) throws ApiException {
        ApiResponse<Assessment> localVarResp = clientRiskAssessmentPartialUpdateWithHttpInfo(clientUuid, uuid, patchedAssessment);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedAssessment  (optional)
     * @return ApiResponse&lt;Assessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assessment> clientRiskAssessmentPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, PatchedAssessment patchedAssessment) throws ApiException {
        okhttp3.Call localVarCall = clientRiskAssessmentPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedAssessment, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedAssessment  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentPartialUpdateAsync(UUID clientUuid, UUID uuid, PatchedAssessment patchedAssessment, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientRiskAssessmentPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedAssessment, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientRiskAssessmentRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientRiskAssessmentRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientRiskAssessmentRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientRiskAssessmentRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return Assessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Assessment clientRiskAssessmentRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<Assessment> localVarResp = clientRiskAssessmentRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Assessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assessment> clientRiskAssessmentRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientRiskAssessmentRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client risk assessment
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientRiskAssessmentRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientRiskAssessmentRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTWRRPerformance
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTWRRPerformanceCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{uuid}/performance/twrr/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTWRRPerformanceValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTWRRPerformance(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTWRRPerformance(Async)");
        }
        

        okhttp3.Call localVarCall = clientTWRRPerformanceCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Calculate TWRR Performance for client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ClientPerformance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ClientPerformance clientTWRRPerformance(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<ClientPerformance> localVarResp = clientTWRRPerformanceWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Calculate TWRR Performance for client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;ClientPerformance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientPerformance> clientTWRRPerformanceWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientTWRRPerformanceValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<ClientPerformance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Calculate TWRR Performance for client
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTWRRPerformanceAsync(UUID clientUuid, UUID uuid, final ApiCallback<ClientPerformance> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTWRRPerformanceValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<ClientPerformance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationCreate
     * @param clientUuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationCreateCall(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taxInformationCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationCreateValidateBeforeCall(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationCreate(Async)");
        }
        
        // verify the required parameter 'taxInformationCreateUpdate' is set
        if (taxInformationCreateUpdate == null) {
            throw new ApiException("Missing the required parameter 'taxInformationCreateUpdate' when calling clientTaxInformationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationCreateCall(clientUuid, taxInformationCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a tax inforation for a client
     * @param clientUuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @return TaxInformationCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaxInformationCreateUpdate clientTaxInformationCreate(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate) throws ApiException {
        ApiResponse<TaxInformationCreateUpdate> localVarResp = clientTaxInformationCreateWithHttpInfo(clientUuid, taxInformationCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a tax inforation for a client
     * @param clientUuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @return ApiResponse&lt;TaxInformationCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxInformationCreateUpdate> clientTaxInformationCreateWithHttpInfo(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationCreateValidateBeforeCall(clientUuid, taxInformationCreateUpdate, null);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a tax inforation for a client
     * @param clientUuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationCreateAsync(UUID clientUuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback<TaxInformationCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationCreateValidateBeforeCall(clientUuid, taxInformationCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTaxInformationDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientTaxInformationDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientTaxInformationDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientTaxInformationDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationList
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationListCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationListValidateBeforeCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationList(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationListCall(clientUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List tax information for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedTaxInformationListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedTaxInformationListList clientTaxInformationList(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedTaxInformationListList> localVarResp = clientTaxInformationListWithHttpInfo(clientUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List tax information for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedTaxInformationListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedTaxInformationListList> clientTaxInformationListWithHttpInfo(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationListValidateBeforeCall(clientUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedTaxInformationListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List tax information for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationListAsync(UUID clientUuid, Integer limit, Integer offset, final ApiCallback<PaginatedTaxInformationListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationListValidateBeforeCall(clientUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedTaxInformationListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedTaxInformationCreateUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationPartialUpdateCall(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedTaxInformationCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTaxInformationPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationPartialUpdateCall(clientUuid, uuid, patchedTaxInformationCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedTaxInformationCreateUpdate  (optional)
     * @return TaxInformationCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaxInformationCreateUpdate clientTaxInformationPartialUpdate(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate) throws ApiException {
        ApiResponse<TaxInformationCreateUpdate> localVarResp = clientTaxInformationPartialUpdateWithHttpInfo(clientUuid, uuid, patchedTaxInformationCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedTaxInformationCreateUpdate  (optional)
     * @return ApiResponse&lt;TaxInformationCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxInformationCreateUpdate> clientTaxInformationPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedTaxInformationCreateUpdate, null);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedTaxInformationCreateUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationPartialUpdateAsync(UUID clientUuid, UUID uuid, PatchedTaxInformationCreateUpdate patchedTaxInformationCreateUpdate, final ApiCallback<TaxInformationCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedTaxInformationCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTaxInformationRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return TaxInformationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaxInformationList clientTaxInformationRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<TaxInformationList> localVarResp = clientTaxInformationRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;TaxInformationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxInformationList> clientTaxInformationRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<TaxInformationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<TaxInformationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<TaxInformationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientTaxInformationUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationUpdateCall(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = taxInformationCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientTaxInformationUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientTaxInformationUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientTaxInformationUpdate(Async)");
        }
        
        // verify the required parameter 'taxInformationCreateUpdate' is set
        if (taxInformationCreateUpdate == null) {
            throw new ApiException("Missing the required parameter 'taxInformationCreateUpdate' when calling clientTaxInformationUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientTaxInformationUpdateCall(clientUuid, uuid, taxInformationCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @return TaxInformationCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TaxInformationCreateUpdate clientTaxInformationUpdate(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate) throws ApiException {
        ApiResponse<TaxInformationCreateUpdate> localVarResp = clientTaxInformationUpdateWithHttpInfo(clientUuid, uuid, taxInformationCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @return ApiResponse&lt;TaxInformationCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaxInformationCreateUpdate> clientTaxInformationUpdateWithHttpInfo(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientTaxInformationUpdateValidateBeforeCall(clientUuid, uuid, taxInformationCreateUpdate, null);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client tax inforation
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param taxInformationCreateUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientTaxInformationUpdateAsync(UUID clientUuid, UUID uuid, TaxInformationCreateUpdate taxInformationCreateUpdate, final ApiCallback<TaxInformationCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientTaxInformationUpdateValidateBeforeCall(clientUuid, uuid, taxInformationCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<TaxInformationCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientUpdate
     * @param uuid  (required)
     * @param applicationClientUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientUpdateCall(UUID uuid, ApplicationClientUpdate applicationClientUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applicationClientUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{uuid}/"
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientUpdateValidateBeforeCall(UUID uuid, ApplicationClientUpdate applicationClientUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientUpdate(Async)");
        }
        
        // verify the required parameter 'applicationClientUpdate' is set
        if (applicationClientUpdate == null) {
            throw new ApiException("Missing the required parameter 'applicationClientUpdate' when calling clientUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientUpdateCall(uuid, applicationClientUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client
     * @param uuid  (required)
     * @param applicationClientUpdate  (required)
     * @return ApplicationClientUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationClientUpdate clientUpdate(UUID uuid, ApplicationClientUpdate applicationClientUpdate) throws ApiException {
        ApiResponse<ApplicationClientUpdate> localVarResp = clientUpdateWithHttpInfo(uuid, applicationClientUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client
     * @param uuid  (required)
     * @param applicationClientUpdate  (required)
     * @return ApiResponse&lt;ApplicationClientUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationClientUpdate> clientUpdateWithHttpInfo(UUID uuid, ApplicationClientUpdate applicationClientUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientUpdateValidateBeforeCall(uuid, applicationClientUpdate, null);
        Type localVarReturnType = new TypeToken<ApplicationClientUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client
     * @param uuid  (required)
     * @param applicationClientUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientUpdateAsync(UUID uuid, ApplicationClientUpdate applicationClientUpdate, final ApiCallback<ApplicationClientUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientUpdateValidateBeforeCall(uuid, applicationClientUpdate, _callback);
        Type localVarReturnType = new TypeToken<ApplicationClientUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationCreate
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param verificationCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationCreateCall(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = verificationCreate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationCreateValidateBeforeCall(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationCreate(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationCreate(Async)");
        }
        
        // verify the required parameter 'verificationCreate' is set
        if (verificationCreate == null) {
            throw new ApiException("Missing the required parameter 'verificationCreate' when calling clientVerificationCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationCreateCall(clientUuid, verifyTypeCode, verificationCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param verificationCreate  (required)
     * @return VerificationCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationCreate clientVerificationCreate(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate) throws ApiException {
        ApiResponse<VerificationCreate> localVarResp = clientVerificationCreateWithHttpInfo(clientUuid, verifyTypeCode, verificationCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param verificationCreate  (required)
     * @return ApiResponse&lt;VerificationCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationCreate> clientVerificationCreateWithHttpInfo(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationCreateValidateBeforeCall(clientUuid, verifyTypeCode, verificationCreate, null);
        Type localVarReturnType = new TypeToken<VerificationCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param verificationCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationCreateAsync(UUID clientUuid, String verifyTypeCode, VerificationCreate verificationCreate, final ApiCallback<VerificationCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationCreateValidateBeforeCall(clientUuid, verifyTypeCode, verificationCreate, _callback);
        Type localVarReturnType = new TypeToken<VerificationCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentCreate
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid  (required)
     * @param verifyType  (required)
     * @param created  (required)
     * @param updated  (required)
     * @param verificationDocuments  (required)
     * @param status  (optional)
     * @param result  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentCreateCall(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid != null) {
            localVarFormParams.put("uuid", uuid);
        }

        if (verifyType != null) {
            localVarFormParams.put("verify_type", verifyType);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (result != null) {
            localVarFormParams.put("result", result);
        }

        if (created != null) {
            localVarFormParams.put("created", created);
        }

        if (updated != null) {
            localVarFormParams.put("updated", updated);
        }

        if (verificationDocuments != null) {
            localVarFormParams.put("verification_documents", verificationDocuments);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentCreateValidateBeforeCall(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'verifyType' is set
        if (verifyType == null) {
            throw new ApiException("Missing the required parameter 'verifyType' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'created' is set
        if (created == null) {
            throw new ApiException("Missing the required parameter 'created' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'updated' is set
        if (updated == null) {
            throw new ApiException("Missing the required parameter 'updated' when calling clientVerificationDocumentCreate(Async)");
        }
        
        // verify the required parameter 'verificationDocuments' is set
        if (verificationDocuments == null) {
            throw new ApiException("Missing the required parameter 'verificationDocuments' when calling clientVerificationDocumentCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentCreateCall(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid  (required)
     * @param verifyType  (required)
     * @param created  (required)
     * @param updated  (required)
     * @param verificationDocuments  (required)
     * @param status  (optional)
     * @param result  (optional)
     * @return VerificationWithType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationWithType clientVerificationDocumentCreate(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result) throws ApiException {
        ApiResponse<VerificationWithType> localVarResp = clientVerificationDocumentCreateWithHttpInfo(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid  (required)
     * @param verifyType  (required)
     * @param created  (required)
     * @param updated  (required)
     * @param verificationDocuments  (required)
     * @param status  (optional)
     * @param result  (optional)
     * @return ApiResponse&lt;VerificationWithType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationWithType> clientVerificationDocumentCreateWithHttpInfo(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentCreateValidateBeforeCall(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result, null);
        Type localVarReturnType = new TypeToken<VerificationWithType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid  (required)
     * @param verifyType  (required)
     * @param created  (required)
     * @param updated  (required)
     * @param verificationDocuments  (required)
     * @param status  (optional)
     * @param result  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentCreateAsync(UUID clientUuid, String verifyTypeCode, UUID uuid, VerifyTypeEnum verifyType, OffsetDateTime created, OffsetDateTime updated, List<VerificationDocumentCreate> verificationDocuments, StatusBd7Enum status, OneOfResultEnumBlankEnum result, final ApiCallback<VerificationWithType> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentCreateValidateBeforeCall(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, status, result, _callback);
        Type localVarReturnType = new TypeToken<VerificationWithType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentDeleteCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentDelete(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentDeleteCall(clientUuid, uuid, verifyTypeCode, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client verificatoin document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientVerificationDocumentDelete(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        clientVerificationDocumentDeleteWithHttpInfo(clientUuid, uuid, verifyTypeCode);
    }

    /**
     * 
     * Delete a client verificatoin document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientVerificationDocumentDeleteWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentDeleteValidateBeforeCall(clientUuid, uuid, verifyTypeCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client verificatoin document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentDeleteAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentDeleteValidateBeforeCall(clientUuid, uuid, verifyTypeCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentList
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentListCall(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentListValidateBeforeCall(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentList(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentList(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentListCall(clientUuid, verifyTypeCode, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List Verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedVerificationDocumentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedVerificationDocumentList clientVerificationDocumentList(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedVerificationDocumentList> localVarResp = clientVerificationDocumentListWithHttpInfo(clientUuid, verifyTypeCode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List Verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedVerificationDocumentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedVerificationDocumentList> clientVerificationDocumentListWithHttpInfo(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentListValidateBeforeCall(clientUuid, verifyTypeCode, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedVerificationDocumentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Verification Document for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentListAsync(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback<PaginatedVerificationDocumentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentListValidateBeforeCall(clientUuid, verifyTypeCode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedVerificationDocumentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (optional)
     * @param documentType  (optional)
     * @param documentFront  (optional)
     * @param documentBack  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentPartialUpdateCall(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid2 != null) {
            localVarFormParams.put("uuid", uuid2);
        }

        if (documentType != null) {
            localVarFormParams.put("document_type", documentType);
        }

        if (documentFront != null) {
            localVarFormParams.put("document_front", documentFront);
        }

        if (documentBack != null) {
            localVarFormParams.put("document_back", documentBack);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentPartialUpdate(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentPartialUpdateCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (optional)
     * @param documentType  (optional)
     * @param documentFront  (optional)
     * @param documentBack  (optional)
     * @return VerificationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationDocument clientVerificationDocumentPartialUpdate(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack) throws ApiException {
        ApiResponse<VerificationDocument> localVarResp = clientVerificationDocumentPartialUpdateWithHttpInfo(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (optional)
     * @param documentType  (optional)
     * @param documentFront  (optional)
     * @param documentBack  (optional)
     * @return ApiResponse&lt;VerificationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationDocument> clientVerificationDocumentPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentPartialUpdateValidateBeforeCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, null);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (optional)
     * @param documentType  (optional)
     * @param documentFront  (optional)
     * @param documentBack  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentPartialUpdateAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback<VerificationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentPartialUpdateValidateBeforeCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, _callback);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentRetrieveCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentRetrieve(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentRetrieveCall(clientUuid, uuid, verifyTypeCode, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return VerificationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationDocument clientVerificationDocumentRetrieve(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        ApiResponse<VerificationDocument> localVarResp = clientVerificationDocumentRetrieveWithHttpInfo(clientUuid, uuid, verifyTypeCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return ApiResponse&lt;VerificationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationDocument> clientVerificationDocumentRetrieveWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentRetrieveValidateBeforeCall(clientUuid, uuid, verifyTypeCode, null);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentRetrieveAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback<VerificationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentRetrieveValidateBeforeCall(clientUuid, uuid, verifyTypeCode, _callback);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationDocumentUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (required)
     * @param documentType  (required)
     * @param documentFront  (required)
     * @param documentBack  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentUpdateCall(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uuid2 != null) {
            localVarFormParams.put("uuid", uuid2);
        }

        if (documentType != null) {
            localVarFormParams.put("document_type", documentType);
        }

        if (documentFront != null) {
            localVarFormParams.put("document_front", documentFront);
        }

        if (documentBack != null) {
            localVarFormParams.put("document_back", documentBack);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationDocumentUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'uuid2' is set
        if (uuid2 == null) {
            throw new ApiException("Missing the required parameter 'uuid2' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'documentFront' is set
        if (documentFront == null) {
            throw new ApiException("Missing the required parameter 'documentFront' when calling clientVerificationDocumentUpdate(Async)");
        }
        
        // verify the required parameter 'documentBack' is set
        if (documentBack == null) {
            throw new ApiException("Missing the required parameter 'documentBack' when calling clientVerificationDocumentUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationDocumentUpdateCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (required)
     * @param documentType  (required)
     * @param documentFront  (required)
     * @param documentBack  (required)
     * @return VerificationDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationDocument clientVerificationDocumentUpdate(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack) throws ApiException {
        ApiResponse<VerificationDocument> localVarResp = clientVerificationDocumentUpdateWithHttpInfo(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (required)
     * @param documentType  (required)
     * @param documentFront  (required)
     * @param documentBack  (required)
     * @return ApiResponse&lt;VerificationDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationDocument> clientVerificationDocumentUpdateWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationDocumentUpdateValidateBeforeCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, null);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client verification document
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param uuid2  (required)
     * @param documentType  (required)
     * @param documentFront  (required)
     * @param documentBack  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationDocumentUpdateAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, UUID uuid2, DocumentTypeEnum documentType, String documentFront, String documentBack, final ApiCallback<VerificationDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationDocumentUpdateValidateBeforeCall(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, _callback);
        Type localVarReturnType = new TypeToken<VerificationDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationList
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationListCall(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationListValidateBeforeCall(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationList(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationList(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationListCall(clientUuid, verifyTypeCode, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List Verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedVerificationListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedVerificationListList clientVerificationList(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedVerificationListList> localVarResp = clientVerificationListWithHttpInfo(clientUuid, verifyTypeCode, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List Verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedVerificationListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedVerificationListList> clientVerificationListWithHttpInfo(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationListValidateBeforeCall(clientUuid, verifyTypeCode, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedVerificationListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Verification for a client
     * @param clientUuid  (required)
     * @param verifyTypeCode  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationListAsync(UUID clientUuid, String verifyTypeCode, Integer limit, Integer offset, final ApiCallback<PaginatedVerificationListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationListValidateBeforeCall(clientUuid, verifyTypeCode, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedVerificationListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientVerificationRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationRetrieveCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "verify_type_code" + "\\}", localVarApiClient.escapeString(verifyTypeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientVerificationRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientVerificationRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientVerificationRetrieve(Async)");
        }
        
        // verify the required parameter 'verifyTypeCode' is set
        if (verifyTypeCode == null) {
            throw new ApiException("Missing the required parameter 'verifyTypeCode' when calling clientVerificationRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientVerificationRetrieveCall(clientUuid, uuid, verifyTypeCode, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client verification 
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return VerificationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerificationList clientVerificationRetrieve(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        ApiResponse<VerificationList> localVarResp = clientVerificationRetrieveWithHttpInfo(clientUuid, uuid, verifyTypeCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client verification 
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @return ApiResponse&lt;VerificationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerificationList> clientVerificationRetrieveWithHttpInfo(UUID clientUuid, UUID uuid, String verifyTypeCode) throws ApiException {
        okhttp3.Call localVarCall = clientVerificationRetrieveValidateBeforeCall(clientUuid, uuid, verifyTypeCode, null);
        Type localVarReturnType = new TypeToken<VerificationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client verification 
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param verifyTypeCode  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientVerificationRetrieveAsync(UUID clientUuid, UUID uuid, String verifyTypeCode, final ApiCallback<VerificationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientVerificationRetrieveValidateBeforeCall(clientUuid, uuid, verifyTypeCode, _callback);
        Type localVarReturnType = new TypeToken<VerificationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
