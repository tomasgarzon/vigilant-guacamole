/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BankAccountCreateUpdate;
import org.openapitools.client.model.BankAccountList;
import org.openapitools.client.model.PaginatedBankAccountListList;
import org.openapitools.client.model.PatchedBankAccountCreateUpdate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BankAccountApi {
    private ApiClient localVarApiClient;

    public BankAccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BankAccountApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clientBankAccountCreate
     * @param clientUuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountCreateCall(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bankAccountCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountCreateValidateBeforeCall(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountCreateCall(clientUuid, bankAccountCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a bank account for a client
     * @param clientUuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @return BankAccountCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountCreateUpdate clientBankAccountCreate(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate) throws ApiException {
        ApiResponse<BankAccountCreateUpdate> localVarResp = clientBankAccountCreateWithHttpInfo(clientUuid, bankAccountCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a bank account for a client
     * @param clientUuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @return ApiResponse&lt;BankAccountCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountCreateUpdate> clientBankAccountCreateWithHttpInfo(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountCreateValidateBeforeCall(clientUuid, bankAccountCreateUpdate, null);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a bank account for a client
     * @param clientUuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountCreateAsync(UUID clientUuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback<BankAccountCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountCreateValidateBeforeCall(clientUuid, bankAccountCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientBankAccountDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientBankAccountDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientBankAccountDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientBankAccountDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedBankAccountCreateUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountPartialUpdateCall(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedBankAccountCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientBankAccountPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountPartialUpdateCall(clientUuid, uuid, patchedBankAccountCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedBankAccountCreateUpdate  (optional)
     * @return BankAccountCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountCreateUpdate clientBankAccountPartialUpdate(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate) throws ApiException {
        ApiResponse<BankAccountCreateUpdate> localVarResp = clientBankAccountPartialUpdateWithHttpInfo(clientUuid, uuid, patchedBankAccountCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedBankAccountCreateUpdate  (optional)
     * @return ApiResponse&lt;BankAccountCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountCreateUpdate> clientBankAccountPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedBankAccountCreateUpdate, null);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedBankAccountCreateUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountPartialUpdateAsync(UUID clientUuid, UUID uuid, PatchedBankAccountCreateUpdate patchedBankAccountCreateUpdate, final ApiCallback<BankAccountCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedBankAccountCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientBankAccountRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return BankAccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountList clientBankAccountRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<BankAccountList> localVarResp = clientBankAccountRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;BankAccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountList> clientBankAccountRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<BankAccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<BankAccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<BankAccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountUpdateCall(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bankAccountCreateUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientBankAccountUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountUpdateCall(clientUuid, uuid, bankAccountCreateUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @return BankAccountCreateUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public BankAccountCreateUpdate clientBankAccountUpdate(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate) throws ApiException {
        ApiResponse<BankAccountCreateUpdate> localVarResp = clientBankAccountUpdateWithHttpInfo(clientUuid, uuid, bankAccountCreateUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @return ApiResponse&lt;BankAccountCreateUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BankAccountCreateUpdate> clientBankAccountUpdateWithHttpInfo(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountUpdateValidateBeforeCall(clientUuid, uuid, bankAccountCreateUpdate, null);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client bank account
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param bankAccountCreateUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountUpdateAsync(UUID clientUuid, UUID uuid, BankAccountCreateUpdate bankAccountCreateUpdate, final ApiCallback<BankAccountCreateUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountUpdateValidateBeforeCall(clientUuid, uuid, bankAccountCreateUpdate, _callback);
        Type localVarReturnType = new TypeToken<BankAccountCreateUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientBankAccountsList
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountsListCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/bank-accounts/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientBankAccountsListValidateBeforeCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientBankAccountsList(Async)");
        }
        

        okhttp3.Call localVarCall = clientBankAccountsListCall(clientUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List Bank Account for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedBankAccountListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedBankAccountListList clientBankAccountsList(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedBankAccountListList> localVarResp = clientBankAccountsListWithHttpInfo(clientUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List Bank Account for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedBankAccountListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedBankAccountListList> clientBankAccountsListWithHttpInfo(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientBankAccountsListValidateBeforeCall(clientUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedBankAccountListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Bank Account for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientBankAccountsListAsync(UUID clientUuid, Integer limit, Integer offset, final ApiCallback<PaginatedBankAccountListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientBankAccountsListValidateBeforeCall(clientUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedBankAccountListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
