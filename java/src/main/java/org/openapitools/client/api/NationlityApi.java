/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NationalityCreate;
import org.openapitools.client.model.NationalityList;
import org.openapitools.client.model.NationalityUpdate;
import org.openapitools.client.model.PaginatedNationalityListList;
import org.openapitools.client.model.PatchedNationalityUpdate;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NationlityApi {
    private ApiClient localVarApiClient;

    public NationlityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NationlityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clientNationalityCreate
     * @param clientUuid  (required)
     * @param nationalityCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationalityCreateCall(UUID clientUuid, NationalityCreate nationalityCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nationalityCreate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationalityCreateValidateBeforeCall(UUID clientUuid, NationalityCreate nationalityCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationalityCreate(Async)");
        }
        
        // verify the required parameter 'nationalityCreate' is set
        if (nationalityCreate == null) {
            throw new ApiException("Missing the required parameter 'nationalityCreate' when calling clientNationalityCreate(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationalityCreateCall(clientUuid, nationalityCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create nationality for a client
     * @param clientUuid  (required)
     * @param nationalityCreate  (required)
     * @return NationalityCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NationalityCreate clientNationalityCreate(UUID clientUuid, NationalityCreate nationalityCreate) throws ApiException {
        ApiResponse<NationalityCreate> localVarResp = clientNationalityCreateWithHttpInfo(clientUuid, nationalityCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Create nationality for a client
     * @param clientUuid  (required)
     * @param nationalityCreate  (required)
     * @return ApiResponse&lt;NationalityCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NationalityCreate> clientNationalityCreateWithHttpInfo(UUID clientUuid, NationalityCreate nationalityCreate) throws ApiException {
        okhttp3.Call localVarCall = clientNationalityCreateValidateBeforeCall(clientUuid, nationalityCreate, null);
        Type localVarReturnType = new TypeToken<NationalityCreate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create nationality for a client
     * @param clientUuid  (required)
     * @param nationalityCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationalityCreateAsync(UUID clientUuid, NationalityCreate nationalityCreate, final ApiCallback<NationalityCreate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationalityCreateValidateBeforeCall(clientUuid, nationalityCreate, _callback);
        Type localVarReturnType = new TypeToken<NationalityCreate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlitiesList
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlitiesListCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlitiesListValidateBeforeCall(UUID clientUuid, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlitiesList(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlitiesListCall(clientUuid, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * List nationlities for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return PaginatedNationalityListList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedNationalityListList clientNationlitiesList(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        ApiResponse<PaginatedNationalityListList> localVarResp = clientNationlitiesListWithHttpInfo(clientUuid, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * List nationlities for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @return ApiResponse&lt;PaginatedNationalityListList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedNationalityListList> clientNationlitiesListWithHttpInfo(UUID clientUuid, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = clientNationlitiesListValidateBeforeCall(clientUuid, limit, offset, null);
        Type localVarReturnType = new TypeToken<PaginatedNationalityListList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List nationlities for a client
     * @param clientUuid  (required)
     * @param limit Number of results to return per page. (optional)
     * @param offset The initial index from which to return the results. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlitiesListAsync(UUID clientUuid, Integer limit, Integer offset, final ApiCallback<PaginatedNationalityListList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlitiesListValidateBeforeCall(clientUuid, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PaginatedNationalityListList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlityDelete
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityDeleteCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlityDeleteValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlityDelete(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientNationlityDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlityDeleteCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public void clientNationlityDelete(UUID clientUuid, UUID uuid) throws ApiException {
        clientNationlityDeleteWithHttpInfo(clientUuid, uuid);
    }

    /**
     * 
     * Delete a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientNationlityDeleteWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientNationlityDeleteValidateBeforeCall(clientUuid, uuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response body </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityDeleteAsync(UUID clientUuid, UUID uuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlityDeleteValidateBeforeCall(clientUuid, uuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlityPartialUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedNationalityUpdate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityPartialUpdateCall(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchedNationalityUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlityPartialUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlityPartialUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientNationlityPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlityPartialUpdateCall(clientUuid, uuid, patchedNationalityUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Partial Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedNationalityUpdate  (optional)
     * @return NationalityUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NationalityUpdate clientNationlityPartialUpdate(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate) throws ApiException {
        ApiResponse<NationalityUpdate> localVarResp = clientNationlityPartialUpdateWithHttpInfo(clientUuid, uuid, patchedNationalityUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Partial Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedNationalityUpdate  (optional)
     * @return ApiResponse&lt;NationalityUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NationalityUpdate> clientNationlityPartialUpdateWithHttpInfo(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientNationlityPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedNationalityUpdate, null);
        Type localVarReturnType = new TypeToken<NationalityUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Partial Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param patchedNationalityUpdate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityPartialUpdateAsync(UUID clientUuid, UUID uuid, PatchedNationalityUpdate patchedNationalityUpdate, final ApiCallback<NationalityUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlityPartialUpdateValidateBeforeCall(clientUuid, uuid, patchedNationalityUpdate, _callback);
        Type localVarReturnType = new TypeToken<NationalityUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlityRetrieve
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityRetrieveCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlityRetrieveValidateBeforeCall(UUID clientUuid, UUID uuid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlityRetrieve(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientNationlityRetrieve(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlityRetrieveCall(clientUuid, uuid, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return NationalityList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NationalityList clientNationlityRetrieve(UUID clientUuid, UUID uuid) throws ApiException {
        ApiResponse<NationalityList> localVarResp = clientNationlityRetrieveWithHttpInfo(clientUuid, uuid);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @return ApiResponse&lt;NationalityList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NationalityList> clientNationlityRetrieveWithHttpInfo(UUID clientUuid, UUID uuid) throws ApiException {
        okhttp3.Call localVarCall = clientNationlityRetrieveValidateBeforeCall(clientUuid, uuid, null);
        Type localVarReturnType = new TypeToken<NationalityList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityRetrieveAsync(UUID clientUuid, UUID uuid, final ApiCallback<NationalityList> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlityRetrieveValidateBeforeCall(clientUuid, uuid, _callback);
        Type localVarReturnType = new TypeToken<NationalityList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientNationlityUpdate
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param nationalityUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityUpdateCall(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = nationalityUpdate;

        // create path and map variables
        String localVarPath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
            .replaceAll("\\{" + "client_uuid" + "\\}", localVarApiClient.escapeString(clientUuid.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "cookieAuth", "jwtAuth", "tokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientNationlityUpdateValidateBeforeCall(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientUuid' is set
        if (clientUuid == null) {
            throw new ApiException("Missing the required parameter 'clientUuid' when calling clientNationlityUpdate(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling clientNationlityUpdate(Async)");
        }
        
        // verify the required parameter 'nationalityUpdate' is set
        if (nationalityUpdate == null) {
            throw new ApiException("Missing the required parameter 'nationalityUpdate' when calling clientNationlityUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = clientNationlityUpdateCall(clientUuid, uuid, nationalityUpdate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param nationalityUpdate  (required)
     * @return NationalityUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public NationalityUpdate clientNationlityUpdate(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate) throws ApiException {
        ApiResponse<NationalityUpdate> localVarResp = clientNationlityUpdateWithHttpInfo(clientUuid, uuid, nationalityUpdate);
        return localVarResp.getData();
    }

    /**
     * 
     * Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param nationalityUpdate  (required)
     * @return ApiResponse&lt;NationalityUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NationalityUpdate> clientNationlityUpdateWithHttpInfo(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate) throws ApiException {
        okhttp3.Call localVarCall = clientNationlityUpdateValidateBeforeCall(clientUuid, uuid, nationalityUpdate, null);
        Type localVarReturnType = new TypeToken<NationalityUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update a client nationality
     * @param clientUuid  (required)
     * @param uuid  (required)
     * @param nationalityUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientNationlityUpdateAsync(UUID clientUuid, UUID uuid, NationalityUpdate nationalityUpdate, final ApiCallback<NationalityUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientNationlityUpdateValidateBeforeCall(clientUuid, uuid, nationalityUpdate, _callback);
        Type localVarReturnType = new TypeToken<NationalityUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
