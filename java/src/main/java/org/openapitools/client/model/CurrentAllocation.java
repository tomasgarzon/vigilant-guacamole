/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Position;
import org.threeten.bp.OffsetDateTime;

/**
 * CurrentAllocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-09-01T11:21:17.898459Z[Etc/UTC]")
public class CurrentAllocation {
  public static final String SERIALIZED_NAME_CASH_ACTIVE = "cash_active";
  @SerializedName(SERIALIZED_NAME_CASH_ACTIVE)
  private Double cashActive;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_INVESTED = "invested";
  @SerializedName(SERIALIZED_NAME_INVESTED)
  private Double invested;

  public static final String SERIALIZED_NAME_EARNINGS = "earnings";
  @SerializedName(SERIALIZED_NAME_EARNINGS)
  private Double earnings;

  public static final String SERIALIZED_NAME_POSITIONS = "positions";
  @SerializedName(SERIALIZED_NAME_POSITIONS)
  private List<Position> positions = new ArrayList<Position>();

  public static final String SERIALIZED_NAME_VALUATION_DATETIME = "valuation_datetime";
  @SerializedName(SERIALIZED_NAME_VALUATION_DATETIME)
  private OffsetDateTime valuationDatetime;

  public static final String SERIALIZED_NAME_PERFORMANCE = "performance";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE)
  private Double performance = 0.0d;

  public static final String SERIALIZED_NAME_TRADE_TOTAL = "trade_total";
  @SerializedName(SERIALIZED_NAME_TRADE_TOTAL)
  private Double tradeTotal;

  public static final String SERIALIZED_NAME_CASH_AVAILABLE = "cash_available";
  @SerializedName(SERIALIZED_NAME_CASH_AVAILABLE)
  private Double cashAvailable;


  public CurrentAllocation cashActive(Double cashActive) {
    
    this.cashActive = cashActive;
    return this;
  }

   /**
   * Get cashActive
   * minimum: -1000000000000
   * maximum: 1000000000000
   * @return cashActive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getCashActive() {
    return cashActive;
  }


  public void setCashActive(Double cashActive) {
    this.cashActive = cashActive;
  }


  public CurrentAllocation balance(Double balance) {
    
    this.balance = balance;
    return this;
  }

   /**
   * Get balance
   * minimum: -1000000000000
   * maximum: 1000000000000
   * @return balance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getBalance() {
    return balance;
  }


  public void setBalance(Double balance) {
    this.balance = balance;
  }


  public CurrentAllocation invested(Double invested) {
    
    this.invested = invested;
    return this;
  }

   /**
   * Get invested
   * minimum: -1000000000000
   * maximum: 1000000000000
   * @return invested
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getInvested() {
    return invested;
  }


  public void setInvested(Double invested) {
    this.invested = invested;
  }


  public CurrentAllocation earnings(Double earnings) {
    
    this.earnings = earnings;
    return this;
  }

   /**
   * Get earnings
   * minimum: -1000000000000
   * maximum: 1000000000000
   * @return earnings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getEarnings() {
    return earnings;
  }


  public void setEarnings(Double earnings) {
    this.earnings = earnings;
  }


  public CurrentAllocation positions(List<Position> positions) {
    
    this.positions = positions;
    return this;
  }

  public CurrentAllocation addPositionsItem(Position positionsItem) {
    this.positions.add(positionsItem);
    return this;
  }

   /**
   * Get positions
   * @return positions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Position> getPositions() {
    return positions;
  }


  public void setPositions(List<Position> positions) {
    this.positions = positions;
  }


   /**
   * Get valuationDatetime
   * @return valuationDatetime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getValuationDatetime() {
    return valuationDatetime;
  }




  public CurrentAllocation performance(Double performance) {
    
    this.performance = performance;
    return this;
  }

   /**
   * Get performance
   * minimum: -1000000000000
   * maximum: 1000000000000
   * @return performance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPerformance() {
    return performance;
  }


  public void setPerformance(Double performance) {
    this.performance = performance;
  }


  public CurrentAllocation tradeTotal(Double tradeTotal) {
    
    this.tradeTotal = tradeTotal;
    return this;
  }

   /**
   * Get tradeTotal
   * minimum: -1000000000000
   * maximum: 1000000000000
   * @return tradeTotal
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getTradeTotal() {
    return tradeTotal;
  }


  public void setTradeTotal(Double tradeTotal) {
    this.tradeTotal = tradeTotal;
  }


   /**
   * Get cashAvailable
   * @return cashAvailable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getCashAvailable() {
    return cashAvailable;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrentAllocation currentAllocation = (CurrentAllocation) o;
    return Objects.equals(this.cashActive, currentAllocation.cashActive) &&
        Objects.equals(this.balance, currentAllocation.balance) &&
        Objects.equals(this.invested, currentAllocation.invested) &&
        Objects.equals(this.earnings, currentAllocation.earnings) &&
        Objects.equals(this.positions, currentAllocation.positions) &&
        Objects.equals(this.valuationDatetime, currentAllocation.valuationDatetime) &&
        Objects.equals(this.performance, currentAllocation.performance) &&
        Objects.equals(this.tradeTotal, currentAllocation.tradeTotal) &&
        Objects.equals(this.cashAvailable, currentAllocation.cashAvailable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashActive, balance, invested, earnings, positions, valuationDatetime, performance, tradeTotal, cashAvailable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrentAllocation {\n");
    sb.append("    cashActive: ").append(toIndentedString(cashActive)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    invested: ").append(toIndentedString(invested)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("    valuationDatetime: ").append(toIndentedString(valuationDatetime)).append("\n");
    sb.append("    performance: ").append(toIndentedString(performance)).append("\n");
    sb.append("    tradeTotal: ").append(toIndentedString(tradeTotal)).append("\n");
    sb.append("    cashAvailable: ").append(toIndentedString(cashAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

