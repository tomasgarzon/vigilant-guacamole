/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ForecastDecumulationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-09-01T11:21:17.898459Z[Etc/UTC]")
public class ForecastDecumulationRequest {
  public static final String SERIALIZED_NAME_INITIAL_AMOUNT = "initial_amount";
  @SerializedName(SERIALIZED_NAME_INITIAL_AMOUNT)
  private Double initialAmount;

  public static final String SERIALIZED_NAME_RECURRING_AMOUNT = "recurring_amount";
  @SerializedName(SERIALIZED_NAME_RECURRING_AMOUNT)
  private Double recurringAmount;

  public static final String SERIALIZED_NAME_RISK_LEVEL = "risk_level";
  @SerializedName(SERIALIZED_NAME_RISK_LEVEL)
  private Integer riskLevel;

  public static final String SERIALIZED_NAME_WITHDRAWAL_AMOUNT = "withdrawal_amount";
  @SerializedName(SERIALIZED_NAME_WITHDRAWAL_AMOUNT)
  private Double withdrawalAmount;

  public static final String SERIALIZED_NAME_RETIREMENT_AGE = "retirement_age";
  @SerializedName(SERIALIZED_NAME_RETIREMENT_AGE)
  private Integer retirementAge;

  public static final String SERIALIZED_NAME_LIFE_EXPECTANCY = "life_expectancy";
  @SerializedName(SERIALIZED_NAME_LIFE_EXPECTANCY)
  private Integer lifeExpectancy;


  public ForecastDecumulationRequest initialAmount(Double initialAmount) {
    
    this.initialAmount = initialAmount;
    return this;
  }

   /**
   * Get initialAmount
   * minimum: 0
   * maximum: 1000000000000
   * @return initialAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getInitialAmount() {
    return initialAmount;
  }


  public void setInitialAmount(Double initialAmount) {
    this.initialAmount = initialAmount;
  }


  public ForecastDecumulationRequest recurringAmount(Double recurringAmount) {
    
    this.recurringAmount = recurringAmount;
    return this;
  }

   /**
   * Get recurringAmount
   * minimum: 0
   * maximum: 1000000000000
   * @return recurringAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getRecurringAmount() {
    return recurringAmount;
  }


  public void setRecurringAmount(Double recurringAmount) {
    this.recurringAmount = recurringAmount;
  }


  public ForecastDecumulationRequest riskLevel(Integer riskLevel) {
    
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Get riskLevel
   * @return riskLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRiskLevel() {
    return riskLevel;
  }


  public void setRiskLevel(Integer riskLevel) {
    this.riskLevel = riskLevel;
  }


  public ForecastDecumulationRequest withdrawalAmount(Double withdrawalAmount) {
    
    this.withdrawalAmount = withdrawalAmount;
    return this;
  }

   /**
   * Get withdrawalAmount
   * minimum: 0
   * maximum: 1000000000000
   * @return withdrawalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getWithdrawalAmount() {
    return withdrawalAmount;
  }


  public void setWithdrawalAmount(Double withdrawalAmount) {
    this.withdrawalAmount = withdrawalAmount;
  }


  public ForecastDecumulationRequest retirementAge(Integer retirementAge) {
    
    this.retirementAge = retirementAge;
    return this;
  }

   /**
   * Get retirementAge
   * minimum: 18
   * maximum: 110
   * @return retirementAge
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRetirementAge() {
    return retirementAge;
  }


  public void setRetirementAge(Integer retirementAge) {
    this.retirementAge = retirementAge;
  }


  public ForecastDecumulationRequest lifeExpectancy(Integer lifeExpectancy) {
    
    this.lifeExpectancy = lifeExpectancy;
    return this;
  }

   /**
   * Get lifeExpectancy
   * minimum: 75
   * maximum: 110
   * @return lifeExpectancy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLifeExpectancy() {
    return lifeExpectancy;
  }


  public void setLifeExpectancy(Integer lifeExpectancy) {
    this.lifeExpectancy = lifeExpectancy;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ForecastDecumulationRequest forecastDecumulationRequest = (ForecastDecumulationRequest) o;
    return Objects.equals(this.initialAmount, forecastDecumulationRequest.initialAmount) &&
        Objects.equals(this.recurringAmount, forecastDecumulationRequest.recurringAmount) &&
        Objects.equals(this.riskLevel, forecastDecumulationRequest.riskLevel) &&
        Objects.equals(this.withdrawalAmount, forecastDecumulationRequest.withdrawalAmount) &&
        Objects.equals(this.retirementAge, forecastDecumulationRequest.retirementAge) &&
        Objects.equals(this.lifeExpectancy, forecastDecumulationRequest.lifeExpectancy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(initialAmount, recurringAmount, riskLevel, withdrawalAmount, retirementAge, lifeExpectancy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ForecastDecumulationRequest {\n");
    sb.append("    initialAmount: ").append(toIndentedString(initialAmount)).append("\n");
    sb.append("    recurringAmount: ").append(toIndentedString(recurringAmount)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    withdrawalAmount: ").append(toIndentedString(withdrawalAmount)).append("\n");
    sb.append("    retirementAge: ").append(toIndentedString(retirementAge)).append("\n");
    sb.append("    lifeExpectancy: ").append(toIndentedString(lifeExpectancy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

