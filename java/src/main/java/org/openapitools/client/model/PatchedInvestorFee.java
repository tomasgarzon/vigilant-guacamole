/*
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.openapitools.client.model.FeeTypeEnum;
import org.openapitools.client.model.ValueUnitEnum;
import org.openapitools.jackson.nullable.JsonNullable;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;

/**
 * PatchedInvestorFee
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-09-01T11:21:17.898459Z[Etc/UTC]")
public class PatchedInvestorFee {
  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public static final String SERIALIZED_NAME_VALUE_UNIT = "value_unit";
  @SerializedName(SERIALIZED_NAME_VALUE_UNIT)
  private ValueUnitEnum valueUnit;

  public static final String SERIALIZED_NAME_FEE_TYPE = "fee_type";
  @SerializedName(SERIALIZED_NAME_FEE_TYPE)
  private FeeTypeEnum feeType;

  public static final String SERIALIZED_NAME_CONCEPT = "concept";
  @SerializedName(SERIALIZED_NAME_CONCEPT)
  private String concept;

  public static final String SERIALIZED_NAME_DATE_FROM = "date_from";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private LocalDate dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "date_to";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private LocalDate dateTo;

  public static final String SERIALIZED_NAME_AMOUNT_FROM = "amount_from";
  @SerializedName(SERIALIZED_NAME_AMOUNT_FROM)
  private Double amountFrom;

  public static final String SERIALIZED_NAME_AMOUNT_TO = "amount_to";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TO)
  private Double amountTo;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private UUID uuid;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;


  public PatchedInvestorFee value(Double value) {
    
    this.value = value;
    return this;
  }

   /**
   * Determinates a percentage or an amount (between 0 and 1 if percentage otherwise Positive Decimal)
   * minimum: 0
   * maximum: 100
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determinates a percentage or an amount (between 0 and 1 if percentage otherwise Positive Decimal)")

  public Double getValue() {
    return value;
  }


  public void setValue(Double value) {
    this.value = value;
  }


  public PatchedInvestorFee valueUnit(ValueUnitEnum valueUnit) {
    
    this.valueUnit = valueUnit;
    return this;
  }

   /**
   * Determines the type of the value(Fixed, Percentage)
   * @return valueUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines the type of the value(Fixed, Percentage)")

  public ValueUnitEnum getValueUnit() {
    return valueUnit;
  }


  public void setValueUnit(ValueUnitEnum valueUnit) {
    this.valueUnit = valueUnit;
  }


  public PatchedInvestorFee feeType(FeeTypeEnum feeType) {
    
    this.feeType = feeType;
    return this;
  }

   /**
   * Each choice should have a related method on fee model that contains the logic to charge the client
   * @return feeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Each choice should have a related method on fee model that contains the logic to charge the client")

  public FeeTypeEnum getFeeType() {
    return feeType;
  }


  public void setFeeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
  }


  public PatchedInvestorFee concept(String concept) {
    
    this.concept = concept;
    return this;
  }

   /**
   * Describes the concept that will be shown on invoice
   * @return concept
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Describes the concept that will be shown on invoice")

  public String getConcept() {
    return concept;
  }


  public void setConcept(String concept) {
    this.concept = concept;
  }


  public PatchedInvestorFee dateFrom(LocalDate dateFrom) {
    
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * Defines the end date when the percentage should be applied
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the end date when the percentage should be applied")

  public LocalDate getDateFrom() {
    return dateFrom;
  }


  public void setDateFrom(LocalDate dateFrom) {
    this.dateFrom = dateFrom;
  }


  public PatchedInvestorFee dateTo(LocalDate dateTo) {
    
    this.dateTo = dateTo;
    return this;
  }

   /**
   * Defines the start date when the percentage should be applied
   * @return dateTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the start date when the percentage should be applied")

  public LocalDate getDateTo() {
    return dateTo;
  }


  public void setDateTo(LocalDate dateTo) {
    this.dateTo = dateTo;
  }


  public PatchedInvestorFee amountFrom(Double amountFrom) {
    
    this.amountFrom = amountFrom;
    return this;
  }

   /**
   * Defines the amount start range when the percentage should be applied
   * minimum: -1000000000
   * maximum: 1000000000
   * @return amountFrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the amount start range when the percentage should be applied")

  public Double getAmountFrom() {
    return amountFrom;
  }


  public void setAmountFrom(Double amountFrom) {
    this.amountFrom = amountFrom;
  }


  public PatchedInvestorFee amountTo(Double amountTo) {
    
    this.amountTo = amountTo;
    return this;
  }

   /**
   * Defines the amount end range when the percentage should be applied
   * minimum: -1000000000
   * maximum: 1000000000
   * @return amountTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the amount end range when the percentage should be applied")

  public Double getAmountTo() {
    return amountTo;
  }


  public void setAmountTo(Double amountTo) {
    this.amountTo = amountTo;
  }


   /**
   * Get uuid
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUuid() {
    return uuid;
  }




   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreated() {
    return created;
  }




   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getUpdated() {
    return updated;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchedInvestorFee patchedInvestorFee = (PatchedInvestorFee) o;
    return Objects.equals(this.value, patchedInvestorFee.value) &&
        Objects.equals(this.valueUnit, patchedInvestorFee.valueUnit) &&
        Objects.equals(this.feeType, patchedInvestorFee.feeType) &&
        Objects.equals(this.concept, patchedInvestorFee.concept) &&
        Objects.equals(this.dateFrom, patchedInvestorFee.dateFrom) &&
        Objects.equals(this.dateTo, patchedInvestorFee.dateTo) &&
        Objects.equals(this.amountFrom, patchedInvestorFee.amountFrom) &&
        Objects.equals(this.amountTo, patchedInvestorFee.amountTo) &&
        Objects.equals(this.uuid, patchedInvestorFee.uuid) &&
        Objects.equals(this.created, patchedInvestorFee.created) &&
        Objects.equals(this.updated, patchedInvestorFee.updated);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && a.get().getClass().isArray() ? Arrays.equals((T[])a.get(), (T[])b.get()) : Objects.equals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, valueUnit, feeType, concept, dateFrom, dateTo, amountFrom, amountTo, uuid, created, updated);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent()
      ? (a.get().getClass().isArray() ? Arrays.hashCode((T[])a.get()) : Objects.hashCode(a.get()))
      : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchedInvestorFee {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueUnit: ").append(toIndentedString(valueUnit)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    concept: ").append(toIndentedString(concept)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    amountFrom: ").append(toIndentedString(amountFrom)).append("\n");
    sb.append("    amountTo: ").append(toIndentedString(amountTo)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

