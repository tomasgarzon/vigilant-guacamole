/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class KYCApi {
    protected basePath = 'http://localhost';
    public defaultHeaders: Array<string> = [];
    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = undefined;
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        if (defaultExtraJQueryAjaxSettings) {
            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;
        }
    }

    private extendObj<T1 extends object, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * Create a verification for a client
     * @param clientUuid 
     * @param verifyTypeCode 
     * @param verificationCreate 
     */
    public clientVerificationCreate(clientUuid: string, verifyTypeCode: string, verificationCreate: models.VerificationCreate, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.VerificationCreate;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationCreate.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationCreate.');
        }

        // verify required parameter 'verificationCreate' is not null or undefined
        if (verificationCreate === null || verificationCreate === undefined) {
            throw new Error('Required parameter verificationCreate was null or undefined when calling clientVerificationCreate.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded', 
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(verificationCreate);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.VerificationCreate;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.VerificationCreate, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Create a verification Document for a client
     * @param clientUuid 
     * @param verifyTypeCode 
     * @param uuid 
     * @param verifyType 
     * @param created 
     * @param updated 
     * @param verificationDocuments 
     * @param status 
     * @param result 
     */
    public clientVerificationDocumentCreate(clientUuid: string, verifyTypeCode: string, uuid: string, verifyType: models.VerifyTypeEnum, created: string, updated: string, verificationDocuments: Array<models.VerificationDocumentCreate>, status?: models.StatusBd7Enum, result?: models.models.ResultEnum | models.BlankEnum, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.VerificationWithType;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        let formParams = new FormData();
        let reqHasFile = false;

        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationDocumentCreate.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationDocumentCreate.');
        }

        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling clientVerificationDocumentCreate.');
        }

        // verify required parameter 'verifyType' is not null or undefined
        if (verifyType === null || verifyType === undefined) {
            throw new Error('Required parameter verifyType was null or undefined when calling clientVerificationDocumentCreate.');
        }

        // verify required parameter 'created' is not null or undefined
        if (created === null || created === undefined) {
            throw new Error('Required parameter created was null or undefined when calling clientVerificationDocumentCreate.');
        }

        // verify required parameter 'updated' is not null or undefined
        if (updated === null || updated === undefined) {
            throw new Error('Required parameter updated was null or undefined when calling clientVerificationDocumentCreate.');
        }

        // verify required parameter 'verificationDocuments' is not null or undefined
        if (verificationDocuments === null || verificationDocuments === undefined) {
            throw new Error('Required parameter verificationDocuments was null or undefined when calling clientVerificationDocumentCreate.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        if (uuid !== null && uuid !== undefined) {
            formParams.append('uuid', <any>uuid);
        }
        if (verifyType !== null && verifyType !== undefined) {
            formParams.append('verify_type', <any>verifyType);
        }
        if (status !== null && status !== undefined) {
            formParams.append('status', <any>status);
        }
        if (result !== null && result !== undefined) {
            formParams.append('result', <any>result);
        }
        if (created !== null && created !== undefined) {
            formParams.append('created', <any>created);
        }
        if (updated !== null && updated !== undefined) {
            formParams.append('updated', <any>updated);
        }
        if (verificationDocuments) {
            formParams.append('verification_documents', verificationDocuments.join(COLLECTION_FORMATS['csv']));
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }

        if (!reqHasFile) {
            headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        requestOptions.data = formParams;
        if (reqHasFile) {
            requestOptions.contentType = false;
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.VerificationWithType;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.VerificationWithType, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Delete a client verificatoin document
     * @param clientUuid 
     * @param uuid 
     * @param verifyTypeCode 
     */
    public clientVerificationDocumentDelete(clientUuid: string, uuid: string, verifyTypeCode: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body?: any;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationDocumentDelete.');
        }

        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling clientVerificationDocumentDelete.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationDocumentDelete.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'DELETE',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body?: any;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: any, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * List Verification Document for a client
     * @param clientUuid 
     * @param verifyTypeCode 
     * @param limit Number of results to return per page.
     * @param offset The initial index from which to return the results.
     */
    public clientVerificationDocumentList(clientUuid: string, verifyTypeCode: string, limit?: number, offset?: number, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.PaginatedVerificationDocumentList;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationDocumentList.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationDocumentList.');
        }

        if (limit !== null && limit !== undefined) {
            queryParameters['limit'] = <string><any>limit;
        }
        if (offset !== null && offset !== undefined) {
            queryParameters['offset'] = <string><any>offset;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.PaginatedVerificationDocumentList;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.PaginatedVerificationDocumentList, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Partial Update a client verification document
     * @param clientUuid 
     * @param uuid 
     * @param verifyTypeCode 
     * @param uuid2 
     * @param documentType 
     * @param documentFront 
     * @param documentBack 
     */
    public clientVerificationDocumentPartialUpdate(clientUuid: string, uuid: string, verifyTypeCode: string, uuid2?: string, documentType?: models.DocumentTypeEnum, documentFront?: string, documentBack?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.VerificationDocument;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        let formParams = new FormData();
        let reqHasFile = false;

        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationDocumentPartialUpdate.');
        }

        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling clientVerificationDocumentPartialUpdate.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationDocumentPartialUpdate.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        if (uuid2 !== null && uuid2 !== undefined) {
            formParams.append('uuid', <any>uuid2);
        }
        if (documentType !== null && documentType !== undefined) {
            formParams.append('document_type', <any>documentType);
        }
        if (documentFront !== null && documentFront !== undefined) {
            formParams.append('document_front', <any>documentFront);
        }
        if (documentBack !== null && documentBack !== undefined) {
            formParams.append('document_back', <any>documentBack);
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }

        if (!reqHasFile) {
            headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'PATCH',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        requestOptions.data = formParams;
        if (reqHasFile) {
            requestOptions.contentType = false;
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.VerificationDocument;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.VerificationDocument, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Retrieve a client verification document
     * @param clientUuid 
     * @param uuid 
     * @param verifyTypeCode 
     */
    public clientVerificationDocumentRetrieve(clientUuid: string, uuid: string, verifyTypeCode: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.VerificationDocument;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationDocumentRetrieve.');
        }

        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling clientVerificationDocumentRetrieve.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationDocumentRetrieve.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.VerificationDocument;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.VerificationDocument, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Update a client verification document
     * @param clientUuid 
     * @param uuid 
     * @param verifyTypeCode 
     * @param uuid2 
     * @param documentType 
     * @param documentFront 
     * @param documentBack 
     */
    public clientVerificationDocumentUpdate(clientUuid: string, uuid: string, verifyTypeCode: string, uuid2: string, documentType: models.DocumentTypeEnum, documentFront: string, documentBack: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.VerificationDocument;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        let formParams = new FormData();
        let reqHasFile = false;

        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationDocumentUpdate.');
        }

        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling clientVerificationDocumentUpdate.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationDocumentUpdate.');
        }

        // verify required parameter 'uuid2' is not null or undefined
        if (uuid2 === null || uuid2 === undefined) {
            throw new Error('Required parameter uuid2 was null or undefined when calling clientVerificationDocumentUpdate.');
        }

        // verify required parameter 'documentType' is not null or undefined
        if (documentType === null || documentType === undefined) {
            throw new Error('Required parameter documentType was null or undefined when calling clientVerificationDocumentUpdate.');
        }

        // verify required parameter 'documentFront' is not null or undefined
        if (documentFront === null || documentFront === undefined) {
            throw new Error('Required parameter documentFront was null or undefined when calling clientVerificationDocumentUpdate.');
        }

        // verify required parameter 'documentBack' is not null or undefined
        if (documentBack === null || documentBack === undefined) {
            throw new Error('Required parameter documentBack was null or undefined when calling clientVerificationDocumentUpdate.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        if (uuid2 !== null && uuid2 !== undefined) {
            formParams.append('uuid', <any>uuid2);
        }
        if (documentType !== null && documentType !== undefined) {
            formParams.append('document_type', <any>documentType);
        }
        if (documentFront !== null && documentFront !== undefined) {
            formParams.append('document_front', <any>documentFront);
        }
        if (documentBack !== null && documentBack !== undefined) {
            formParams.append('document_back', <any>documentBack);
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }

        if (!reqHasFile) {
            headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'PUT',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }
        requestOptions.data = formParams;
        if (reqHasFile) {
            requestOptions.contentType = false;
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.VerificationDocument;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.VerificationDocument, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * List Verification for a client
     * @param clientUuid 
     * @param verifyTypeCode 
     * @param limit Number of results to return per page.
     * @param offset The initial index from which to return the results.
     */
    public clientVerificationList(clientUuid: string, verifyTypeCode: string, limit?: number, offset?: number, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.PaginatedVerificationListList;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationList.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationList.');
        }

        if (limit !== null && limit !== undefined) {
            queryParameters['limit'] = <string><any>limit;
        }
        if (offset !== null && offset !== undefined) {
            queryParameters['offset'] = <string><any>offset;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.PaginatedVerificationListList;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.PaginatedVerificationListList, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * Retrieve a client verification 
     * @param clientUuid 
     * @param uuid 
     * @param verifyTypeCode 
     */
    public clientVerificationRetrieve(clientUuid: string, uuid: string, verifyTypeCode: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.VerificationList;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{uuid}/'.replace('{' + 'client_uuid' + '}', encodeURIComponent(String(clientUuid))).replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid))).replace('{' + 'verify_type_code' + '}', encodeURIComponent(String(verifyTypeCode)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'clientUuid' is not null or undefined
        if (clientUuid === null || clientUuid === undefined) {
            throw new Error('Required parameter clientUuid was null or undefined when calling clientVerificationRetrieve.');
        }

        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling clientVerificationRetrieve.');
        }

        // verify required parameter 'verifyTypeCode' is not null or undefined
        if (verifyTypeCode === null || verifyTypeCode === undefined) {
            throw new Error('Required parameter verifyTypeCode was null or undefined when calling clientVerificationRetrieve.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (cookieAuth) required
        // authentication (jwtAuth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headerParams['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // authentication (tokenAuth) required
        if (this.configuration.apiKey) {
            headerParams['Authorization'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.VerificationList;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.VerificationList, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

}
