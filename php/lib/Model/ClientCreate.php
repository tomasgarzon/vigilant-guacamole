<?php
/**
 * ClientCreate
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClientCreate Class Doc Comment
 *
 * @category Class
 * @description A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ClientCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'birthdate' => '\DateTime',
        'title' => 'OneOfTitleEnumBlankEnumNullEnum',
        'first_name' => 'string',
        'last_name' => 'string',
        'middle_name' => 'string',
        'gender' => 'OneOfGenderEnumBlankEnumNullEnum',
        'marital_status' => 'OneOfMaritalStatusEnumBlankEnumNullEnum',
        'language' => 'string',
        'employment_status' => 'OneOfEmploymentStatusEnumBlankEnumNullEnum',
        'activated' => '\DateTime',
        'profile' => 'array<string,mixed>',
        'password' => 'string',
        'referral_code' => 'string',
        'utm_source' => 'string',
        'utm_medium' => 'string',
        'utm_campaign' => 'string',
        'utm_term' => 'string',
        'utm_content' => 'string',
        'tos_consent' => 'bool',
        'data_consent' => 'bool',
        'marketing_consent' => 'bool',
        'extra_data' => 'array<string,mixed>',
        'phone_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => 'email',
        'birthdate' => 'date',
        'title' => null,
        'first_name' => null,
        'last_name' => null,
        'middle_name' => null,
        'gender' => null,
        'marital_status' => null,
        'language' => null,
        'employment_status' => null,
        'activated' => 'date-time',
        'profile' => null,
        'password' => null,
        'referral_code' => null,
        'utm_source' => null,
        'utm_medium' => null,
        'utm_campaign' => null,
        'utm_term' => null,
        'utm_content' => null,
        'tos_consent' => null,
        'data_consent' => null,
        'marketing_consent' => null,
        'extra_data' => null,
        'phone_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'birthdate' => 'birthdate',
        'title' => 'title',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'middle_name' => 'middle_name',
        'gender' => 'gender',
        'marital_status' => 'marital_status',
        'language' => 'language',
        'employment_status' => 'employment_status',
        'activated' => 'activated',
        'profile' => 'profile',
        'password' => 'password',
        'referral_code' => 'referral_code',
        'utm_source' => 'utm_source',
        'utm_medium' => 'utm_medium',
        'utm_campaign' => 'utm_campaign',
        'utm_term' => 'utm_term',
        'utm_content' => 'utm_content',
        'tos_consent' => 'tos_consent',
        'data_consent' => 'data_consent',
        'marketing_consent' => 'marketing_consent',
        'extra_data' => 'extra_data',
        'phone_number' => 'phone_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'birthdate' => 'setBirthdate',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'gender' => 'setGender',
        'marital_status' => 'setMaritalStatus',
        'language' => 'setLanguage',
        'employment_status' => 'setEmploymentStatus',
        'activated' => 'setActivated',
        'profile' => 'setProfile',
        'password' => 'setPassword',
        'referral_code' => 'setReferralCode',
        'utm_source' => 'setUtmSource',
        'utm_medium' => 'setUtmMedium',
        'utm_campaign' => 'setUtmCampaign',
        'utm_term' => 'setUtmTerm',
        'utm_content' => 'setUtmContent',
        'tos_consent' => 'setTosConsent',
        'data_consent' => 'setDataConsent',
        'marketing_consent' => 'setMarketingConsent',
        'extra_data' => 'setExtraData',
        'phone_number' => 'setPhoneNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'birthdate' => 'getBirthdate',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'gender' => 'getGender',
        'marital_status' => 'getMaritalStatus',
        'language' => 'getLanguage',
        'employment_status' => 'getEmploymentStatus',
        'activated' => 'getActivated',
        'profile' => 'getProfile',
        'password' => 'getPassword',
        'referral_code' => 'getReferralCode',
        'utm_source' => 'getUtmSource',
        'utm_medium' => 'getUtmMedium',
        'utm_campaign' => 'getUtmCampaign',
        'utm_term' => 'getUtmTerm',
        'utm_content' => 'getUtmContent',
        'tos_consent' => 'getTosConsent',
        'data_consent' => 'getDataConsent',
        'marketing_consent' => 'getMarketingConsent',
        'extra_data' => 'getExtraData',
        'phone_number' => 'getPhoneNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = $data['email'] ?? null;
        $this->container['birthdate'] = $data['birthdate'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['middle_name'] = $data['middle_name'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['marital_status'] = $data['marital_status'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['employment_status'] = $data['employment_status'] ?? null;
        $this->container['activated'] = $data['activated'] ?? null;
        $this->container['profile'] = $data['profile'] ?? null;
        $this->container['password'] = $data['password'] ?? null;
        $this->container['referral_code'] = $data['referral_code'] ?? null;
        $this->container['utm_source'] = $data['utm_source'] ?? null;
        $this->container['utm_medium'] = $data['utm_medium'] ?? null;
        $this->container['utm_campaign'] = $data['utm_campaign'] ?? null;
        $this->container['utm_term'] = $data['utm_term'] ?? null;
        $this->container['utm_content'] = $data['utm_content'] ?? null;
        $this->container['tos_consent'] = $data['tos_consent'] ?? null;
        $this->container['data_consent'] = $data['data_consent'] ?? null;
        $this->container['marketing_consent'] = $data['marketing_consent'] ?? null;
        $this->container['extra_data'] = $data['extra_data'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 5)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['utm_source']) && (mb_strlen($this->container['utm_source']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_source', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_medium']) && (mb_strlen($this->container['utm_medium']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_medium', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_campaign']) && (mb_strlen($this->container['utm_campaign']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_campaign', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_term']) && (mb_strlen($this->container['utm_term']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_term', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_content']) && (mb_strlen($this->container['utm_content']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_content', the character length must be smaller than or equal to 250.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return \DateTime|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \DateTime|null $birthdate birthdate
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets title
     *
     * @return OneOfTitleEnumBlankEnumNullEnum|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param OneOfTitleEnumBlankEnumNullEnum|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return OneOfGenderEnumBlankEnumNullEnum|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param OneOfGenderEnumBlankEnumNullEnum|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return OneOfMaritalStatusEnumBlankEnumNullEnum|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param OneOfMaritalStatusEnumBlankEnumNullEnum|null $marital_status marital_status
     *
     * @return self
     */
    public function setMaritalStatus($marital_status)
    {
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (!is_null($language) && (mb_strlen($language) > 5)) {
            throw new \InvalidArgumentException('invalid length for $language when calling ClientCreate., must be smaller than or equal to 5.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets employment_status
     *
     * @return OneOfEmploymentStatusEnumBlankEnumNullEnum|null
     */
    public function getEmploymentStatus()
    {
        return $this->container['employment_status'];
    }

    /**
     * Sets employment_status
     *
     * @param OneOfEmploymentStatusEnumBlankEnumNullEnum|null $employment_status employment_status
     *
     * @return self
     */
    public function setEmploymentStatus($employment_status)
    {
        $this->container['employment_status'] = $employment_status;

        return $this;
    }

    /**
     * Gets activated
     *
     * @return \DateTime|null
     */
    public function getActivated()
    {
        return $this->container['activated'];
    }

    /**
     * Sets activated
     *
     * @param \DateTime|null $activated activated
     *
     * @return self
     */
    public function setActivated($activated)
    {
        $this->container['activated'] = $activated;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return array<string,mixed>|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param array<string,mixed>|null $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets referral_code
     *
     * @return string|null
     */
    public function getReferralCode()
    {
        return $this->container['referral_code'];
    }

    /**
     * Sets referral_code
     *
     * @param string|null $referral_code referral_code
     *
     * @return self
     */
    public function setReferralCode($referral_code)
    {
        $this->container['referral_code'] = $referral_code;

        return $this;
    }

    /**
     * Gets utm_source
     *
     * @return string|null
     */
    public function getUtmSource()
    {
        return $this->container['utm_source'];
    }

    /**
     * Sets utm_source
     *
     * @param string|null $utm_source utm_source
     *
     * @return self
     */
    public function setUtmSource($utm_source)
    {
        if (!is_null($utm_source) && (mb_strlen($utm_source) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_source when calling ClientCreate., must be smaller than or equal to 250.');
        }

        $this->container['utm_source'] = $utm_source;

        return $this;
    }

    /**
     * Gets utm_medium
     *
     * @return string|null
     */
    public function getUtmMedium()
    {
        return $this->container['utm_medium'];
    }

    /**
     * Sets utm_medium
     *
     * @param string|null $utm_medium utm_medium
     *
     * @return self
     */
    public function setUtmMedium($utm_medium)
    {
        if (!is_null($utm_medium) && (mb_strlen($utm_medium) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_medium when calling ClientCreate., must be smaller than or equal to 250.');
        }

        $this->container['utm_medium'] = $utm_medium;

        return $this;
    }

    /**
     * Gets utm_campaign
     *
     * @return string|null
     */
    public function getUtmCampaign()
    {
        return $this->container['utm_campaign'];
    }

    /**
     * Sets utm_campaign
     *
     * @param string|null $utm_campaign utm_campaign
     *
     * @return self
     */
    public function setUtmCampaign($utm_campaign)
    {
        if (!is_null($utm_campaign) && (mb_strlen($utm_campaign) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_campaign when calling ClientCreate., must be smaller than or equal to 250.');
        }

        $this->container['utm_campaign'] = $utm_campaign;

        return $this;
    }

    /**
     * Gets utm_term
     *
     * @return string|null
     */
    public function getUtmTerm()
    {
        return $this->container['utm_term'];
    }

    /**
     * Sets utm_term
     *
     * @param string|null $utm_term utm_term
     *
     * @return self
     */
    public function setUtmTerm($utm_term)
    {
        if (!is_null($utm_term) && (mb_strlen($utm_term) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_term when calling ClientCreate., must be smaller than or equal to 250.');
        }

        $this->container['utm_term'] = $utm_term;

        return $this;
    }

    /**
     * Gets utm_content
     *
     * @return string|null
     */
    public function getUtmContent()
    {
        return $this->container['utm_content'];
    }

    /**
     * Sets utm_content
     *
     * @param string|null $utm_content utm_content
     *
     * @return self
     */
    public function setUtmContent($utm_content)
    {
        if (!is_null($utm_content) && (mb_strlen($utm_content) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_content when calling ClientCreate., must be smaller than or equal to 250.');
        }

        $this->container['utm_content'] = $utm_content;

        return $this;
    }

    /**
     * Gets tos_consent
     *
     * @return bool|null
     */
    public function getTosConsent()
    {
        return $this->container['tos_consent'];
    }

    /**
     * Sets tos_consent
     *
     * @param bool|null $tos_consent tos_consent
     *
     * @return self
     */
    public function setTosConsent($tos_consent)
    {
        $this->container['tos_consent'] = $tos_consent;

        return $this;
    }

    /**
     * Gets data_consent
     *
     * @return bool|null
     */
    public function getDataConsent()
    {
        return $this->container['data_consent'];
    }

    /**
     * Sets data_consent
     *
     * @param bool|null $data_consent data_consent
     *
     * @return self
     */
    public function setDataConsent($data_consent)
    {
        $this->container['data_consent'] = $data_consent;

        return $this;
    }

    /**
     * Gets marketing_consent
     *
     * @return bool|null
     */
    public function getMarketingConsent()
    {
        return $this->container['marketing_consent'];
    }

    /**
     * Sets marketing_consent
     *
     * @param bool|null $marketing_consent marketing_consent
     *
     * @return self
     */
    public function setMarketingConsent($marketing_consent)
    {
        $this->container['marketing_consent'] = $marketing_consent;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return array<string,mixed>|null
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param array<string,mixed>|null $extra_data extra_data
     *
     * @return self
     */
    public function setExtraData($extra_data)
    {
        $this->container['extra_data'] = $extra_data;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


