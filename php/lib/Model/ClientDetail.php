<?php
/**
 * ClientDetail
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClientDetail Class Doc Comment
 *
 * @category Class
 * @description A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ClientDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'email' => 'string',
        'birthdate' => '\DateTime',
        'tos_consent' => 'bool',
        'marketing_consent' => 'bool',
        'data_consent' => 'bool',
        'tos_consent_date' => '\DateTime',
        'tax_information' => 'string[]',
        'country_birth' => '\OpenAPI\Client\Model\CountryField',
        'last_login' => '\DateTime',
        'referred_by' => 'string',
        'successful_referrals' => 'int',
        'kyc_verified' => 'bool',
        'is_verified' => 'bool',
        'fee_segments' => 'string[]',
        'extra_data' => 'array<string,mixed>',
        'portfolios' => 'string[]',
        'onboarded_by' => 'string',
        'risk_level' => 'int',
        'onboarding_token' => 'string',
        'uuid' => 'string',
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'comments' => 'string',
        'status' => 'StatusB65Enum',
        'email_verified' => 'bool',
        'email_verify_last_request' => '\DateTime',
        'title' => 'OneOfTitleEnumBlankEnumNullEnum',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'gender' => 'OneOfGenderEnumBlankEnumNullEnum',
        'marital_status' => 'OneOfMaritalStatusEnumBlankEnumNullEnum',
        'phone_number' => 'string',
        'phone_number_verified' => '\DateTime',
        'language' => 'string',
        'employment_status' => 'OneOfEmploymentStatusEnumBlankEnumNullEnum',
        'profession' => 'string',
        'referral_code' => 'string',
        'activated' => '\DateTime',
        'utm_source' => 'string',
        'utm_medium' => 'string',
        'utm_campaign' => 'string',
        'utm_term' => 'string',
        'utm_content' => 'string',
        'marketing_consent_date' => '\DateTime',
        'data_consent_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'email' => 'email',
        'birthdate' => 'date',
        'tos_consent' => null,
        'marketing_consent' => null,
        'data_consent' => null,
        'tos_consent_date' => 'date',
        'tax_information' => null,
        'country_birth' => null,
        'last_login' => 'date-time',
        'referred_by' => null,
        'successful_referrals' => null,
        'kyc_verified' => null,
        'is_verified' => null,
        'fee_segments' => null,
        'extra_data' => null,
        'portfolios' => null,
        'onboarded_by' => null,
        'risk_level' => null,
        'onboarding_token' => null,
        'uuid' => 'uuid',
        'created' => 'date-time',
        'updated' => 'date-time',
        'comments' => null,
        'status' => null,
        'email_verified' => null,
        'email_verify_last_request' => 'date-time',
        'title' => null,
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'gender' => null,
        'marital_status' => null,
        'phone_number' => null,
        'phone_number_verified' => 'date-time',
        'language' => null,
        'employment_status' => null,
        'profession' => null,
        'referral_code' => null,
        'activated' => 'date-time',
        'utm_source' => null,
        'utm_medium' => null,
        'utm_campaign' => null,
        'utm_term' => null,
        'utm_content' => null,
        'marketing_consent_date' => 'date',
        'data_consent_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'email' => 'email',
        'birthdate' => 'birthdate',
        'tos_consent' => 'tos_consent',
        'marketing_consent' => 'marketing_consent',
        'data_consent' => 'data_consent',
        'tos_consent_date' => 'tos_consent_date',
        'tax_information' => 'tax_information',
        'country_birth' => 'country_birth',
        'last_login' => 'last_login',
        'referred_by' => 'referred_by',
        'successful_referrals' => 'successful_referrals',
        'kyc_verified' => 'kyc_verified',
        'is_verified' => 'is_verified',
        'fee_segments' => 'fee_segments',
        'extra_data' => 'extra_data',
        'portfolios' => 'portfolios',
        'onboarded_by' => 'onboarded_by',
        'risk_level' => 'risk_level',
        'onboarding_token' => 'onboarding_token',
        'uuid' => 'uuid',
        'created' => 'created',
        'updated' => 'updated',
        'comments' => 'comments',
        'status' => 'status',
        'email_verified' => 'email_verified',
        'email_verify_last_request' => 'email_verify_last_request',
        'title' => 'title',
        'first_name' => 'first_name',
        'middle_name' => 'middle_name',
        'last_name' => 'last_name',
        'gender' => 'gender',
        'marital_status' => 'marital_status',
        'phone_number' => 'phone_number',
        'phone_number_verified' => 'phone_number_verified',
        'language' => 'language',
        'employment_status' => 'employment_status',
        'profession' => 'profession',
        'referral_code' => 'referral_code',
        'activated' => 'activated',
        'utm_source' => 'utm_source',
        'utm_medium' => 'utm_medium',
        'utm_campaign' => 'utm_campaign',
        'utm_term' => 'utm_term',
        'utm_content' => 'utm_content',
        'marketing_consent_date' => 'marketing_consent_date',
        'data_consent_date' => 'data_consent_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'email' => 'setEmail',
        'birthdate' => 'setBirthdate',
        'tos_consent' => 'setTosConsent',
        'marketing_consent' => 'setMarketingConsent',
        'data_consent' => 'setDataConsent',
        'tos_consent_date' => 'setTosConsentDate',
        'tax_information' => 'setTaxInformation',
        'country_birth' => 'setCountryBirth',
        'last_login' => 'setLastLogin',
        'referred_by' => 'setReferredBy',
        'successful_referrals' => 'setSuccessfulReferrals',
        'kyc_verified' => 'setKycVerified',
        'is_verified' => 'setIsVerified',
        'fee_segments' => 'setFeeSegments',
        'extra_data' => 'setExtraData',
        'portfolios' => 'setPortfolios',
        'onboarded_by' => 'setOnboardedBy',
        'risk_level' => 'setRiskLevel',
        'onboarding_token' => 'setOnboardingToken',
        'uuid' => 'setUuid',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'comments' => 'setComments',
        'status' => 'setStatus',
        'email_verified' => 'setEmailVerified',
        'email_verify_last_request' => 'setEmailVerifyLastRequest',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'gender' => 'setGender',
        'marital_status' => 'setMaritalStatus',
        'phone_number' => 'setPhoneNumber',
        'phone_number_verified' => 'setPhoneNumberVerified',
        'language' => 'setLanguage',
        'employment_status' => 'setEmploymentStatus',
        'profession' => 'setProfession',
        'referral_code' => 'setReferralCode',
        'activated' => 'setActivated',
        'utm_source' => 'setUtmSource',
        'utm_medium' => 'setUtmMedium',
        'utm_campaign' => 'setUtmCampaign',
        'utm_term' => 'setUtmTerm',
        'utm_content' => 'setUtmContent',
        'marketing_consent_date' => 'setMarketingConsentDate',
        'data_consent_date' => 'setDataConsentDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'email' => 'getEmail',
        'birthdate' => 'getBirthdate',
        'tos_consent' => 'getTosConsent',
        'marketing_consent' => 'getMarketingConsent',
        'data_consent' => 'getDataConsent',
        'tos_consent_date' => 'getTosConsentDate',
        'tax_information' => 'getTaxInformation',
        'country_birth' => 'getCountryBirth',
        'last_login' => 'getLastLogin',
        'referred_by' => 'getReferredBy',
        'successful_referrals' => 'getSuccessfulReferrals',
        'kyc_verified' => 'getKycVerified',
        'is_verified' => 'getIsVerified',
        'fee_segments' => 'getFeeSegments',
        'extra_data' => 'getExtraData',
        'portfolios' => 'getPortfolios',
        'onboarded_by' => 'getOnboardedBy',
        'risk_level' => 'getRiskLevel',
        'onboarding_token' => 'getOnboardingToken',
        'uuid' => 'getUuid',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'comments' => 'getComments',
        'status' => 'getStatus',
        'email_verified' => 'getEmailVerified',
        'email_verify_last_request' => 'getEmailVerifyLastRequest',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'gender' => 'getGender',
        'marital_status' => 'getMaritalStatus',
        'phone_number' => 'getPhoneNumber',
        'phone_number_verified' => 'getPhoneNumberVerified',
        'language' => 'getLanguage',
        'employment_status' => 'getEmploymentStatus',
        'profession' => 'getProfession',
        'referral_code' => 'getReferralCode',
        'activated' => 'getActivated',
        'utm_source' => 'getUtmSource',
        'utm_medium' => 'getUtmMedium',
        'utm_campaign' => 'getUtmCampaign',
        'utm_term' => 'getUtmTerm',
        'utm_content' => 'getUtmContent',
        'marketing_consent_date' => 'getMarketingConsentDate',
        'data_consent_date' => 'getDataConsentDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email'] = $data['email'] ?? null;
        $this->container['birthdate'] = $data['birthdate'] ?? null;
        $this->container['tos_consent'] = $data['tos_consent'] ?? null;
        $this->container['marketing_consent'] = $data['marketing_consent'] ?? null;
        $this->container['data_consent'] = $data['data_consent'] ?? null;
        $this->container['tos_consent_date'] = $data['tos_consent_date'] ?? null;
        $this->container['tax_information'] = $data['tax_information'] ?? null;
        $this->container['country_birth'] = $data['country_birth'] ?? null;
        $this->container['last_login'] = $data['last_login'] ?? null;
        $this->container['referred_by'] = $data['referred_by'] ?? null;
        $this->container['successful_referrals'] = $data['successful_referrals'] ?? null;
        $this->container['kyc_verified'] = $data['kyc_verified'] ?? null;
        $this->container['is_verified'] = $data['is_verified'] ?? null;
        $this->container['fee_segments'] = $data['fee_segments'] ?? null;
        $this->container['extra_data'] = $data['extra_data'] ?? null;
        $this->container['portfolios'] = $data['portfolios'] ?? null;
        $this->container['onboarded_by'] = $data['onboarded_by'] ?? null;
        $this->container['risk_level'] = $data['risk_level'] ?? null;
        $this->container['onboarding_token'] = $data['onboarding_token'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['updated'] = $data['updated'] ?? null;
        $this->container['comments'] = $data['comments'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['email_verified'] = $data['email_verified'] ?? null;
        $this->container['email_verify_last_request'] = $data['email_verify_last_request'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['middle_name'] = $data['middle_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['gender'] = $data['gender'] ?? null;
        $this->container['marital_status'] = $data['marital_status'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['phone_number_verified'] = $data['phone_number_verified'] ?? null;
        $this->container['language'] = $data['language'] ?? null;
        $this->container['employment_status'] = $data['employment_status'] ?? null;
        $this->container['profession'] = $data['profession'] ?? null;
        $this->container['referral_code'] = $data['referral_code'] ?? null;
        $this->container['activated'] = $data['activated'] ?? null;
        $this->container['utm_source'] = $data['utm_source'] ?? null;
        $this->container['utm_medium'] = $data['utm_medium'] ?? null;
        $this->container['utm_campaign'] = $data['utm_campaign'] ?? null;
        $this->container['utm_term'] = $data['utm_term'] ?? null;
        $this->container['utm_content'] = $data['utm_content'] ?? null;
        $this->container['marketing_consent_date'] = $data['marketing_consent_date'] ?? null;
        $this->container['data_consent_date'] = $data['data_consent_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['tos_consent'] === null) {
            $invalidProperties[] = "'tos_consent' can't be null";
        }
        if ($this->container['marketing_consent'] === null) {
            $invalidProperties[] = "'marketing_consent' can't be null";
        }
        if ($this->container['data_consent'] === null) {
            $invalidProperties[] = "'data_consent' can't be null";
        }
        if ($this->container['tos_consent_date'] === null) {
            $invalidProperties[] = "'tos_consent_date' can't be null";
        }
        if ($this->container['tax_information'] === null) {
            $invalidProperties[] = "'tax_information' can't be null";
        }
        if ($this->container['country_birth'] === null) {
            $invalidProperties[] = "'country_birth' can't be null";
        }
        if ($this->container['last_login'] === null) {
            $invalidProperties[] = "'last_login' can't be null";
        }
        if ($this->container['referred_by'] === null) {
            $invalidProperties[] = "'referred_by' can't be null";
        }
        if ($this->container['successful_referrals'] === null) {
            $invalidProperties[] = "'successful_referrals' can't be null";
        }
        if ($this->container['kyc_verified'] === null) {
            $invalidProperties[] = "'kyc_verified' can't be null";
        }
        if ($this->container['is_verified'] === null) {
            $invalidProperties[] = "'is_verified' can't be null";
        }
        if ($this->container['fee_segments'] === null) {
            $invalidProperties[] = "'fee_segments' can't be null";
        }
        if ($this->container['extra_data'] === null) {
            $invalidProperties[] = "'extra_data' can't be null";
        }
        if ($this->container['portfolios'] === null) {
            $invalidProperties[] = "'portfolios' can't be null";
        }
        if ($this->container['risk_level'] === null) {
            $invalidProperties[] = "'risk_level' can't be null";
        }
        if ($this->container['onboarding_token'] === null) {
            $invalidProperties[] = "'onboarding_token' can't be null";
        }
        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['updated'] === null) {
            $invalidProperties[] = "'updated' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ((mb_strlen($this->container['language']) > 5)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['profession']) && (mb_strlen($this->container['profession']) > 250)) {
            $invalidProperties[] = "invalid value for 'profession', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['referral_code']) && (mb_strlen($this->container['referral_code']) > 250)) {
            $invalidProperties[] = "invalid value for 'referral_code', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_source']) && (mb_strlen($this->container['utm_source']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_source', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_medium']) && (mb_strlen($this->container['utm_medium']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_medium', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_campaign']) && (mb_strlen($this->container['utm_campaign']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_campaign', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_term']) && (mb_strlen($this->container['utm_term']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_term', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['utm_content']) && (mb_strlen($this->container['utm_content']) > 250)) {
            $invalidProperties[] = "invalid value for 'utm_content', the character length must be smaller than or equal to 250.";
        }

        if ($this->container['marketing_consent_date'] === null) {
            $invalidProperties[] = "'marketing_consent_date' can't be null";
        }
        if ($this->container['data_consent_date'] === null) {
            $invalidProperties[] = "'data_consent_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return \DateTime|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \DateTime|null $birthdate birthdate
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets tos_consent
     *
     * @return bool
     */
    public function getTosConsent()
    {
        return $this->container['tos_consent'];
    }

    /**
     * Sets tos_consent
     *
     * @param bool $tos_consent tos_consent
     *
     * @return self
     */
    public function setTosConsent($tos_consent)
    {
        $this->container['tos_consent'] = $tos_consent;

        return $this;
    }

    /**
     * Gets marketing_consent
     *
     * @return bool
     */
    public function getMarketingConsent()
    {
        return $this->container['marketing_consent'];
    }

    /**
     * Sets marketing_consent
     *
     * @param bool $marketing_consent marketing_consent
     *
     * @return self
     */
    public function setMarketingConsent($marketing_consent)
    {
        $this->container['marketing_consent'] = $marketing_consent;

        return $this;
    }

    /**
     * Gets data_consent
     *
     * @return bool
     */
    public function getDataConsent()
    {
        return $this->container['data_consent'];
    }

    /**
     * Sets data_consent
     *
     * @param bool $data_consent data_consent
     *
     * @return self
     */
    public function setDataConsent($data_consent)
    {
        $this->container['data_consent'] = $data_consent;

        return $this;
    }

    /**
     * Gets tos_consent_date
     *
     * @return \DateTime
     */
    public function getTosConsentDate()
    {
        return $this->container['tos_consent_date'];
    }

    /**
     * Sets tos_consent_date
     *
     * @param \DateTime $tos_consent_date tos_consent_date
     *
     * @return self
     */
    public function setTosConsentDate($tos_consent_date)
    {
        $this->container['tos_consent_date'] = $tos_consent_date;

        return $this;
    }

    /**
     * Gets tax_information
     *
     * @return string[]
     */
    public function getTaxInformation()
    {
        return $this->container['tax_information'];
    }

    /**
     * Sets tax_information
     *
     * @param string[] $tax_information tax_information
     *
     * @return self
     */
    public function setTaxInformation($tax_information)
    {
        $this->container['tax_information'] = $tax_information;

        return $this;
    }

    /**
     * Gets country_birth
     *
     * @return \OpenAPI\Client\Model\CountryField
     */
    public function getCountryBirth()
    {
        return $this->container['country_birth'];
    }

    /**
     * Sets country_birth
     *
     * @param \OpenAPI\Client\Model\CountryField $country_birth country_birth
     *
     * @return self
     */
    public function setCountryBirth($country_birth)
    {
        $this->container['country_birth'] = $country_birth;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return \DateTime
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param \DateTime $last_login last_login
     *
     * @return self
     */
    public function setLastLogin($last_login)
    {
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets referred_by
     *
     * @return string
     */
    public function getReferredBy()
    {
        return $this->container['referred_by'];
    }

    /**
     * Sets referred_by
     *
     * @param string $referred_by referred_by
     *
     * @return self
     */
    public function setReferredBy($referred_by)
    {
        $this->container['referred_by'] = $referred_by;

        return $this;
    }

    /**
     * Gets successful_referrals
     *
     * @return int
     */
    public function getSuccessfulReferrals()
    {
        return $this->container['successful_referrals'];
    }

    /**
     * Sets successful_referrals
     *
     * @param int $successful_referrals successful_referrals
     *
     * @return self
     */
    public function setSuccessfulReferrals($successful_referrals)
    {
        $this->container['successful_referrals'] = $successful_referrals;

        return $this;
    }

    /**
     * Gets kyc_verified
     *
     * @return bool
     */
    public function getKycVerified()
    {
        return $this->container['kyc_verified'];
    }

    /**
     * Sets kyc_verified
     *
     * @param bool $kyc_verified kyc_verified
     *
     * @return self
     */
    public function setKycVerified($kyc_verified)
    {
        $this->container['kyc_verified'] = $kyc_verified;

        return $this;
    }

    /**
     * Gets is_verified
     *
     * @return bool
     */
    public function getIsVerified()
    {
        return $this->container['is_verified'];
    }

    /**
     * Sets is_verified
     *
     * @param bool $is_verified is_verified
     *
     * @return self
     */
    public function setIsVerified($is_verified)
    {
        $this->container['is_verified'] = $is_verified;

        return $this;
    }

    /**
     * Gets fee_segments
     *
     * @return string[]
     */
    public function getFeeSegments()
    {
        return $this->container['fee_segments'];
    }

    /**
     * Sets fee_segments
     *
     * @param string[] $fee_segments fee_segments
     *
     * @return self
     */
    public function setFeeSegments($fee_segments)
    {
        $this->container['fee_segments'] = $fee_segments;

        return $this;
    }

    /**
     * Gets extra_data
     *
     * @return array<string,mixed>
     */
    public function getExtraData()
    {
        return $this->container['extra_data'];
    }

    /**
     * Sets extra_data
     *
     * @param array<string,mixed> $extra_data extra_data
     *
     * @return self
     */
    public function setExtraData($extra_data)
    {
        $this->container['extra_data'] = $extra_data;

        return $this;
    }

    /**
     * Gets portfolios
     *
     * @return string[]
     */
    public function getPortfolios()
    {
        return $this->container['portfolios'];
    }

    /**
     * Sets portfolios
     *
     * @param string[] $portfolios portfolios
     *
     * @return self
     */
    public function setPortfolios($portfolios)
    {
        $this->container['portfolios'] = $portfolios;

        return $this;
    }

    /**
     * Gets onboarded_by
     *
     * @return string|null
     */
    public function getOnboardedBy()
    {
        return $this->container['onboarded_by'];
    }

    /**
     * Sets onboarded_by
     *
     * @param string|null $onboarded_by onboarded_by
     *
     * @return self
     */
    public function setOnboardedBy($onboarded_by)
    {
        $this->container['onboarded_by'] = $onboarded_by;

        return $this;
    }

    /**
     * Gets risk_level
     *
     * @return int
     */
    public function getRiskLevel()
    {
        return $this->container['risk_level'];
    }

    /**
     * Sets risk_level
     *
     * @param int $risk_level risk_level
     *
     * @return self
     */
    public function setRiskLevel($risk_level)
    {
        $this->container['risk_level'] = $risk_level;

        return $this;
    }

    /**
     * Gets onboarding_token
     *
     * @return string
     */
    public function getOnboardingToken()
    {
        return $this->container['onboarding_token'];
    }

    /**
     * Sets onboarding_token
     *
     * @param string $onboarding_token onboarding_token
     *
     * @return self
     */
    public function setOnboardingToken($onboarding_token)
    {
        $this->container['onboarding_token'] = $onboarding_token;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated updated
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets status
     *
     * @return StatusB65Enum
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param StatusB65Enum $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets email_verified
     *
     * @return bool|null
     */
    public function getEmailVerified()
    {
        return $this->container['email_verified'];
    }

    /**
     * Sets email_verified
     *
     * @param bool|null $email_verified email_verified
     *
     * @return self
     */
    public function setEmailVerified($email_verified)
    {
        $this->container['email_verified'] = $email_verified;

        return $this;
    }

    /**
     * Gets email_verify_last_request
     *
     * @return \DateTime|null
     */
    public function getEmailVerifyLastRequest()
    {
        return $this->container['email_verify_last_request'];
    }

    /**
     * Sets email_verify_last_request
     *
     * @param \DateTime|null $email_verify_last_request email_verify_last_request
     *
     * @return self
     */
    public function setEmailVerifyLastRequest($email_verify_last_request)
    {
        $this->container['email_verify_last_request'] = $email_verify_last_request;

        return $this;
    }

    /**
     * Gets title
     *
     * @return OneOfTitleEnumBlankEnumNullEnum|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param OneOfTitleEnumBlankEnumNullEnum|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return OneOfGenderEnumBlankEnumNullEnum|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param OneOfGenderEnumBlankEnumNullEnum|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return OneOfMaritalStatusEnumBlankEnumNullEnum|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param OneOfMaritalStatusEnumBlankEnumNullEnum|null $marital_status marital_status
     *
     * @return self
     */
    public function setMaritalStatus($marital_status)
    {
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_number_verified
     *
     * @return \DateTime|null
     */
    public function getPhoneNumberVerified()
    {
        return $this->container['phone_number_verified'];
    }

    /**
     * Sets phone_number_verified
     *
     * @param \DateTime|null $phone_number_verified phone_number_verified
     *
     * @return self
     */
    public function setPhoneNumberVerified($phone_number_verified)
    {
        $this->container['phone_number_verified'] = $phone_number_verified;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if ((mb_strlen($language) > 5)) {
            throw new \InvalidArgumentException('invalid length for $language when calling ClientDetail., must be smaller than or equal to 5.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets employment_status
     *
     * @return OneOfEmploymentStatusEnumBlankEnumNullEnum|null
     */
    public function getEmploymentStatus()
    {
        return $this->container['employment_status'];
    }

    /**
     * Sets employment_status
     *
     * @param OneOfEmploymentStatusEnumBlankEnumNullEnum|null $employment_status employment_status
     *
     * @return self
     */
    public function setEmploymentStatus($employment_status)
    {
        $this->container['employment_status'] = $employment_status;

        return $this;
    }

    /**
     * Gets profession
     *
     * @return string|null
     */
    public function getProfession()
    {
        return $this->container['profession'];
    }

    /**
     * Sets profession
     *
     * @param string|null $profession profession
     *
     * @return self
     */
    public function setProfession($profession)
    {
        if (!is_null($profession) && (mb_strlen($profession) > 250)) {
            throw new \InvalidArgumentException('invalid length for $profession when calling ClientDetail., must be smaller than or equal to 250.');
        }

        $this->container['profession'] = $profession;

        return $this;
    }

    /**
     * Gets referral_code
     *
     * @return string|null
     */
    public function getReferralCode()
    {
        return $this->container['referral_code'];
    }

    /**
     * Sets referral_code
     *
     * @param string|null $referral_code referral_code
     *
     * @return self
     */
    public function setReferralCode($referral_code)
    {
        if (!is_null($referral_code) && (mb_strlen($referral_code) > 250)) {
            throw new \InvalidArgumentException('invalid length for $referral_code when calling ClientDetail., must be smaller than or equal to 250.');
        }

        $this->container['referral_code'] = $referral_code;

        return $this;
    }

    /**
     * Gets activated
     *
     * @return \DateTime|null
     */
    public function getActivated()
    {
        return $this->container['activated'];
    }

    /**
     * Sets activated
     *
     * @param \DateTime|null $activated activated
     *
     * @return self
     */
    public function setActivated($activated)
    {
        $this->container['activated'] = $activated;

        return $this;
    }

    /**
     * Gets utm_source
     *
     * @return string|null
     */
    public function getUtmSource()
    {
        return $this->container['utm_source'];
    }

    /**
     * Sets utm_source
     *
     * @param string|null $utm_source utm_source
     *
     * @return self
     */
    public function setUtmSource($utm_source)
    {
        if (!is_null($utm_source) && (mb_strlen($utm_source) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_source when calling ClientDetail., must be smaller than or equal to 250.');
        }

        $this->container['utm_source'] = $utm_source;

        return $this;
    }

    /**
     * Gets utm_medium
     *
     * @return string|null
     */
    public function getUtmMedium()
    {
        return $this->container['utm_medium'];
    }

    /**
     * Sets utm_medium
     *
     * @param string|null $utm_medium utm_medium
     *
     * @return self
     */
    public function setUtmMedium($utm_medium)
    {
        if (!is_null($utm_medium) && (mb_strlen($utm_medium) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_medium when calling ClientDetail., must be smaller than or equal to 250.');
        }

        $this->container['utm_medium'] = $utm_medium;

        return $this;
    }

    /**
     * Gets utm_campaign
     *
     * @return string|null
     */
    public function getUtmCampaign()
    {
        return $this->container['utm_campaign'];
    }

    /**
     * Sets utm_campaign
     *
     * @param string|null $utm_campaign utm_campaign
     *
     * @return self
     */
    public function setUtmCampaign($utm_campaign)
    {
        if (!is_null($utm_campaign) && (mb_strlen($utm_campaign) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_campaign when calling ClientDetail., must be smaller than or equal to 250.');
        }

        $this->container['utm_campaign'] = $utm_campaign;

        return $this;
    }

    /**
     * Gets utm_term
     *
     * @return string|null
     */
    public function getUtmTerm()
    {
        return $this->container['utm_term'];
    }

    /**
     * Sets utm_term
     *
     * @param string|null $utm_term utm_term
     *
     * @return self
     */
    public function setUtmTerm($utm_term)
    {
        if (!is_null($utm_term) && (mb_strlen($utm_term) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_term when calling ClientDetail., must be smaller than or equal to 250.');
        }

        $this->container['utm_term'] = $utm_term;

        return $this;
    }

    /**
     * Gets utm_content
     *
     * @return string|null
     */
    public function getUtmContent()
    {
        return $this->container['utm_content'];
    }

    /**
     * Sets utm_content
     *
     * @param string|null $utm_content utm_content
     *
     * @return self
     */
    public function setUtmContent($utm_content)
    {
        if (!is_null($utm_content) && (mb_strlen($utm_content) > 250)) {
            throw new \InvalidArgumentException('invalid length for $utm_content when calling ClientDetail., must be smaller than or equal to 250.');
        }

        $this->container['utm_content'] = $utm_content;

        return $this;
    }

    /**
     * Gets marketing_consent_date
     *
     * @return \DateTime
     */
    public function getMarketingConsentDate()
    {
        return $this->container['marketing_consent_date'];
    }

    /**
     * Sets marketing_consent_date
     *
     * @param \DateTime $marketing_consent_date marketing_consent_date
     *
     * @return self
     */
    public function setMarketingConsentDate($marketing_consent_date)
    {
        $this->container['marketing_consent_date'] = $marketing_consent_date;

        return $this;
    }

    /**
     * Gets data_consent_date
     *
     * @return \DateTime
     */
    public function getDataConsentDate()
    {
        return $this->container['data_consent_date'];
    }

    /**
     * Sets data_consent_date
     *
     * @param \DateTime $data_consent_date data_consent_date
     *
     * @return self
     */
    public function setDataConsentDate($data_consent_date)
    {
        $this->container['data_consent_date'] = $data_consent_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


