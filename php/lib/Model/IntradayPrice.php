<?php
/**
 * IntradayPrice
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IntradayPrice Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class IntradayPrice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IntradayPrice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'double',
        'datetime' => '\DateTime',
        'open_price' => 'double',
        'high_price' => 'double',
        'low_price' => 'double',
        'previous_close_price' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => 'double',
        'datetime' => 'date-time',
        'open_price' => 'double',
        'high_price' => 'double',
        'low_price' => 'double',
        'previous_close_price' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'datetime' => 'datetime',
        'open_price' => 'open_price',
        'high_price' => 'high_price',
        'low_price' => 'low_price',
        'previous_close_price' => 'previous_close_price'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'datetime' => 'setDatetime',
        'open_price' => 'setOpenPrice',
        'high_price' => 'setHighPrice',
        'low_price' => 'setLowPrice',
        'previous_close_price' => 'setPreviousClosePrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'datetime' => 'getDatetime',
        'open_price' => 'getOpenPrice',
        'high_price' => 'getHighPrice',
        'low_price' => 'getLowPrice',
        'previous_close_price' => 'getPreviousClosePrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['datetime'] = $data['datetime'] ?? null;
        $this->container['open_price'] = $data['open_price'] ?? null;
        $this->container['high_price'] = $data['high_price'] ?? null;
        $this->container['low_price'] = $data['low_price'] ?? null;
        $this->container['previous_close_price'] = $data['previous_close_price'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['amount'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['datetime'] === null) {
            $invalidProperties[] = "'datetime' can't be null";
        }
        if ($this->container['open_price'] === null) {
            $invalidProperties[] = "'open_price' can't be null";
        }
        if (($this->container['open_price'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'open_price', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['open_price'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'open_price', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['high_price'] === null) {
            $invalidProperties[] = "'high_price' can't be null";
        }
        if (($this->container['high_price'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'high_price', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['high_price'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'high_price', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['low_price'] === null) {
            $invalidProperties[] = "'low_price' can't be null";
        }
        if (($this->container['low_price'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'low_price', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['low_price'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'low_price', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['previous_close_price'] === null) {
            $invalidProperties[] = "'previous_close_price' can't be null";
        }
        if (($this->container['previous_close_price'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'previous_close_price', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['previous_close_price'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'previous_close_price', must be bigger than or equal to -1000000000000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (($amount > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling IntradayPrice., must be smaller than or equal to 1000000000000.');
        }
        if (($amount < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling IntradayPrice., must be bigger than or equal to -1000000000000.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets datetime
     *
     * @return \DateTime
     */
    public function getDatetime()
    {
        return $this->container['datetime'];
    }

    /**
     * Sets datetime
     *
     * @param \DateTime $datetime datetime
     *
     * @return self
     */
    public function setDatetime($datetime)
    {
        $this->container['datetime'] = $datetime;

        return $this;
    }

    /**
     * Gets open_price
     *
     * @return double
     */
    public function getOpenPrice()
    {
        return $this->container['open_price'];
    }

    /**
     * Sets open_price
     *
     * @param double $open_price open_price
     *
     * @return self
     */
    public function setOpenPrice($open_price)
    {

        if (($open_price > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $open_price when calling IntradayPrice., must be smaller than or equal to 1000000000000.');
        }
        if (($open_price < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $open_price when calling IntradayPrice., must be bigger than or equal to -1000000000000.');
        }

        $this->container['open_price'] = $open_price;

        return $this;
    }

    /**
     * Gets high_price
     *
     * @return double
     */
    public function getHighPrice()
    {
        return $this->container['high_price'];
    }

    /**
     * Sets high_price
     *
     * @param double $high_price high_price
     *
     * @return self
     */
    public function setHighPrice($high_price)
    {

        if (($high_price > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $high_price when calling IntradayPrice., must be smaller than or equal to 1000000000000.');
        }
        if (($high_price < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $high_price when calling IntradayPrice., must be bigger than or equal to -1000000000000.');
        }

        $this->container['high_price'] = $high_price;

        return $this;
    }

    /**
     * Gets low_price
     *
     * @return double
     */
    public function getLowPrice()
    {
        return $this->container['low_price'];
    }

    /**
     * Sets low_price
     *
     * @param double $low_price low_price
     *
     * @return self
     */
    public function setLowPrice($low_price)
    {

        if (($low_price > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $low_price when calling IntradayPrice., must be smaller than or equal to 1000000000000.');
        }
        if (($low_price < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $low_price when calling IntradayPrice., must be bigger than or equal to -1000000000000.');
        }

        $this->container['low_price'] = $low_price;

        return $this;
    }

    /**
     * Gets previous_close_price
     *
     * @return double
     */
    public function getPreviousClosePrice()
    {
        return $this->container['previous_close_price'];
    }

    /**
     * Sets previous_close_price
     *
     * @param double $previous_close_price previous_close_price
     *
     * @return self
     */
    public function setPreviousClosePrice($previous_close_price)
    {

        if (($previous_close_price > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $previous_close_price when calling IntradayPrice., must be smaller than or equal to 1000000000000.');
        }
        if (($previous_close_price < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $previous_close_price when calling IntradayPrice., must be bigger than or equal to -1000000000000.');
        }

        $this->container['previous_close_price'] = $previous_close_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


