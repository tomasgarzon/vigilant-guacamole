<?php
/**
 * CurrentAllocation
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CurrentAllocation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CurrentAllocation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CurrentAllocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cash_active' => 'double',
        'balance' => 'double',
        'invested' => 'double',
        'earnings' => 'double',
        'positions' => '\OpenAPI\Client\Model\Position[]',
        'valuation_datetime' => '\DateTime',
        'performance' => 'double',
        'trade_total' => 'double',
        'cash_available' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cash_active' => 'double',
        'balance' => 'double',
        'invested' => 'double',
        'earnings' => 'double',
        'positions' => null,
        'valuation_datetime' => 'date-time',
        'performance' => 'double',
        'trade_total' => 'double',
        'cash_available' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cash_active' => 'cash_active',
        'balance' => 'balance',
        'invested' => 'invested',
        'earnings' => 'earnings',
        'positions' => 'positions',
        'valuation_datetime' => 'valuation_datetime',
        'performance' => 'performance',
        'trade_total' => 'trade_total',
        'cash_available' => 'cash_available'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cash_active' => 'setCashActive',
        'balance' => 'setBalance',
        'invested' => 'setInvested',
        'earnings' => 'setEarnings',
        'positions' => 'setPositions',
        'valuation_datetime' => 'setValuationDatetime',
        'performance' => 'setPerformance',
        'trade_total' => 'setTradeTotal',
        'cash_available' => 'setCashAvailable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cash_active' => 'getCashActive',
        'balance' => 'getBalance',
        'invested' => 'getInvested',
        'earnings' => 'getEarnings',
        'positions' => 'getPositions',
        'valuation_datetime' => 'getValuationDatetime',
        'performance' => 'getPerformance',
        'trade_total' => 'getTradeTotal',
        'cash_available' => 'getCashAvailable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cash_active'] = $data['cash_active'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['invested'] = $data['invested'] ?? null;
        $this->container['earnings'] = $data['earnings'] ?? null;
        $this->container['positions'] = $data['positions'] ?? null;
        $this->container['valuation_datetime'] = $data['valuation_datetime'] ?? null;
        $this->container['performance'] = $data['performance'] ?? 0.0;
        $this->container['trade_total'] = $data['trade_total'] ?? null;
        $this->container['cash_available'] = $data['cash_available'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cash_active'] === null) {
            $invalidProperties[] = "'cash_active' can't be null";
        }
        if (($this->container['cash_active'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'cash_active', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['cash_active'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'cash_active', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if (($this->container['balance'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'balance', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['balance'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'balance', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['invested'] === null) {
            $invalidProperties[] = "'invested' can't be null";
        }
        if (($this->container['invested'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'invested', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['invested'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'invested', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['earnings'] === null) {
            $invalidProperties[] = "'earnings' can't be null";
        }
        if (($this->container['earnings'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'earnings', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['earnings'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'earnings', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['positions'] === null) {
            $invalidProperties[] = "'positions' can't be null";
        }
        if ($this->container['valuation_datetime'] === null) {
            $invalidProperties[] = "'valuation_datetime' can't be null";
        }
        if (!is_null($this->container['performance']) && ($this->container['performance'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'performance', must be smaller than or equal to 1000000000000.";
        }

        if (!is_null($this->container['performance']) && ($this->container['performance'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'performance', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['trade_total'] === null) {
            $invalidProperties[] = "'trade_total' can't be null";
        }
        if (($this->container['trade_total'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'trade_total', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['trade_total'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'trade_total', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['cash_available'] === null) {
            $invalidProperties[] = "'cash_available' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cash_active
     *
     * @return double
     */
    public function getCashActive()
    {
        return $this->container['cash_active'];
    }

    /**
     * Sets cash_active
     *
     * @param double $cash_active cash_active
     *
     * @return self
     */
    public function setCashActive($cash_active)
    {

        if (($cash_active > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $cash_active when calling CurrentAllocation., must be smaller than or equal to 1000000000000.');
        }
        if (($cash_active < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $cash_active when calling CurrentAllocation., must be bigger than or equal to -1000000000000.');
        }

        $this->container['cash_active'] = $cash_active;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {

        if (($balance > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $balance when calling CurrentAllocation., must be smaller than or equal to 1000000000000.');
        }
        if (($balance < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $balance when calling CurrentAllocation., must be bigger than or equal to -1000000000000.');
        }

        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets invested
     *
     * @return double
     */
    public function getInvested()
    {
        return $this->container['invested'];
    }

    /**
     * Sets invested
     *
     * @param double $invested invested
     *
     * @return self
     */
    public function setInvested($invested)
    {

        if (($invested > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $invested when calling CurrentAllocation., must be smaller than or equal to 1000000000000.');
        }
        if (($invested < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $invested when calling CurrentAllocation., must be bigger than or equal to -1000000000000.');
        }

        $this->container['invested'] = $invested;

        return $this;
    }

    /**
     * Gets earnings
     *
     * @return double
     */
    public function getEarnings()
    {
        return $this->container['earnings'];
    }

    /**
     * Sets earnings
     *
     * @param double $earnings earnings
     *
     * @return self
     */
    public function setEarnings($earnings)
    {

        if (($earnings > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $earnings when calling CurrentAllocation., must be smaller than or equal to 1000000000000.');
        }
        if (($earnings < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $earnings when calling CurrentAllocation., must be bigger than or equal to -1000000000000.');
        }

        $this->container['earnings'] = $earnings;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return \OpenAPI\Client\Model\Position[]
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param \OpenAPI\Client\Model\Position[] $positions positions
     *
     * @return self
     */
    public function setPositions($positions)
    {
        $this->container['positions'] = $positions;

        return $this;
    }

    /**
     * Gets valuation_datetime
     *
     * @return \DateTime
     */
    public function getValuationDatetime()
    {
        return $this->container['valuation_datetime'];
    }

    /**
     * Sets valuation_datetime
     *
     * @param \DateTime $valuation_datetime valuation_datetime
     *
     * @return self
     */
    public function setValuationDatetime($valuation_datetime)
    {
        $this->container['valuation_datetime'] = $valuation_datetime;

        return $this;
    }

    /**
     * Gets performance
     *
     * @return double|null
     */
    public function getPerformance()
    {
        return $this->container['performance'];
    }

    /**
     * Sets performance
     *
     * @param double|null $performance performance
     *
     * @return self
     */
    public function setPerformance($performance)
    {

        if (!is_null($performance) && ($performance > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $performance when calling CurrentAllocation., must be smaller than or equal to 1000000000000.');
        }
        if (!is_null($performance) && ($performance < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $performance when calling CurrentAllocation., must be bigger than or equal to -1000000000000.');
        }

        $this->container['performance'] = $performance;

        return $this;
    }

    /**
     * Gets trade_total
     *
     * @return double
     */
    public function getTradeTotal()
    {
        return $this->container['trade_total'];
    }

    /**
     * Sets trade_total
     *
     * @param double $trade_total trade_total
     *
     * @return self
     */
    public function setTradeTotal($trade_total)
    {

        if (($trade_total > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $trade_total when calling CurrentAllocation., must be smaller than or equal to 1000000000000.');
        }
        if (($trade_total < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $trade_total when calling CurrentAllocation., must be bigger than or equal to -1000000000000.');
        }

        $this->container['trade_total'] = $trade_total;

        return $this;
    }

    /**
     * Gets cash_available
     *
     * @return double
     */
    public function getCashAvailable()
    {
        return $this->container['cash_available'];
    }

    /**
     * Sets cash_available
     *
     * @param double $cash_available cash_available
     *
     * @return self
     */
    public function setCashAvailable($cash_available)
    {
        $this->container['cash_available'] = $cash_available;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


