<?php
/**
 * Position
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Position Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Position implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Position';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asset' => 'RelatedAssetSerializerWithAssetCategories',
        'shares' => 'double',
        'price' => 'double',
        'value' => 'double',
        'weight' => 'double',
        'fx_rate_account' => 'double',
        'asset_currency_value' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'asset' => null,
        'shares' => 'double',
        'price' => 'double',
        'value' => 'double',
        'weight' => 'double',
        'fx_rate_account' => 'double',
        'asset_currency_value' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset' => 'asset',
        'shares' => 'shares',
        'price' => 'price',
        'value' => 'value',
        'weight' => 'weight',
        'fx_rate_account' => 'fx_rate_account',
        'asset_currency_value' => 'asset_currency_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset' => 'setAsset',
        'shares' => 'setShares',
        'price' => 'setPrice',
        'value' => 'setValue',
        'weight' => 'setWeight',
        'fx_rate_account' => 'setFxRateAccount',
        'asset_currency_value' => 'setAssetCurrencyValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset' => 'getAsset',
        'shares' => 'getShares',
        'price' => 'getPrice',
        'value' => 'getValue',
        'weight' => 'getWeight',
        'fx_rate_account' => 'getFxRateAccount',
        'asset_currency_value' => 'getAssetCurrencyValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asset'] = $data['asset'] ?? null;
        $this->container['shares'] = $data['shares'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['fx_rate_account'] = $data['fx_rate_account'] ?? null;
        $this->container['asset_currency_value'] = $data['asset_currency_value'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['shares'] === null) {
            $invalidProperties[] = "'shares' can't be null";
        }
        if (($this->container['shares'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'shares', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['shares'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'shares', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (($this->container['price'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'price', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['price'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        if (($this->container['value'] > 1000000000000)) {
            $invalidProperties[] = "invalid value for 'value', must be smaller than or equal to 1000000000000.";
        }

        if (($this->container['value'] < -1000000000000)) {
            $invalidProperties[] = "invalid value for 'value', must be bigger than or equal to -1000000000000.";
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if ($this->container['fx_rate_account'] === null) {
            $invalidProperties[] = "'fx_rate_account' can't be null";
        }
        if ($this->container['asset_currency_value'] === null) {
            $invalidProperties[] = "'asset_currency_value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset
     *
     * @return RelatedAssetSerializerWithAssetCategories
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param RelatedAssetSerializerWithAssetCategories $asset asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return double
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param double $shares shares
     *
     * @return self
     */
    public function setShares($shares)
    {

        if (($shares > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $shares when calling Position., must be smaller than or equal to 1000000000000.');
        }
        if (($shares < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $shares when calling Position., must be bigger than or equal to -1000000000000.');
        }

        $this->container['shares'] = $shares;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (($price > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $price when calling Position., must be smaller than or equal to 1000000000000.');
        }
        if (($price < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $price when calling Position., must be bigger than or equal to -1000000000000.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets value
     *
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param double $value value
     *
     * @return self
     */
    public function setValue($value)
    {

        if (($value > 1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $value when calling Position., must be smaller than or equal to 1000000000000.');
        }
        if (($value < -1000000000000)) {
            throw new \InvalidArgumentException('invalid value for $value when calling Position., must be bigger than or equal to -1000000000000.');
        }

        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets fx_rate_account
     *
     * @return double
     */
    public function getFxRateAccount()
    {
        return $this->container['fx_rate_account'];
    }

    /**
     * Sets fx_rate_account
     *
     * @param double $fx_rate_account fx_rate_account
     *
     * @return self
     */
    public function setFxRateAccount($fx_rate_account)
    {
        $this->container['fx_rate_account'] = $fx_rate_account;

        return $this;
    }

    /**
     * Gets asset_currency_value
     *
     * @return double
     */
    public function getAssetCurrencyValue()
    {
        return $this->container['asset_currency_value'];
    }

    /**
     * Sets asset_currency_value
     *
     * @param double $asset_currency_value asset_currency_value
     *
     * @return self
     */
    public function setAssetCurrencyValue($asset_currency_value)
    {
        $this->container['asset_currency_value'] = $asset_currency_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


