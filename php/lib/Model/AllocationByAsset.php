<?php
/**
 * AllocationByAsset
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AllocationByAsset Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AllocationByAsset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AllocationByAsset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category_code' => 'string',
        'display_allocation_chart' => 'bool',
        'display_allocation_chart_configuration_error' => 'bool',
        'allocations_by_code' => '\OpenAPI\Client\Model\AllocationByCode[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category_code' => null,
        'display_allocation_chart' => null,
        'display_allocation_chart_configuration_error' => null,
        'allocations_by_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category_code' => 'category_code',
        'display_allocation_chart' => 'display_allocation_chart',
        'display_allocation_chart_configuration_error' => 'display_allocation_chart_configuration_error',
        'allocations_by_code' => 'allocations_by_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category_code' => 'setCategoryCode',
        'display_allocation_chart' => 'setDisplayAllocationChart',
        'display_allocation_chart_configuration_error' => 'setDisplayAllocationChartConfigurationError',
        'allocations_by_code' => 'setAllocationsByCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category_code' => 'getCategoryCode',
        'display_allocation_chart' => 'getDisplayAllocationChart',
        'display_allocation_chart_configuration_error' => 'getDisplayAllocationChartConfigurationError',
        'allocations_by_code' => 'getAllocationsByCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category_code'] = $data['category_code'] ?? null;
        $this->container['display_allocation_chart'] = $data['display_allocation_chart'] ?? null;
        $this->container['display_allocation_chart_configuration_error'] = $data['display_allocation_chart_configuration_error'] ?? null;
        $this->container['allocations_by_code'] = $data['allocations_by_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['category_code'] === null) {
            $invalidProperties[] = "'category_code' can't be null";
        }
        if ($this->container['display_allocation_chart'] === null) {
            $invalidProperties[] = "'display_allocation_chart' can't be null";
        }
        if ($this->container['display_allocation_chart_configuration_error'] === null) {
            $invalidProperties[] = "'display_allocation_chart_configuration_error' can't be null";
        }
        if ($this->container['allocations_by_code'] === null) {
            $invalidProperties[] = "'allocations_by_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category_code
     *
     * @return string
     */
    public function getCategoryCode()
    {
        return $this->container['category_code'];
    }

    /**
     * Sets category_code
     *
     * @param string $category_code category_code
     *
     * @return self
     */
    public function setCategoryCode($category_code)
    {
        $this->container['category_code'] = $category_code;

        return $this;
    }

    /**
     * Gets display_allocation_chart
     *
     * @return bool
     */
    public function getDisplayAllocationChart()
    {
        return $this->container['display_allocation_chart'];
    }

    /**
     * Sets display_allocation_chart
     *
     * @param bool $display_allocation_chart display_allocation_chart
     *
     * @return self
     */
    public function setDisplayAllocationChart($display_allocation_chart)
    {
        $this->container['display_allocation_chart'] = $display_allocation_chart;

        return $this;
    }

    /**
     * Gets display_allocation_chart_configuration_error
     *
     * @return bool
     */
    public function getDisplayAllocationChartConfigurationError()
    {
        return $this->container['display_allocation_chart_configuration_error'];
    }

    /**
     * Sets display_allocation_chart_configuration_error
     *
     * @param bool $display_allocation_chart_configuration_error display_allocation_chart_configuration_error
     *
     * @return self
     */
    public function setDisplayAllocationChartConfigurationError($display_allocation_chart_configuration_error)
    {
        $this->container['display_allocation_chart_configuration_error'] = $display_allocation_chart_configuration_error;

        return $this;
    }

    /**
     * Gets allocations_by_code
     *
     * @return \OpenAPI\Client\Model\AllocationByCode[]
     */
    public function getAllocationsByCode()
    {
        return $this->container['allocations_by_code'];
    }

    /**
     * Sets allocations_by_code
     *
     * @param \OpenAPI\Client\Model\AllocationByCode[] $allocations_by_code allocations_by_code
     *
     * @return self
     */
    public function setAllocationsByCode($allocations_by_code)
    {
        $this->container['allocations_by_code'] = $allocations_by_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


