<?php
/**
 * KYCApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * KYCApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class KYCApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation clientVerificationCreate
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     * @param  \OpenAPI\Client\Model\VerificationCreate $verification_create verification_create (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VerificationCreate
     */
    public function clientVerificationCreate($client_uuid, $verify_type_code, $verification_create)
    {
        list($response) = $this->clientVerificationCreateWithHttpInfo($client_uuid, $verify_type_code, $verification_create);
        return $response;
    }

    /**
     * Operation clientVerificationCreateWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  \OpenAPI\Client\Model\VerificationCreate $verification_create (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VerificationCreate, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationCreateWithHttpInfo($client_uuid, $verify_type_code, $verification_create)
    {
        $request = $this->clientVerificationCreateRequest($client_uuid, $verify_type_code, $verification_create);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\VerificationCreate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VerificationCreate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VerificationCreate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VerificationCreate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationCreateAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  \OpenAPI\Client\Model\VerificationCreate $verification_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationCreateAsync($client_uuid, $verify_type_code, $verification_create)
    {
        return $this->clientVerificationCreateAsyncWithHttpInfo($client_uuid, $verify_type_code, $verification_create)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationCreateAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  \OpenAPI\Client\Model\VerificationCreate $verification_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationCreateAsyncWithHttpInfo($client_uuid, $verify_type_code, $verification_create)
    {
        $returnType = '\OpenAPI\Client\Model\VerificationCreate';
        $request = $this->clientVerificationCreateRequest($client_uuid, $verify_type_code, $verification_create);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationCreate'
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  \OpenAPI\Client\Model\VerificationCreate $verification_create (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationCreateRequest($client_uuid, $verify_type_code, $verification_create)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationCreate'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationCreate'
            );
        }
        // verify the required parameter 'verification_create' is set
        if ($verification_create === null || (is_array($verification_create) && count($verification_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verification_create when calling clientVerificationCreate'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($verification_create)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($verification_create));
            } else {
                $httpBody = $verification_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVerificationDocumentCreate
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     * @param  string $uuid uuid (required)
     * @param  \OpenAPI\Client\Model\VerifyTypeEnum $verify_type verify_type (required)
     * @param  \DateTime $created created (required)
     * @param  \DateTime $updated updated (required)
     * @param  \OpenAPI\Client\Model\VerificationDocumentCreate[] $verification_documents verification_documents (required)
     * @param  \OpenAPI\Client\Model\StatusBd7Enum $status status (optional)
     * @param  OneOfResultEnumBlankEnum $result result (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VerificationWithType
     */
    public function clientVerificationDocumentCreate($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status = null, $result = null)
    {
        list($response) = $this->clientVerificationDocumentCreateWithHttpInfo($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status, $result);
        return $response;
    }

    /**
     * Operation clientVerificationDocumentCreateWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\VerifyTypeEnum $verify_type (required)
     * @param  \DateTime $created (required)
     * @param  \DateTime $updated (required)
     * @param  \OpenAPI\Client\Model\VerificationDocumentCreate[] $verification_documents (required)
     * @param  \OpenAPI\Client\Model\StatusBd7Enum $status (optional)
     * @param  OneOfResultEnumBlankEnum $result (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VerificationWithType, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationDocumentCreateWithHttpInfo($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status = null, $result = null)
    {
        $request = $this->clientVerificationDocumentCreateRequest($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status, $result);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\VerificationWithType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VerificationWithType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VerificationWithType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VerificationWithType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationDocumentCreateAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\VerifyTypeEnum $verify_type (required)
     * @param  \DateTime $created (required)
     * @param  \DateTime $updated (required)
     * @param  \OpenAPI\Client\Model\VerificationDocumentCreate[] $verification_documents (required)
     * @param  \OpenAPI\Client\Model\StatusBd7Enum $status (optional)
     * @param  OneOfResultEnumBlankEnum $result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentCreateAsync($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status = null, $result = null)
    {
        return $this->clientVerificationDocumentCreateAsyncWithHttpInfo($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status, $result)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationDocumentCreateAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\VerifyTypeEnum $verify_type (required)
     * @param  \DateTime $created (required)
     * @param  \DateTime $updated (required)
     * @param  \OpenAPI\Client\Model\VerificationDocumentCreate[] $verification_documents (required)
     * @param  \OpenAPI\Client\Model\StatusBd7Enum $status (optional)
     * @param  OneOfResultEnumBlankEnum $result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentCreateAsyncWithHttpInfo($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status = null, $result = null)
    {
        $returnType = '\OpenAPI\Client\Model\VerificationWithType';
        $request = $this->clientVerificationDocumentCreateRequest($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status, $result);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationDocumentCreate'
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid (required)
     * @param  \OpenAPI\Client\Model\VerifyTypeEnum $verify_type (required)
     * @param  \DateTime $created (required)
     * @param  \DateTime $updated (required)
     * @param  \OpenAPI\Client\Model\VerificationDocumentCreate[] $verification_documents (required)
     * @param  \OpenAPI\Client\Model\StatusBd7Enum $status (optional)
     * @param  OneOfResultEnumBlankEnum $result (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationDocumentCreateRequest($client_uuid, $verify_type_code, $uuid, $verify_type, $created, $updated, $verification_documents, $status = null, $result = null)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationDocumentCreate'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationDocumentCreate'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling clientVerificationDocumentCreate'
            );
        }
        // verify the required parameter 'verify_type' is set
        if ($verify_type === null || (is_array($verify_type) && count($verify_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type when calling clientVerificationDocumentCreate'
            );
        }
        // verify the required parameter 'created' is set
        if ($created === null || (is_array($created) && count($created) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $created when calling clientVerificationDocumentCreate'
            );
        }
        // verify the required parameter 'updated' is set
        if ($updated === null || (is_array($updated) && count($updated) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updated when calling clientVerificationDocumentCreate'
            );
        }
        // verify the required parameter 'verification_documents' is set
        if ($verification_documents === null || (is_array($verification_documents) && count($verification_documents) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verification_documents when calling clientVerificationDocumentCreate'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }

        // form params
        if ($uuid !== null) {
            $formParams['uuid'] = ObjectSerializer::toFormValue($uuid);
        }
        // form params
        if ($verify_type !== null) {
            $formParams['verify_type'] = ObjectSerializer::toFormValue($verify_type);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($result !== null) {
            $formParams['result'] = ObjectSerializer::toFormValue($result);
        }
        // form params
        if ($created !== null) {
            $formParams['created'] = ObjectSerializer::toFormValue($created);
        }
        // form params
        if ($updated !== null) {
            $formParams['updated'] = ObjectSerializer::toFormValue($updated);
        }
        // form params
        if ($verification_documents !== null) {
            $formParams['verification_documents'] = ObjectSerializer::toFormValue($verification_documents);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVerificationDocumentDelete
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $uuid uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clientVerificationDocumentDelete($client_uuid, $uuid, $verify_type_code)
    {
        $this->clientVerificationDocumentDeleteWithHttpInfo($client_uuid, $uuid, $verify_type_code);
    }

    /**
     * Operation clientVerificationDocumentDeleteWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationDocumentDeleteWithHttpInfo($client_uuid, $uuid, $verify_type_code)
    {
        $request = $this->clientVerificationDocumentDeleteRequest($client_uuid, $uuid, $verify_type_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationDocumentDeleteAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentDeleteAsync($client_uuid, $uuid, $verify_type_code)
    {
        return $this->clientVerificationDocumentDeleteAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationDocumentDeleteAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentDeleteAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code)
    {
        $returnType = '';
        $request = $this->clientVerificationDocumentDeleteRequest($client_uuid, $uuid, $verify_type_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationDocumentDelete'
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationDocumentDeleteRequest($client_uuid, $uuid, $verify_type_code)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationDocumentDelete'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling clientVerificationDocumentDelete'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationDocumentDelete'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVerificationDocumentList
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaginatedVerificationDocumentList
     */
    public function clientVerificationDocumentList($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        list($response) = $this->clientVerificationDocumentListWithHttpInfo($client_uuid, $verify_type_code, $limit, $offset);
        return $response;
    }

    /**
     * Operation clientVerificationDocumentListWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaginatedVerificationDocumentList, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationDocumentListWithHttpInfo($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        $request = $this->clientVerificationDocumentListRequest($client_uuid, $verify_type_code, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaginatedVerificationDocumentList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginatedVerificationDocumentList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginatedVerificationDocumentList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginatedVerificationDocumentList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationDocumentListAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentListAsync($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        return $this->clientVerificationDocumentListAsyncWithHttpInfo($client_uuid, $verify_type_code, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationDocumentListAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentListAsyncWithHttpInfo($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        $returnType = '\OpenAPI\Client\Model\PaginatedVerificationDocumentList';
        $request = $this->clientVerificationDocumentListRequest($client_uuid, $verify_type_code, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationDocumentList'
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationDocumentListRequest($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationDocumentList'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationDocumentList'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVerificationDocumentPartialUpdate
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $uuid uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     * @param  string $uuid2 uuid2 (optional)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type document_type (optional)
     * @param  string $document_front document_front (optional)
     * @param  string $document_back document_back (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VerificationDocument
     */
    public function clientVerificationDocumentPartialUpdate($client_uuid, $uuid, $verify_type_code, $uuid2 = null, $document_type = null, $document_front = null, $document_back = null)
    {
        list($response) = $this->clientVerificationDocumentPartialUpdateWithHttpInfo($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back);
        return $response;
    }

    /**
     * Operation clientVerificationDocumentPartialUpdateWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid2 (optional)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type (optional)
     * @param  string $document_front (optional)
     * @param  string $document_back (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VerificationDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationDocumentPartialUpdateWithHttpInfo($client_uuid, $uuid, $verify_type_code, $uuid2 = null, $document_type = null, $document_front = null, $document_back = null)
    {
        $request = $this->clientVerificationDocumentPartialUpdateRequest($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VerificationDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VerificationDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VerificationDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VerificationDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationDocumentPartialUpdateAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid2 (optional)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type (optional)
     * @param  string $document_front (optional)
     * @param  string $document_back (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentPartialUpdateAsync($client_uuid, $uuid, $verify_type_code, $uuid2 = null, $document_type = null, $document_front = null, $document_back = null)
    {
        return $this->clientVerificationDocumentPartialUpdateAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationDocumentPartialUpdateAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid2 (optional)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type (optional)
     * @param  string $document_front (optional)
     * @param  string $document_back (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentPartialUpdateAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code, $uuid2 = null, $document_type = null, $document_front = null, $document_back = null)
    {
        $returnType = '\OpenAPI\Client\Model\VerificationDocument';
        $request = $this->clientVerificationDocumentPartialUpdateRequest($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationDocumentPartialUpdate'
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid2 (optional)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type (optional)
     * @param  string $document_front (optional)
     * @param  string $document_back (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationDocumentPartialUpdateRequest($client_uuid, $uuid, $verify_type_code, $uuid2 = null, $document_type = null, $document_front = null, $document_back = null)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationDocumentPartialUpdate'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling clientVerificationDocumentPartialUpdate'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationDocumentPartialUpdate'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }

        // form params
        if ($uuid2 !== null) {
            $formParams['uuid'] = ObjectSerializer::toFormValue($uuid2);
        }
        // form params
        if ($document_type !== null) {
            $formParams['document_type'] = ObjectSerializer::toFormValue($document_type);
        }
        // form params
        if ($document_front !== null) {
            $formParams['document_front'] = ObjectSerializer::toFormValue($document_front);
        }
        // form params
        if ($document_back !== null) {
            $formParams['document_back'] = ObjectSerializer::toFormValue($document_back);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVerificationDocumentRetrieve
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $uuid uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VerificationDocument
     */
    public function clientVerificationDocumentRetrieve($client_uuid, $uuid, $verify_type_code)
    {
        list($response) = $this->clientVerificationDocumentRetrieveWithHttpInfo($client_uuid, $uuid, $verify_type_code);
        return $response;
    }

    /**
     * Operation clientVerificationDocumentRetrieveWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VerificationDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationDocumentRetrieveWithHttpInfo($client_uuid, $uuid, $verify_type_code)
    {
        $request = $this->clientVerificationDocumentRetrieveRequest($client_uuid, $uuid, $verify_type_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VerificationDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VerificationDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VerificationDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VerificationDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationDocumentRetrieveAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentRetrieveAsync($client_uuid, $uuid, $verify_type_code)
    {
        return $this->clientVerificationDocumentRetrieveAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationDocumentRetrieveAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentRetrieveAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code)
    {
        $returnType = '\OpenAPI\Client\Model\VerificationDocument';
        $request = $this->clientVerificationDocumentRetrieveRequest($client_uuid, $uuid, $verify_type_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationDocumentRetrieve'
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationDocumentRetrieveRequest($client_uuid, $uuid, $verify_type_code)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationDocumentRetrieve'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling clientVerificationDocumentRetrieve'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationDocumentRetrieve'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVerificationDocumentUpdate
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $uuid uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     * @param  string $uuid2 uuid2 (required)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type document_type (required)
     * @param  string $document_front document_front (required)
     * @param  string $document_back document_back (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VerificationDocument
     */
    public function clientVerificationDocumentUpdate($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back)
    {
        list($response) = $this->clientVerificationDocumentUpdateWithHttpInfo($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back);
        return $response;
    }

    /**
     * Operation clientVerificationDocumentUpdateWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid2 (required)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type (required)
     * @param  string $document_front (required)
     * @param  string $document_back (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VerificationDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationDocumentUpdateWithHttpInfo($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back)
    {
        $request = $this->clientVerificationDocumentUpdateRequest($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VerificationDocument' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VerificationDocument', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VerificationDocument';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VerificationDocument',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationDocumentUpdateAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid2 (required)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type (required)
     * @param  string $document_front (required)
     * @param  string $document_back (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentUpdateAsync($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back)
    {
        return $this->clientVerificationDocumentUpdateAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationDocumentUpdateAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid2 (required)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type (required)
     * @param  string $document_front (required)
     * @param  string $document_back (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationDocumentUpdateAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back)
    {
        $returnType = '\OpenAPI\Client\Model\VerificationDocument';
        $request = $this->clientVerificationDocumentUpdateRequest($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationDocumentUpdate'
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     * @param  string $uuid2 (required)
     * @param  \OpenAPI\Client\Model\DocumentTypeEnum $document_type (required)
     * @param  string $document_front (required)
     * @param  string $document_back (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationDocumentUpdateRequest($client_uuid, $uuid, $verify_type_code, $uuid2, $document_type, $document_front, $document_back)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationDocumentUpdate'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling clientVerificationDocumentUpdate'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationDocumentUpdate'
            );
        }
        // verify the required parameter 'uuid2' is set
        if ($uuid2 === null || (is_array($uuid2) && count($uuid2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid2 when calling clientVerificationDocumentUpdate'
            );
        }
        // verify the required parameter 'document_type' is set
        if ($document_type === null || (is_array($document_type) && count($document_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type when calling clientVerificationDocumentUpdate'
            );
        }
        // verify the required parameter 'document_front' is set
        if ($document_front === null || (is_array($document_front) && count($document_front) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_front when calling clientVerificationDocumentUpdate'
            );
        }
        // verify the required parameter 'document_back' is set
        if ($document_back === null || (is_array($document_back) && count($document_back) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_back when calling clientVerificationDocumentUpdate'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }

        // form params
        if ($uuid2 !== null) {
            $formParams['uuid'] = ObjectSerializer::toFormValue($uuid2);
        }
        // form params
        if ($document_type !== null) {
            $formParams['document_type'] = ObjectSerializer::toFormValue($document_type);
        }
        // form params
        if ($document_front !== null) {
            $formParams['document_front'] = ObjectSerializer::toFormValue($document_front);
        }
        // form params
        if ($document_back !== null) {
            $formParams['document_back'] = ObjectSerializer::toFormValue($document_back);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVerificationList
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaginatedVerificationListList
     */
    public function clientVerificationList($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        list($response) = $this->clientVerificationListWithHttpInfo($client_uuid, $verify_type_code, $limit, $offset);
        return $response;
    }

    /**
     * Operation clientVerificationListWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaginatedVerificationListList, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationListWithHttpInfo($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        $request = $this->clientVerificationListRequest($client_uuid, $verify_type_code, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaginatedVerificationListList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginatedVerificationListList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginatedVerificationListList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginatedVerificationListList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationListAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationListAsync($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        return $this->clientVerificationListAsyncWithHttpInfo($client_uuid, $verify_type_code, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationListAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationListAsyncWithHttpInfo($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        $returnType = '\OpenAPI\Client\Model\PaginatedVerificationListList';
        $request = $this->clientVerificationListRequest($client_uuid, $verify_type_code, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationList'
     *
     * @param  string $client_uuid (required)
     * @param  string $verify_type_code (required)
     * @param  int $limit Number of results to return per page. (optional)
     * @param  int $offset The initial index from which to return the results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationListRequest($client_uuid, $verify_type_code, $limit = null, $offset = null)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationList'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationList'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clientVerificationRetrieve
     *
     * @param  string $client_uuid client_uuid (required)
     * @param  string $uuid uuid (required)
     * @param  string $verify_type_code verify_type_code (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\VerificationList
     */
    public function clientVerificationRetrieve($client_uuid, $uuid, $verify_type_code)
    {
        list($response) = $this->clientVerificationRetrieveWithHttpInfo($client_uuid, $uuid, $verify_type_code);
        return $response;
    }

    /**
     * Operation clientVerificationRetrieveWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\VerificationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function clientVerificationRetrieveWithHttpInfo($client_uuid, $uuid, $verify_type_code)
    {
        $request = $this->clientVerificationRetrieveRequest($client_uuid, $uuid, $verify_type_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\VerificationList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\VerificationList', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\VerificationList';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\VerificationList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clientVerificationRetrieveAsync
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationRetrieveAsync($client_uuid, $uuid, $verify_type_code)
    {
        return $this->clientVerificationRetrieveAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clientVerificationRetrieveAsyncWithHttpInfo
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clientVerificationRetrieveAsyncWithHttpInfo($client_uuid, $uuid, $verify_type_code)
    {
        $returnType = '\OpenAPI\Client\Model\VerificationList';
        $request = $this->clientVerificationRetrieveRequest($client_uuid, $uuid, $verify_type_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clientVerificationRetrieve'
     *
     * @param  string $client_uuid (required)
     * @param  string $uuid (required)
     * @param  string $verify_type_code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function clientVerificationRetrieveRequest($client_uuid, $uuid, $verify_type_code)
    {
        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling clientVerificationRetrieve'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling clientVerificationRetrieve'
            );
        }
        // verify the required parameter 'verify_type_code' is set
        if ($verify_type_code === null || (is_array($verify_type_code) && count($verify_type_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verify_type_code when calling clientVerificationRetrieve'
            );
        }

        $resourcePath = '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{uuid}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client_uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }
        // path params
        if ($verify_type_code !== null) {
            $resourcePath = str_replace(
                '{' . 'verify_type_code' . '}',
                ObjectSerializer::toPathValue($verify_type_code),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session');
        if ($apiKey !== null) {
            
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
