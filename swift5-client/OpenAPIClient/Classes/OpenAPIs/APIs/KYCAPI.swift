//
// KYCAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class KYCAPI {

    /**

     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter verificationCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationCreate(clientUuid: UUID, verifyTypeCode: String, verificationCreate: VerificationCreate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationCreate?, _ error: Error?) -> Void)) {
        clientVerificationCreateWithRequestBuilder(clientUuid: clientUuid, verifyTypeCode: verifyTypeCode, verificationCreate: verificationCreate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/
     - Create a verification for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter verificationCreate: (body)  
     - returns: RequestBuilder<VerificationCreate> 
     */
    open class func clientVerificationCreateWithRequestBuilder(clientUuid: UUID, verifyTypeCode: String, verificationCreate: VerificationCreate) -> RequestBuilder<VerificationCreate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verificationCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid: (form)  
     - parameter verifyType: (form)  
     - parameter created: (form)  
     - parameter updated: (form)  
     - parameter verificationDocuments: (form)  
     - parameter status: (form)  (optional)
     - parameter result: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentCreate(clientUuid: UUID, verifyTypeCode: String, uuid: UUID, verifyType: VerifyTypeEnum, created: Date, updated: Date, verificationDocuments: [VerificationDocumentCreate], status: StatusBd7Enum? = nil, result: ResultEnum? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationWithType?, _ error: Error?) -> Void)) {
        clientVerificationDocumentCreateWithRequestBuilder(clientUuid: clientUuid, verifyTypeCode: verifyTypeCode, uuid: uuid, verifyType: verifyType, created: created, updated: updated, verificationDocuments: verificationDocuments, status: status, result: result).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/
     - Create a verification Document for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid: (form)  
     - parameter verifyType: (form)  
     - parameter created: (form)  
     - parameter updated: (form)  
     - parameter verificationDocuments: (form)  
     - parameter status: (form)  (optional)
     - parameter result: (form)  (optional)
     - returns: RequestBuilder<VerificationWithType> 
     */
    open class func clientVerificationDocumentCreateWithRequestBuilder(clientUuid: UUID, verifyTypeCode: String, uuid: UUID, verifyType: VerifyTypeEnum, created: Date, updated: Date, verificationDocuments: [VerificationDocumentCreate], status: StatusBd7Enum? = nil, result: ResultEnum? = nil) -> RequestBuilder<VerificationWithType> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid.encodeToJSON(),
            "verify_type": verifyType.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "result": result?.encodeToJSON(),
            "created": created.encodeToJSON(),
            "updated": updated.encodeToJSON(),
            "verification_documents": verificationDocuments.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationWithType>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verificationDocumentUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentDelete(clientUuid: UUID, verificationDocumentUuid: UUID, verifyTypeCode: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        clientVerificationDocumentDeleteWithRequestBuilder(clientUuid: clientUuid, verificationDocumentUuid: verificationDocumentUuid, verifyTypeCode: verifyTypeCode).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/
     - Delete a client verificatoin document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verificationDocumentUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientVerificationDocumentDeleteWithRequestBuilder(clientUuid: UUID, verificationDocumentUuid: UUID, verifyTypeCode: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verificationDocumentUuidPreEscape = "\(APIHelper.mapValueToPathItem(verificationDocumentUuid))"
        let verificationDocumentUuidPostEscape = verificationDocumentUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verification_document_uuid}", with: verificationDocumentUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentList(clientUuid: UUID, verifyTypeCode: String, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedVerificationDocumentList?, _ error: Error?) -> Void)) {
        clientVerificationDocumentListWithRequestBuilder(clientUuid: clientUuid, verifyTypeCode: verifyTypeCode, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/
     - List Verification Document for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedVerificationDocumentList> 
     */
    open class func clientVerificationDocumentListWithRequestBuilder(clientUuid: UUID, verifyTypeCode: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedVerificationDocumentList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedVerificationDocumentList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verificationDocumentUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid: (form)  (optional)
     - parameter documentType: (form)  (optional)
     - parameter documentFront: (form)  (optional)
     - parameter documentBack: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentPartialUpdate(clientUuid: UUID, verificationDocumentUuid: UUID, verifyTypeCode: String, uuid: UUID? = nil, documentType: DocumentTypeEnum? = nil, documentFront: String? = nil, documentBack: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationDocument?, _ error: Error?) -> Void)) {
        clientVerificationDocumentPartialUpdateWithRequestBuilder(clientUuid: clientUuid, verificationDocumentUuid: verificationDocumentUuid, verifyTypeCode: verifyTypeCode, uuid: uuid, documentType: documentType, documentFront: documentFront, documentBack: documentBack).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/
     - Partial Update a client verification document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verificationDocumentUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid: (form)  (optional)
     - parameter documentType: (form)  (optional)
     - parameter documentFront: (form)  (optional)
     - parameter documentBack: (form)  (optional)
     - returns: RequestBuilder<VerificationDocument> 
     */
    open class func clientVerificationDocumentPartialUpdateWithRequestBuilder(clientUuid: UUID, verificationDocumentUuid: UUID, verifyTypeCode: String, uuid: UUID? = nil, documentType: DocumentTypeEnum? = nil, documentFront: String? = nil, documentBack: String? = nil) -> RequestBuilder<VerificationDocument> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verificationDocumentUuidPreEscape = "\(APIHelper.mapValueToPathItem(verificationDocumentUuid))"
        let verificationDocumentUuidPostEscape = verificationDocumentUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verification_document_uuid}", with: verificationDocumentUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid?.encodeToJSON(),
            "document_type": documentType?.encodeToJSON(),
            "document_front": documentFront?.encodeToJSON(),
            "document_back": documentBack?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationDocument>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verificationDocumentUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentRetrieve(clientUuid: UUID, verificationDocumentUuid: UUID, verifyTypeCode: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationDocument?, _ error: Error?) -> Void)) {
        clientVerificationDocumentRetrieveWithRequestBuilder(clientUuid: clientUuid, verificationDocumentUuid: verificationDocumentUuid, verifyTypeCode: verifyTypeCode).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/
     - Retrieve a client verification document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verificationDocumentUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - returns: RequestBuilder<VerificationDocument> 
     */
    open class func clientVerificationDocumentRetrieveWithRequestBuilder(clientUuid: UUID, verificationDocumentUuid: UUID, verifyTypeCode: String) -> RequestBuilder<VerificationDocument> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verificationDocumentUuidPreEscape = "\(APIHelper.mapValueToPathItem(verificationDocumentUuid))"
        let verificationDocumentUuidPostEscape = verificationDocumentUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verification_document_uuid}", with: verificationDocumentUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationDocument>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verificationDocumentUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid: (form)  
     - parameter documentType: (form)  
     - parameter documentFront: (form)  
     - parameter documentBack: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentUpdate(clientUuid: UUID, verificationDocumentUuid: UUID, verifyTypeCode: String, uuid: UUID, documentType: DocumentTypeEnum, documentFront: String, documentBack: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationDocument?, _ error: Error?) -> Void)) {
        clientVerificationDocumentUpdateWithRequestBuilder(clientUuid: clientUuid, verificationDocumentUuid: verificationDocumentUuid, verifyTypeCode: verifyTypeCode, uuid: uuid, documentType: documentType, documentFront: documentFront, documentBack: documentBack).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/
     - Update a client verification document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verificationDocumentUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid: (form)  
     - parameter documentType: (form)  
     - parameter documentFront: (form)  
     - parameter documentBack: (form)  
     - returns: RequestBuilder<VerificationDocument> 
     */
    open class func clientVerificationDocumentUpdateWithRequestBuilder(clientUuid: UUID, verificationDocumentUuid: UUID, verifyTypeCode: String, uuid: UUID, documentType: DocumentTypeEnum, documentFront: String, documentBack: String) -> RequestBuilder<VerificationDocument> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verificationDocumentUuidPreEscape = "\(APIHelper.mapValueToPathItem(verificationDocumentUuid))"
        let verificationDocumentUuidPostEscape = verificationDocumentUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verification_document_uuid}", with: verificationDocumentUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid.encodeToJSON(),
            "document_type": documentType.encodeToJSON(),
            "document_front": documentFront.encodeToJSON(),
            "document_back": documentBack.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationDocument>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationList(clientUuid: UUID, verifyTypeCode: String, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedVerificationListList?, _ error: Error?) -> Void)) {
        clientVerificationListWithRequestBuilder(clientUuid: clientUuid, verifyTypeCode: verifyTypeCode, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/
     - List Verification for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedVerificationListList> 
     */
    open class func clientVerificationListWithRequestBuilder(clientUuid: UUID, verifyTypeCode: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedVerificationListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedVerificationListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verificationUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationRetrieve(clientUuid: UUID, verificationUuid: UUID, verifyTypeCode: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationList?, _ error: Error?) -> Void)) {
        clientVerificationRetrieveWithRequestBuilder(clientUuid: clientUuid, verificationUuid: verificationUuid, verifyTypeCode: verifyTypeCode).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{verification_uuid}/
     - Retrieve a client verification 
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verificationUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - returns: RequestBuilder<VerificationList> 
     */
    open class func clientVerificationRetrieveWithRequestBuilder(clientUuid: UUID, verificationUuid: UUID, verifyTypeCode: String) -> RequestBuilder<VerificationList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{verification_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verificationUuidPreEscape = "\(APIHelper.mapValueToPathItem(verificationUuid))"
        let verificationUuidPostEscape = verificationUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verification_uuid}", with: verificationUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
