//
// ApiAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ApiAPI {

    /**
     * enum for parameter format
     */
    public enum Format_apiSchemaRetrieve: String, CaseIterable {
        case json = "json"
        case yaml = "yaml"
    }

    /**
     * enum for parameter lang
     */
    public enum Lang_apiSchemaRetrieve: String, CaseIterable {
        case enCh = "en-ch"
        case enGb = "en-gb"
        case frCh = "fr-ch"
    }

    /**

     - parameter format: (query)  (optional)
     - parameter lang: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiSchemaRetrieve(format: Format_apiSchemaRetrieve? = nil, lang: Lang_apiSchemaRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: [String: AnyCodable]?, _ error: Error?) -> Void)) {
        apiSchemaRetrieveWithRequestBuilder(format: format, lang: lang).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/schema/
     - OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter format: (query)  (optional)
     - parameter lang: (query)  (optional)
     - returns: RequestBuilder<[String: AnyCodable]> 
     */
    open class func apiSchemaRetrieveWithRequestBuilder(format: Format_apiSchemaRetrieve? = nil, lang: Lang_apiSchemaRetrieve? = nil) -> RequestBuilder<[String: AnyCodable]> {
        let localVariablePath = "/api/schema/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "lang": lang?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: AnyCodable]>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AdviceEnginesEtsCategoriesList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedCategoryList?, _ error: Error?) -> Void)) {
        apiV2AdviceEnginesEtsCategoriesListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/advice-engines/ets/categories/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedCategoryList> 
     */
    open class func apiV2AdviceEnginesEtsCategoriesListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedCategoryList> {
        let localVariablePath = "/api/v2/advice-engines/ets/categories/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedCategoryList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AdviceEnginesEtsCoreCategoryGroupsList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedCoreCategoryGroupList?, _ error: Error?) -> Void)) {
        apiV2AdviceEnginesEtsCoreCategoryGroupsListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/advice-engines/ets/core-category-groups/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedCoreCategoryGroupList> 
     */
    open class func apiV2AdviceEnginesEtsCoreCategoryGroupsListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedCoreCategoryGroupList> {
        let localVariablePath = "/api/v2/advice-engines/ets/core-category-groups/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedCoreCategoryGroupList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter eTSForecastRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AdviceEnginesEtsForecastCreate(eTSForecastRequest: ETSForecastRequest, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ETSForecastRequest?, _ error: Error?) -> Void)) {
        apiV2AdviceEnginesEtsForecastCreateWithRequestBuilder(eTSForecastRequest: eTSForecastRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/advice-engines/ets/forecast/
     - The forecast positions and amounts for the time_horizon and  risk_level chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter eTSForecastRequest: (body)  
     - returns: RequestBuilder<ETSForecastRequest> 
     */
    open class func apiV2AdviceEnginesEtsForecastCreateWithRequestBuilder(eTSForecastRequest: ETSForecastRequest) -> RequestBuilder<ETSForecastRequest> {
        let localVariablePath = "/api/v2/advice-engines/ets/forecast/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: eTSForecastRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ETSForecastRequest>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AdviceEnginesEtsPresetCategoryGroupsList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedPresetCategoryGroupList?, _ error: Error?) -> Void)) {
        apiV2AdviceEnginesEtsPresetCategoryGroupsListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/advice-engines/ets/preset-category-groups/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedPresetCategoryGroupList> 
     */
    open class func apiV2AdviceEnginesEtsPresetCategoryGroupsListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedPresetCategoryGroupList> {
        let localVariablePath = "/api/v2/advice-engines/ets/preset-category-groups/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPresetCategoryGroupList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter modelPortfolioForecastRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AdviceEnginesModelPortfolioForecastCreate(modelPortfolioForecastRequest: ModelPortfolioForecastRequest, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ModelPortfolioForecastRequest?, _ error: Error?) -> Void)) {
        apiV2AdviceEnginesModelPortfolioForecastCreateWithRequestBuilder(modelPortfolioForecastRequest: modelPortfolioForecastRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/advice-engines/model-portfolio/forecast/
     - The forecast positions and amounts for the time_horizon chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter modelPortfolioForecastRequest: (body)  
     - returns: RequestBuilder<ModelPortfolioForecastRequest> 
     */
    open class func apiV2AdviceEnginesModelPortfolioForecastCreateWithRequestBuilder(modelPortfolioForecastRequest: ModelPortfolioForecastRequest) -> RequestBuilder<ModelPortfolioForecastRequest> {
        let localVariablePath = "/api/v2/advice-engines/model-portfolio/forecast/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelPortfolioForecastRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelPortfolioForecastRequest>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter extraData: (query) Additional ModelPortfolio attributes (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter name: (query)  (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter riskHigher: (query)  (optional)
     - parameter riskLevel: (query)  (optional)
     - parameter riskLower: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AdviceEnginesModelPortfolioModelPortfoliosList(extraData: [String: AnyCodable]? = nil, limit: Int? = nil, name: String? = nil, offset: Int? = nil, riskHigher: Int? = nil, riskLevel: Int? = nil, riskLower: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvestorModelPortfolioList?, _ error: Error?) -> Void)) {
        apiV2AdviceEnginesModelPortfolioModelPortfoliosListWithRequestBuilder(extraData: extraData, limit: limit, name: name, offset: offset, riskHigher: riskHigher, riskLevel: riskLevel, riskLower: riskLower).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/advice-engines/model-portfolio/model-portfolios/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter extraData: (query) Additional ModelPortfolio attributes (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter name: (query)  (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter riskHigher: (query)  (optional)
     - parameter riskLevel: (query)  (optional)
     - parameter riskLower: (query)  (optional)
     - returns: RequestBuilder<PaginatedInvestorModelPortfolioList> 
     */
    open class func apiV2AdviceEnginesModelPortfolioModelPortfoliosListWithRequestBuilder(extraData: [String: AnyCodable]? = nil, limit: Int? = nil, name: String? = nil, offset: Int? = nil, riskHigher: Int? = nil, riskLevel: Int? = nil, riskLower: Int? = nil) -> RequestBuilder<PaginatedInvestorModelPortfolioList> {
        let localVariablePath = "/api/v2/advice-engines/model-portfolio/model-portfolios/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "extra_data": extraData?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "risk_higher": riskHigher?.encodeToJSON(),
            "risk_level": riskLevel?.encodeToJSON(),
            "risk_lower": riskLower?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvestorModelPortfolioList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorModelPortfolio?, _ error: Error?) -> Void)) {
        apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/advice-engines/model-portfolio/model-portfolios/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<InvestorModelPortfolio> 
     */
    open class func apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<InvestorModelPortfolio> {
        var localVariablePath = "/api/v2/advice-engines/model-portfolio/model-portfolios/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorModelPortfolio>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter type: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AssetsCategoriesList(limit: Int? = nil, offset: Int? = nil, type: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedAssetCategoryList?, _ error: Error?) -> Void)) {
        apiV2AssetsCategoriesListWithRequestBuilder(limit: limit, offset: offset, type: type).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/assets/categories/
     - Retrieve all asset categories
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter type: (query)  (optional)
     - returns: RequestBuilder<PaginatedAssetCategoryList> 
     */
    open class func apiV2AssetsCategoriesListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil, type: String? = nil) -> RequestBuilder<PaginatedAssetCategoryList> {
        let localVariablePath = "/api/v2/assets/categories/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "type": type?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAssetCategoryList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetIdentifier: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AssetsIntradayPricesLatestRetrieve(assetIdentifier: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: IntradayPrice?, _ error: Error?) -> Void)) {
        apiV2AssetsIntradayPricesLatestRetrieveWithRequestBuilder(assetIdentifier: assetIdentifier).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/assets/{asset_identifier}/intraday-prices/latest/
     - Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter assetIdentifier: (path)  
     - returns: RequestBuilder<IntradayPrice> 
     */
    open class func apiV2AssetsIntradayPricesLatestRetrieveWithRequestBuilder(assetIdentifier: UUID) -> RequestBuilder<IntradayPrice> {
        var localVariablePath = "/api/v2/assets/{asset_identifier}/intraday-prices/latest/"
        let assetIdentifierPreEscape = "\(APIHelper.mapValueToPathItem(assetIdentifier))"
        let assetIdentifierPostEscape = assetIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{asset_identifier}", with: assetIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntradayPrice>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetIdentifier: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter datetimeAfter: (query)  (optional)
     - parameter datetimeBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AssetsIntradayPricesList(assetIdentifier: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, datetimeAfter: Date? = nil, datetimeBefore: Date? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedIntradayPriceList?, _ error: Error?) -> Void)) {
        apiV2AssetsIntradayPricesListWithRequestBuilder(assetIdentifier: assetIdentifier, dateAfter: dateAfter, dateBefore: dateBefore, datetimeAfter: datetimeAfter, datetimeBefore: datetimeBefore, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/assets/{asset_identifier}/intraday-prices/
     - Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter assetIdentifier: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter datetimeAfter: (query)  (optional)
     - parameter datetimeBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedIntradayPriceList> 
     */
    open class func apiV2AssetsIntradayPricesListWithRequestBuilder(assetIdentifier: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, datetimeAfter: Date? = nil, datetimeBefore: Date? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedIntradayPriceList> {
        var localVariablePath = "/api/v2/assets/{asset_identifier}/intraday-prices/"
        let assetIdentifierPreEscape = "\(APIHelper.mapValueToPathItem(assetIdentifier))"
        let assetIdentifierPostEscape = assetIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{asset_identifier}", with: assetIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_after": dateAfter?.encodeToJSON(),
            "date_before": dateBefore?.encodeToJSON(),
            "datetime_after": datetimeAfter?.encodeToJSON(),
            "datetime_before": datetimeBefore?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedIntradayPriceList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_apiV2AssetsList: String, CaseIterable {
        case etf = "ETF"
        case mutualFund = "MUTUAL_FUND"
        case stock = "STOCK"
    }

    /**
     * enum for parameter status
     */
    public enum Status_apiV2AssetsList: String, CaseIterable {
        case active = "ACTIVE"
        case deleted = "DELETED"
        case inactive = "INACTIVE"
    }

    /**

     - parameter assetType: (query)  (optional)
     - parameter categoryCode: (query)  (optional)
     - parameter categoryType: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter isin: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter market: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - parameter ticker: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AssetsList(assetType: AssetType_apiV2AssetsList? = nil, categoryCode: [String]? = nil, categoryType: [String]? = nil, currency: Int? = nil, isin: String? = nil, limit: Int? = nil, market: Int? = nil, name: String? = nil, offset: Int? = nil, status: Status_apiV2AssetsList? = nil, ticker: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedAssetListList?, _ error: Error?) -> Void)) {
        apiV2AssetsListWithRequestBuilder(assetType: assetType, categoryCode: categoryCode, categoryType: categoryType, currency: currency, isin: isin, limit: limit, market: market, name: name, offset: offset, status: status, ticker: ticker).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/assets/
     - A list of Assets filtered by category codes. Default is an empty dict which returns the whole universe.
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter assetType: (query)  (optional)
     - parameter categoryCode: (query)  (optional)
     - parameter categoryType: (query)  (optional)
     - parameter currency: (query)  (optional)
     - parameter isin: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter market: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - parameter ticker: (query)  (optional)
     - returns: RequestBuilder<PaginatedAssetListList> 
     */
    open class func apiV2AssetsListWithRequestBuilder(assetType: AssetType_apiV2AssetsList? = nil, categoryCode: [String]? = nil, categoryType: [String]? = nil, currency: Int? = nil, isin: String? = nil, limit: Int? = nil, market: Int? = nil, name: String? = nil, offset: Int? = nil, status: Status_apiV2AssetsList? = nil, ticker: String? = nil) -> RequestBuilder<PaginatedAssetListList> {
        let localVariablePath = "/api/v2/assets/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "asset_type": assetType?.encodeToJSON(),
            "category_code": categoryCode?.encodeToJSON(),
            "category_type": categoryType?.encodeToJSON(),
            "currency": currency?.encodeToJSON(),
            "isin": isin?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "market": market?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "ticker": ticker?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAssetListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetIdentifier: (path)  
     - parameter dateYearAfter: (query)  (optional)
     - parameter dateYearBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AssetsPerformanceList(assetIdentifier: UUID, dateYearAfter: Double? = nil, dateYearBefore: Double? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedAssetGrowthList?, _ error: Error?) -> Void)) {
        apiV2AssetsPerformanceListWithRequestBuilder(assetIdentifier: assetIdentifier, dateYearAfter: dateYearAfter, dateYearBefore: dateYearBefore, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/assets/{asset_identifier}/performance/
     - Retrieve asset's yearly performance.  This View overwrites ListAPIView's 'list' method because it doesn't have any hook that allows us to call 'get_asset_price_year_graph after the filtering is applied.
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter assetIdentifier: (path)  
     - parameter dateYearAfter: (query)  (optional)
     - parameter dateYearBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedAssetGrowthList> 
     */
    open class func apiV2AssetsPerformanceListWithRequestBuilder(assetIdentifier: UUID, dateYearAfter: Double? = nil, dateYearBefore: Double? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedAssetGrowthList> {
        var localVariablePath = "/api/v2/assets/{asset_identifier}/performance/"
        let assetIdentifierPreEscape = "\(APIHelper.mapValueToPathItem(assetIdentifier))"
        let assetIdentifierPostEscape = assetIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{asset_identifier}", with: assetIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_year_after": dateYearAfter?.encodeToJSON(),
            "date_year_before": dateYearBefore?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAssetGrowthList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetIdentifier: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AssetsPricesLatestRetrieve(assetIdentifier: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Price?, _ error: Error?) -> Void)) {
        apiV2AssetsPricesLatestRetrieveWithRequestBuilder(assetIdentifier: assetIdentifier).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/assets/{asset_identifier}/prices/latest/
     - Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter assetIdentifier: (path)  
     - returns: RequestBuilder<Price> 
     */
    open class func apiV2AssetsPricesLatestRetrieveWithRequestBuilder(assetIdentifier: UUID) -> RequestBuilder<Price> {
        var localVariablePath = "/api/v2/assets/{asset_identifier}/prices/latest/"
        let assetIdentifierPreEscape = "\(APIHelper.mapValueToPathItem(assetIdentifier))"
        let assetIdentifierPostEscape = assetIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{asset_identifier}", with: assetIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Price>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetIdentifier: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter datetimeAfter: (query)  (optional)
     - parameter datetimeBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AssetsPricesList(assetIdentifier: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, datetimeAfter: Date? = nil, datetimeBefore: Date? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedPriceList?, _ error: Error?) -> Void)) {
        apiV2AssetsPricesListWithRequestBuilder(assetIdentifier: assetIdentifier, dateAfter: dateAfter, dateBefore: dateBefore, datetimeAfter: datetimeAfter, datetimeBefore: datetimeBefore, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/assets/{asset_identifier}/prices/
     - Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter assetIdentifier: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter datetimeAfter: (query)  (optional)
     - parameter datetimeBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedPriceList> 
     */
    open class func apiV2AssetsPricesListWithRequestBuilder(assetIdentifier: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, datetimeAfter: Date? = nil, datetimeBefore: Date? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedPriceList> {
        var localVariablePath = "/api/v2/assets/{asset_identifier}/prices/"
        let assetIdentifierPreEscape = "\(APIHelper.mapValueToPathItem(assetIdentifier))"
        let assetIdentifierPostEscape = assetIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{asset_identifier}", with: assetIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_after": dateAfter?.encodeToJSON(),
            "date_before": dateBefore?.encodeToJSON(),
            "datetime_after": datetimeAfter?.encodeToJSON(),
            "datetime_before": datetimeBefore?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPriceList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter assetIdentifier: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2AssetsRetrieve(assetIdentifier: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AssetDetail?, _ error: Error?) -> Void)) {
        apiV2AssetsRetrieveWithRequestBuilder(assetIdentifier: assetIdentifier).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/assets/{asset_identifier}/
     - Allows get an asset instance by * UUID * ISIN * ISIN & MARKET_CODE * ISIN & MARKET_CODE & CURRENCY_CODE  Examples:     * assets/a66633d7-4418-4c85-9582-01c80df531d4/     * assets/IE00B579F325/     * assets/IE00B579F325_XETR_GBP/     * assets/IE00B579F325_XETR/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter assetIdentifier: (path)  
     - returns: RequestBuilder<AssetDetail> 
     */
    open class func apiV2AssetsRetrieveWithRequestBuilder(assetIdentifier: UUID) -> RequestBuilder<AssetDetail> {
        var localVariablePath = "/api/v2/assets/{asset_identifier}/"
        let assetIdentifierPreEscape = "\(APIHelper.mapValueToPathItem(assetIdentifier))"
        let assetIdentifierPostEscape = assetIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{asset_identifier}", with: assetIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter status
     */
    public enum Status_apiV2BillingInvoicesList: String, CaseIterable {
        case charged = "CHARGED"
        case pending = "PENDING"
    }

    /**

     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2BillingInvoicesList(dateFrom: Date? = nil, dateTo: Date? = nil, limit: Int? = nil, offset: Int? = nil, status: Status_apiV2BillingInvoicesList? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvoiceListList?, _ error: Error?) -> Void)) {
        apiV2BillingInvoicesListWithRequestBuilder(dateFrom: dateFrom, dateTo: dateTo, limit: limit, offset: offset, status: status).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/billing/invoices/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter dateFrom: (query)  (optional)
     - parameter dateTo: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<PaginatedInvoiceListList> 
     */
    open class func apiV2BillingInvoicesListWithRequestBuilder(dateFrom: Date? = nil, dateTo: Date? = nil, limit: Int? = nil, offset: Int? = nil, status: Status_apiV2BillingInvoicesList? = nil) -> RequestBuilder<PaginatedInvoiceListList> {
        let localVariablePath = "/api/v2/billing/invoices/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_from": dateFrom?.encodeToJSON(),
            "date_to": dateTo?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvoiceListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2BillingInvoicesRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2BillingInvoicesRetrieve(uuid: UUID, format: Format_apiV2BillingInvoicesRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvoiceDetails?, _ error: Error?) -> Void)) {
        apiV2BillingInvoicesRetrieveWithRequestBuilder(uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/billing/invoices/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<InvoiceDetails> 
     */
    open class func apiV2BillingInvoicesRetrieveWithRequestBuilder(uuid: UUID, format: Format_apiV2BillingInvoicesRetrieve? = nil) -> RequestBuilder<InvoiceDetails> {
        var localVariablePath = "/api/v2/billing/invoices/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceDetails>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter createOrder: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2BrokerOrdersCreate(portfolioUuid: UUID, createOrder: CreateOrder, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: CreateOrder?, _ error: Error?) -> Void)) {
        apiV2BrokerOrdersCreateWithRequestBuilder(portfolioUuid: portfolioUuid, createOrder: createOrder).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/broker/orders/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter createOrder: (body)  
     - returns: RequestBuilder<CreateOrder> 
     */
    open class func apiV2BrokerOrdersCreateWithRequestBuilder(portfolioUuid: UUID, createOrder: CreateOrder) -> RequestBuilder<CreateOrder> {
        var localVariablePath = "/api/v2/broker/orders/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrder)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateOrder>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2BrokerOrdersDestroy(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2BrokerOrdersDestroyWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/broker/orders/{uuid}/
     - Cancel or request cancellation to the broker
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2BrokerOrdersDestroyWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/broker/orders/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter adviceExternalId: (query)  (optional)
     - parameter asset: (query)  (optional)
     - parameter completedAfter: (query)  (optional)
     - parameter completedBefore: (query)  (optional)
     - parameter extraData: (query) Additional order attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter portfolio: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2BrokerOrdersList(portfolioUuid: UUID, adviceExternalId: String? = nil, asset: String? = nil, completedAfter: Date? = nil, completedBefore: Date? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, offset: Int? = nil, portfolio: String? = nil, status: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedOrderListList?, _ error: Error?) -> Void)) {
        apiV2BrokerOrdersListWithRequestBuilder(portfolioUuid: portfolioUuid, adviceExternalId: adviceExternalId, asset: asset, completedAfter: completedAfter, completedBefore: completedBefore, extraData: extraData, limit: limit, offset: offset, portfolio: portfolio, status: status).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/broker/orders/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter adviceExternalId: (query)  (optional)
     - parameter asset: (query)  (optional)
     - parameter completedAfter: (query)  (optional)
     - parameter completedBefore: (query)  (optional)
     - parameter extraData: (query) Additional order attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter portfolio: (query)  (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<PaginatedOrderListList> 
     */
    open class func apiV2BrokerOrdersListWithRequestBuilder(portfolioUuid: UUID, adviceExternalId: String? = nil, asset: String? = nil, completedAfter: Date? = nil, completedBefore: Date? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, offset: Int? = nil, portfolio: String? = nil, status: String? = nil) -> RequestBuilder<PaginatedOrderListList> {
        var localVariablePath = "/api/v2/broker/orders/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "advice_external_id": adviceExternalId?.encodeToJSON(),
            "asset": asset?.encodeToJSON(),
            "completed_after": completedAfter?.encodeToJSON(),
            "completed_before": completedBefore?.encodeToJSON(),
            "extra_data": extraData?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "portfolio": portfolio?.encodeToJSON(),
            "status": status?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedOrderListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2BrokerOrdersRetrieve(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: OrderList?, _ error: Error?) -> Void)) {
        apiV2BrokerOrdersRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/broker/orders/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<OrderList> 
     */
    open class func apiV2BrokerOrdersRetrieveWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<OrderList> {
        var localVariablePath = "/api/v2/broker/orders/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter target
     */
    public enum Target_apiV2ClientsActivitiesList: String, CaseIterable {
        case empty = ""
        case cashcorporateaction = "cashcorporateaction"
        case charge = "charge"
        case deposit = "deposit"
        case portfolio = "portfolio"
        case rebalance = "rebalance"
        case sharescorporateaction = "sharescorporateaction"
        case withdrawal = "withdrawal"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter target: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsActivitiesList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, target: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedFeedActivityListList?, _ error: Error?) -> Void)) {
        apiV2ClientsActivitiesListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset, target: target).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/activities/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter target: (query)  (optional)
     - returns: RequestBuilder<PaginatedFeedActivityListList> 
     */
    open class func apiV2ClientsActivitiesListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, target: [String]? = nil) -> RequestBuilder<PaginatedFeedActivityListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/activities/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "target": target?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedFeedActivityListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsActivitiesRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: FeedActivityList?, _ error: Error?) -> Void)) {
        apiV2ClientsActivitiesRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/activities/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<FeedActivityList> 
     */
    open class func apiV2ClientsActivitiesRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<FeedActivityList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/activities/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FeedActivityList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsAdviceEnginesList(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsAdviceEnginesListWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/advice-engines/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsAdviceEnginesListWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/advice-engines/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsAdviceEnginesRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsAdviceEnginesRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/advice-engines/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsAdviceEnginesRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/advice-engines/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter investorFee: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesCreate(clientUuid: UUID, investorFeeUuid: UUID, investorFee: InvestorFee, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorFee?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesCreateWithRequestBuilder(clientUuid: clientUuid, investorFeeUuid: investorFeeUuid, investorFee: investorFee).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/billing/fees/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter investorFee: (body)  
     - returns: RequestBuilder<InvestorFee> 
     */
    open class func apiV2ClientsBillingFeesCreateWithRequestBuilder(clientUuid: UUID, investorFeeUuid: UUID, investorFee: InvestorFee) -> RequestBuilder<InvestorFee> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let investorFeeUuidPreEscape = "\(APIHelper.mapValueToPathItem(investorFeeUuid))"
        let investorFeeUuidPostEscape = investorFeeUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{investor_fee_uuid}", with: investorFeeUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investorFee)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorFee>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesDestroy(clientUuid: UUID, investorFeeUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesDestroyWithRequestBuilder(clientUuid: clientUuid, investorFeeUuid: investorFeeUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsBillingFeesDestroyWithRequestBuilder(clientUuid: UUID, investorFeeUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let investorFeeUuidPreEscape = "\(APIHelper.mapValueToPathItem(investorFeeUuid))"
        let investorFeeUuidPostEscape = investorFeeUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{investor_fee_uuid}", with: investorFeeUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesList(clientUuid: UUID, investorFeeUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvestorFeeList?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesListWithRequestBuilder(clientUuid: clientUuid, investorFeeUuid: investorFeeUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/billing/fees/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedInvestorFeeList> 
     */
    open class func apiV2ClientsBillingFeesListWithRequestBuilder(clientUuid: UUID, investorFeeUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedInvestorFeeList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let investorFeeUuidPreEscape = "\(APIHelper.mapValueToPathItem(investorFeeUuid))"
        let investorFeeUuidPostEscape = investorFeeUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{investor_fee_uuid}", with: investorFeeUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvestorFeeList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter patchedInvestorFee: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesPartialUpdate(clientUuid: UUID, investorFeeUuid: UUID, patchedInvestorFee: PatchedInvestorFee? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorFee?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesPartialUpdateWithRequestBuilder(clientUuid: clientUuid, investorFeeUuid: investorFeeUuid, patchedInvestorFee: patchedInvestorFee).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter patchedInvestorFee: (body)  (optional)
     - returns: RequestBuilder<InvestorFee> 
     */
    open class func apiV2ClientsBillingFeesPartialUpdateWithRequestBuilder(clientUuid: UUID, investorFeeUuid: UUID, patchedInvestorFee: PatchedInvestorFee? = nil) -> RequestBuilder<InvestorFee> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let investorFeeUuidPreEscape = "\(APIHelper.mapValueToPathItem(investorFeeUuid))"
        let investorFeeUuidPostEscape = investorFeeUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{investor_fee_uuid}", with: investorFeeUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedInvestorFee)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorFee>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesRetrieve(clientUuid: UUID, investorFeeUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorFee?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesRetrieveWithRequestBuilder(clientUuid: clientUuid, investorFeeUuid: investorFeeUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - returns: RequestBuilder<InvestorFee> 
     */
    open class func apiV2ClientsBillingFeesRetrieveWithRequestBuilder(clientUuid: UUID, investorFeeUuid: UUID) -> RequestBuilder<InvestorFee> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let investorFeeUuidPreEscape = "\(APIHelper.mapValueToPathItem(investorFeeUuid))"
        let investorFeeUuidPostEscape = investorFeeUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{investor_fee_uuid}", with: investorFeeUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorFee>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter investorFee: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesUpdate(clientUuid: UUID, investorFeeUuid: UUID, investorFee: InvestorFee, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorFee?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesUpdateWithRequestBuilder(clientUuid: clientUuid, investorFeeUuid: investorFeeUuid, investorFee: investorFee).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter investorFeeUuid: (path)  
     - parameter investorFee: (body)  
     - returns: RequestBuilder<InvestorFee> 
     */
    open class func apiV2ClientsBillingFeesUpdateWithRequestBuilder(clientUuid: UUID, investorFeeUuid: UUID, investorFee: InvestorFee) -> RequestBuilder<InvestorFee> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/{investor_fee_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let investorFeeUuidPreEscape = "\(APIHelper.mapValueToPathItem(investorFeeUuid))"
        let investorFeeUuidPostEscape = investorFeeUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{investor_fee_uuid}", with: investorFeeUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investorFee)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorFee>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsBillingInvoicesList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingInvoicesList(clientUuid: UUID, format: Format_apiV2ClientsBillingInvoicesList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvoiceListList?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingInvoicesListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/billing/invoices/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedInvoiceListList> 
     */
    open class func apiV2ClientsBillingInvoicesListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ClientsBillingInvoicesList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedInvoiceListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/invoices/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvoiceListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsBillingInvoicesRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingInvoicesRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsBillingInvoicesRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvoiceList?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingInvoicesRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/billing/invoices/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<InvoiceList> 
     */
    open class func apiV2ClientsBillingInvoicesRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsBillingInvoicesRetrieve? = nil) -> RequestBuilder<InvoiceList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/invoices/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (form)  
     - parameter name: (form)  
     - parameter docType: (form)  
     - parameter path: (form)  
     - parameter description: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsDocumentsCreate(clientUuid: UUID, uuid: UUID, name: String, docType: DocTypeEnum, path: String, description: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Document?, _ error: Error?) -> Void)) {
        apiV2ClientsDocumentsCreateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, name: name, docType: docType, path: path, description: description).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/documents/
     - Uploads a document for a certain user.  This call expects the files and parameters being sent as form/multipart encoding.
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (form)  
     - parameter name: (form)  
     - parameter docType: (form)  
     - parameter path: (form)  
     - parameter description: (form)  (optional)
     - returns: RequestBuilder<Document> 
     */
    open class func apiV2ClientsDocumentsCreateWithRequestBuilder(clientUuid: UUID, uuid: UUID, name: String, docType: DocTypeEnum, path: String, description: String? = nil) -> RequestBuilder<Document> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/documents/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid.encodeToJSON(),
            "name": name.encodeToJSON(),
            "doc_type": docType.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "path": path.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Document>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsDocumentsDestroy(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsDocumentsDestroyWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/documents/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsDocumentsDestroyWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/documents/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter docType
     */
    public enum DocType_apiV2ClientsDocumentsList: String, CaseIterable {
        case bankDetails = "BANK_DETAILS"
        case contract = "CONTRACT"
        case employment = "EMPLOYMENT"
        case idPersonal = "ID_PERSONAL"
        case legal = "LEGAL"
        case maritalStatus = "MARITAL_STATUS"
        case medical = "MEDICAL"
        case others = "OTHERS"
        case pension = "PENSION"
        case transfers = "TRANSFERS"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter client: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter docType: (query)  (optional)
     - parameter extraData: (query) Additional document attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter name: (query)  (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsDocumentsList(clientUuid: UUID, client: Int? = nil, description: String? = nil, docType: [String]? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, name: String? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedDocumentList?, _ error: Error?) -> Void)) {
        apiV2ClientsDocumentsListWithRequestBuilder(clientUuid: clientUuid, client: client, description: description, docType: docType, extraData: extraData, limit: limit, name: name, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/documents/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter client: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter docType: (query)  (optional)
     - parameter extraData: (query) Additional document attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter name: (query)  (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedDocumentList> 
     */
    open class func apiV2ClientsDocumentsListWithRequestBuilder(clientUuid: UUID, client: Int? = nil, description: String? = nil, docType: [String]? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, name: String? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedDocumentList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/documents/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client": client?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "doc_type": docType?.encodeToJSON(),
            "extra_data": extraData?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDocumentList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsDocumentsRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Document?, _ error: Error?) -> Void)) {
        apiV2ClientsDocumentsRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/documents/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Document> 
     */
    open class func apiV2ClientsDocumentsRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Document> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/documents/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Document>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter emailVerifyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsMeVerifyEmailCreate(emailVerifyRequest: EmailVerifyRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: EmailVerifyRequest?, _ error: Error?) -> Void)) {
        apiV2ClientsMeVerifyEmailCreateWithRequestBuilder(emailVerifyRequest: emailVerifyRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/me/verify/email/
     - Request e-mail account verification notification.
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter emailVerifyRequest: (body)  (optional)
     - returns: RequestBuilder<EmailVerifyRequest> 
     */
    open class func apiV2ClientsMeVerifyEmailCreateWithRequestBuilder(emailVerifyRequest: EmailVerifyRequest? = nil) -> RequestBuilder<EmailVerifyRequest> {
        let localVariablePath = "/api/v2/clients/me/verify/email/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailVerifyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailVerifyRequest>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsNationalDocumentsList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedNationalDocumentList?, _ error: Error?) -> Void)) {
        apiV2ClientsNationalDocumentsListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/national_documents/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedNationalDocumentList> 
     */
    open class func apiV2ClientsNationalDocumentsListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedNationalDocumentList> {
        let localVariablePath = "/api/v2/clients/national_documents/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNationalDocumentList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter referralCode: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReferralRetrieve(referralCode: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ClientReferral?, _ error: Error?) -> Void)) {
        apiV2ClientsReferralRetrieveWithRequestBuilder(referralCode: referralCode).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/referral/{referral_code}/
     - Retrieves the currently logged in client referral code
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter referralCode: (path)  
     - returns: RequestBuilder<ClientReferral> 
     */
    open class func apiV2ClientsReferralRetrieveWithRequestBuilder(referralCode: String) -> RequestBuilder<ClientReferral> {
        var localVariablePath = "/api/v2/clients/referral/{referral_code}/"
        let referralCodePreEscape = "\(APIHelper.mapValueToPathItem(referralCode))"
        let referralCodePostEscape = referralCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{referral_code}", with: referralCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientReferral>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsReportStatementsList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReportStatementsList(clientUuid: UUID, format: Format_apiV2ClientsReportStatementsList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedStatementList?, _ error: Error?) -> Void)) {
        apiV2ClientsReportStatementsListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/report/statements/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedStatementList> 
     */
    open class func apiV2ClientsReportStatementsListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ClientsReportStatementsList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedStatementList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/report/statements/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStatementList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsReportStatementsRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReportStatementsRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsReportStatementsRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Statement?, _ error: Error?) -> Void)) {
        apiV2ClientsReportStatementsRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/report/statements/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<Statement> 
     */
    open class func apiV2ClientsReportStatementsRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsReportStatementsRetrieve? = nil) -> RequestBuilder<Statement> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/report/statements/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Statement>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsReportTaxReportsList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReportTaxReportsList(clientUuid: UUID, format: Format_apiV2ClientsReportTaxReportsList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedTaxReportList?, _ error: Error?) -> Void)) {
        apiV2ClientsReportTaxReportsListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/report/tax-reports/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedTaxReportList> 
     */
    open class func apiV2ClientsReportTaxReportsListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ClientsReportTaxReportsList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedTaxReportList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/report/tax-reports/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTaxReportList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsReportTaxReportsRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReportTaxReportsRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsReportTaxReportsRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: TaxReport?, _ error: Error?) -> Void)) {
        apiV2ClientsReportTaxReportsRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/report/tax-reports/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<TaxReport> 
     */
    open class func apiV2ClientsReportTaxReportsRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsReportTaxReportsRetrieve? = nil) -> RequestBuilder<TaxReport> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/report/tax-reports/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaxReport>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter emailVerifyView: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsVerifyEmailUpdate(uuid: UUID, emailVerifyView: EmailVerifyView, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: EmailVerifyView?, _ error: Error?) -> Void)) {
        apiV2ClientsVerifyEmailUpdateWithRequestBuilder(uuid: uuid, emailVerifyView: emailVerifyView).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{uuid}/verify/email/
     - Verify e-mail account with the given email token.
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - parameter emailVerifyView: (body)  
     - returns: RequestBuilder<EmailVerifyView> 
     */
    open class func apiV2ClientsVerifyEmailUpdateWithRequestBuilder(uuid: UUID, emailVerifyView: EmailVerifyView) -> RequestBuilder<EmailVerifyView> {
        var localVariablePath = "/api/v2/clients/{uuid}/verify/email/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailVerifyView)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailVerifyView>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - parameter watchlist: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsCreate(clientUuid: UUID, watchlistUuid: UUID, watchlist: Watchlist, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Watchlist?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsCreateWithRequestBuilder(clientUuid: clientUuid, watchlistUuid: watchlistUuid, watchlist: watchlist).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/watchlists/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - parameter watchlist: (body)  
     - returns: RequestBuilder<Watchlist> 
     */
    open class func apiV2ClientsWatchlistsCreateWithRequestBuilder(clientUuid: UUID, watchlistUuid: UUID, watchlist: Watchlist) -> RequestBuilder<Watchlist> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let watchlistUuidPreEscape = "\(APIHelper.mapValueToPathItem(watchlistUuid))"
        let watchlistUuidPostEscape = watchlistUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{watchlist_uuid}", with: watchlistUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlist)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Watchlist>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsDestroy(clientUuid: UUID, watchlistUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsDestroyWithRequestBuilder(clientUuid: clientUuid, watchlistUuid: watchlistUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsWatchlistsDestroyWithRequestBuilder(clientUuid: UUID, watchlistUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let watchlistUuidPreEscape = "\(APIHelper.mapValueToPathItem(watchlistUuid))"
        let watchlistUuidPostEscape = watchlistUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{watchlist_uuid}", with: watchlistUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsList(clientUuid: UUID, watchlistUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedWatchlistList?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsListWithRequestBuilder(clientUuid: clientUuid, watchlistUuid: watchlistUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/watchlists/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedWatchlistList> 
     */
    open class func apiV2ClientsWatchlistsListWithRequestBuilder(clientUuid: UUID, watchlistUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedWatchlistList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let watchlistUuidPreEscape = "\(APIHelper.mapValueToPathItem(watchlistUuid))"
        let watchlistUuidPostEscape = watchlistUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{watchlist_uuid}", with: watchlistUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedWatchlistList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsRetrieve(clientUuid: UUID, watchlistUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Watchlist?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsRetrieveWithRequestBuilder(clientUuid: clientUuid, watchlistUuid: watchlistUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - returns: RequestBuilder<Watchlist> 
     */
    open class func apiV2ClientsWatchlistsRetrieveWithRequestBuilder(clientUuid: UUID, watchlistUuid: UUID) -> RequestBuilder<Watchlist> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let watchlistUuidPreEscape = "\(APIHelper.mapValueToPathItem(watchlistUuid))"
        let watchlistUuidPostEscape = watchlistUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{watchlist_uuid}", with: watchlistUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Watchlist>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - parameter watchlist: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsUpdate(clientUuid: UUID, watchlistUuid: UUID, watchlist: Watchlist, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Watchlist?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsUpdateWithRequestBuilder(clientUuid: clientUuid, watchlistUuid: watchlistUuid, watchlist: watchlist).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter watchlistUuid: (path)  
     - parameter watchlist: (body)  
     - returns: RequestBuilder<Watchlist> 
     */
    open class func apiV2ClientsWatchlistsUpdateWithRequestBuilder(clientUuid: UUID, watchlistUuid: UUID, watchlist: Watchlist) -> RequestBuilder<Watchlist> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/{watchlist_uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let watchlistUuidPreEscape = "\(APIHelper.mapValueToPathItem(watchlistUuid))"
        let watchlistUuidPostEscape = watchlistUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{watchlist_uuid}", with: watchlistUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlist)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Watchlist>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter channel
     */
    public enum Channel_apiV2FeedsAccessLogsList: String, CaseIterable {
        case android = "ANDROID"
        case browser = "BROWSER"
        case ios = "IOS"
    }

    /**

     - parameter browser: (query)  (optional)
     - parameter browserVersion: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter city: (query)  (optional)
     - parameter country: (query)  (optional)
     - parameter deviceBrand: (query)  (optional)
     - parameter deviceModel: (query)  (optional)
     - parameter ipAddress: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter os: (query)  (optional)
     - parameter osVersion: (query)  (optional)
     - parameter userAgent: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2FeedsAccessLogsList(browser: String? = nil, browserVersion: String? = nil, channel: Channel_apiV2FeedsAccessLogsList? = nil, city: String? = nil, country: Int? = nil, deviceBrand: String? = nil, deviceModel: String? = nil, ipAddress: String? = nil, limit: Int? = nil, offset: Int? = nil, os: String? = nil, osVersion: String? = nil, userAgent: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedAccessLogList?, _ error: Error?) -> Void)) {
        apiV2FeedsAccessLogsListWithRequestBuilder(browser: browser, browserVersion: browserVersion, channel: channel, city: city, country: country, deviceBrand: deviceBrand, deviceModel: deviceModel, ipAddress: ipAddress, limit: limit, offset: offset, os: os, osVersion: osVersion, userAgent: userAgent).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/feeds/access-logs/
     - Retrieves the latest access to the client's account
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter browser: (query)  (optional)
     - parameter browserVersion: (query)  (optional)
     - parameter channel: (query)  (optional)
     - parameter city: (query)  (optional)
     - parameter country: (query)  (optional)
     - parameter deviceBrand: (query)  (optional)
     - parameter deviceModel: (query)  (optional)
     - parameter ipAddress: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter os: (query)  (optional)
     - parameter osVersion: (query)  (optional)
     - parameter userAgent: (query)  (optional)
     - returns: RequestBuilder<PaginatedAccessLogList> 
     */
    open class func apiV2FeedsAccessLogsListWithRequestBuilder(browser: String? = nil, browserVersion: String? = nil, channel: Channel_apiV2FeedsAccessLogsList? = nil, city: String? = nil, country: Int? = nil, deviceBrand: String? = nil, deviceModel: String? = nil, ipAddress: String? = nil, limit: Int? = nil, offset: Int? = nil, os: String? = nil, osVersion: String? = nil, userAgent: String? = nil) -> RequestBuilder<PaginatedAccessLogList> {
        let localVariablePath = "/api/v2/feeds/access-logs/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "browser": browser?.encodeToJSON(),
            "browser_version": browserVersion?.encodeToJSON(),
            "channel": channel?.encodeToJSON(),
            "city": city?.encodeToJSON(),
            "country": country?.encodeToJSON(),
            "device_brand": deviceBrand?.encodeToJSON(),
            "device_model": deviceModel?.encodeToJSON(),
            "ip_address": ipAddress?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "os": os?.encodeToJSON(),
            "os_version": osVersion?.encodeToJSON(),
            "user_agent": userAgent?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAccessLogList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter target
     */
    public enum Target_apiV2FeedsActivitiesList: String, CaseIterable {
        case empty = ""
        case cashcorporateaction = "cashcorporateaction"
        case charge = "charge"
        case deposit = "deposit"
        case portfolio = "portfolio"
        case rebalance = "rebalance"
        case sharescorporateaction = "sharescorporateaction"
        case withdrawal = "withdrawal"
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter target: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2FeedsActivitiesList(limit: Int? = nil, offset: Int? = nil, target: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedFeedActivityListList?, _ error: Error?) -> Void)) {
        apiV2FeedsActivitiesListWithRequestBuilder(limit: limit, offset: offset, target: target).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/feeds/activities/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter target: (query)  (optional)
     - returns: RequestBuilder<PaginatedFeedActivityListList> 
     */
    open class func apiV2FeedsActivitiesListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil, target: [String]? = nil) -> RequestBuilder<PaginatedFeedActivityListList> {
        let localVariablePath = "/api/v2/feeds/activities/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "target": target?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedFeedActivityListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter goalUuid: (path)  
     - parameter goal: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2GoalsCreate(goalUuid: UUID, goal: Goal, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Goal?, _ error: Error?) -> Void)) {
        apiV2GoalsCreateWithRequestBuilder(goalUuid: goalUuid, goal: goal).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/goals/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter goalUuid: (path)  
     - parameter goal: (body)  
     - returns: RequestBuilder<Goal> 
     */
    open class func apiV2GoalsCreateWithRequestBuilder(goalUuid: UUID, goal: Goal) -> RequestBuilder<Goal> {
        var localVariablePath = "/api/v2/goals/"
        let goalUuidPreEscape = "\(APIHelper.mapValueToPathItem(goalUuid))"
        let goalUuidPostEscape = goalUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goal_uuid}", with: goalUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: goal)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Goal>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter forecastDecumulationRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2GoalsDecumulationCreate(forecastDecumulationRequest: ForecastDecumulationRequest, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ForecastDecumulationRequest?, _ error: Error?) -> Void)) {
        apiV2GoalsDecumulationCreateWithRequestBuilder(forecastDecumulationRequest: forecastDecumulationRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/goals/decumulation/
     - Return a Goal Forecast Decumulation
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter forecastDecumulationRequest: (body)  
     - returns: RequestBuilder<ForecastDecumulationRequest> 
     */
    open class func apiV2GoalsDecumulationCreateWithRequestBuilder(forecastDecumulationRequest: ForecastDecumulationRequest) -> RequestBuilder<ForecastDecumulationRequest> {
        let localVariablePath = "/api/v2/goals/decumulation/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: forecastDecumulationRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ForecastDecumulationRequest>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter goalUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2GoalsDestroy(goalUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2GoalsDestroyWithRequestBuilder(goalUuid: goalUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/goals/{goal_uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter goalUuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2GoalsDestroyWithRequestBuilder(goalUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/goals/{goal_uuid}/"
        let goalUuidPreEscape = "\(APIHelper.mapValueToPathItem(goalUuid))"
        let goalUuidPostEscape = goalUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goal_uuid}", with: goalUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter forecastRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2GoalsForecastCreate(forecastRequest: ForecastRequest, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ForecastRequest?, _ error: Error?) -> Void)) {
        apiV2GoalsForecastCreateWithRequestBuilder(forecastRequest: forecastRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/goals/forecast/
     - Return a Goal Forecast
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter forecastRequest: (body)  
     - returns: RequestBuilder<ForecastRequest> 
     */
    open class func apiV2GoalsForecastCreateWithRequestBuilder(forecastRequest: ForecastRequest) -> RequestBuilder<ForecastRequest> {
        let localVariablePath = "/api/v2/goals/forecast/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: forecastRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ForecastRequest>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter goalUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2GoalsList(goalUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedGoalList?, _ error: Error?) -> Void)) {
        apiV2GoalsListWithRequestBuilder(goalUuid: goalUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/goals/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter goalUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedGoalList> 
     */
    open class func apiV2GoalsListWithRequestBuilder(goalUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedGoalList> {
        var localVariablePath = "/api/v2/goals/"
        let goalUuidPreEscape = "\(APIHelper.mapValueToPathItem(goalUuid))"
        let goalUuidPostEscape = goalUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goal_uuid}", with: goalUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedGoalList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter goalUuid: (path)  
     - parameter patchedGoal: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2GoalsPartialUpdate(goalUuid: UUID, patchedGoal: PatchedGoal? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Goal?, _ error: Error?) -> Void)) {
        apiV2GoalsPartialUpdateWithRequestBuilder(goalUuid: goalUuid, patchedGoal: patchedGoal).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/goals/{goal_uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter goalUuid: (path)  
     - parameter patchedGoal: (body)  (optional)
     - returns: RequestBuilder<Goal> 
     */
    open class func apiV2GoalsPartialUpdateWithRequestBuilder(goalUuid: UUID, patchedGoal: PatchedGoal? = nil) -> RequestBuilder<Goal> {
        var localVariablePath = "/api/v2/goals/{goal_uuid}/"
        let goalUuidPreEscape = "\(APIHelper.mapValueToPathItem(goalUuid))"
        let goalUuidPostEscape = goalUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goal_uuid}", with: goalUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedGoal)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Goal>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter goalUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2GoalsRetrieve(goalUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Goal?, _ error: Error?) -> Void)) {
        apiV2GoalsRetrieveWithRequestBuilder(goalUuid: goalUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/goals/{goal_uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter goalUuid: (path)  
     - returns: RequestBuilder<Goal> 
     */
    open class func apiV2GoalsRetrieveWithRequestBuilder(goalUuid: UUID) -> RequestBuilder<Goal> {
        var localVariablePath = "/api/v2/goals/{goal_uuid}/"
        let goalUuidPreEscape = "\(APIHelper.mapValueToPathItem(goalUuid))"
        let goalUuidPostEscape = goalUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{goal_uuid}", with: goalUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Goal>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (form)  
     - parameter portal: (form)  
     - parameter created: (form)  
     - parameter subject: (form)  
     - parameter messages: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2InboxConversationsCreate(uuid: UUID, portal: Int, created: Date, subject: String, messages: Message? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ConversationCreate?, _ error: Error?) -> Void)) {
        apiV2InboxConversationsCreateWithRequestBuilder(uuid: uuid, portal: portal, created: created, subject: subject, messages: messages).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/inbox/conversations/
     - get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (form)  
     - parameter portal: (form)  
     - parameter created: (form)  
     - parameter subject: (form)  
     - parameter messages: (form)  (optional)
     - returns: RequestBuilder<ConversationCreate> 
     */
    open class func apiV2InboxConversationsCreateWithRequestBuilder(uuid: UUID, portal: Int, created: Date, subject: String, messages: Message? = nil) -> RequestBuilder<ConversationCreate> {
        let localVariablePath = "/api/v2/inbox/conversations/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid.encodeToJSON(),
            "portal": portal.encodeToJSON(),
            "created": created.encodeToJSON(),
            "subject": subject.encodeToJSON(),
            "messages": messages?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConversationCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2InboxConversationsList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedConversationListList?, _ error: Error?) -> Void)) {
        apiV2InboxConversationsListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/inbox/conversations/
     - get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedConversationListList> 
     */
    open class func apiV2InboxConversationsListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedConversationListList> {
        let localVariablePath = "/api/v2/inbox/conversations/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedConversationListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter conversation: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2InboxConversationsList2(conversation: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedMessageList?, _ error: Error?) -> Void)) {
        apiV2InboxConversationsList2WithRequestBuilder(conversation: conversation, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/inbox/conversations/{conversation}/
     - List all messages from a conversation uuid
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter conversation: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedMessageList> 
     */
    open class func apiV2InboxConversationsList2WithRequestBuilder(conversation: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedMessageList> {
        var localVariablePath = "/api/v2/inbox/conversations/{conversation}/"
        let conversationPreEscape = "\(APIHelper.mapValueToPathItem(conversation))"
        let conversationPostEscape = conversationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{conversation}", with: conversationPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedMessageList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2InboxConversationsMessagesAttachmentsRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter conversation: (path)  
     - parameter message: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2InboxConversationsMessagesAttachmentsRetrieve(conversation: UUID, message: UUID, uuid: UUID, format: Format_apiV2InboxConversationsMessagesAttachmentsRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Attachment?, _ error: Error?) -> Void)) {
        apiV2InboxConversationsMessagesAttachmentsRetrieveWithRequestBuilder(conversation: conversation, message: message, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/inbox/conversations/{conversation}/messages/{message}/attachments/{uuid}/
     - View to access to an attachment
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter conversation: (path)  
     - parameter message: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<Attachment> 
     */
    open class func apiV2InboxConversationsMessagesAttachmentsRetrieveWithRequestBuilder(conversation: UUID, message: UUID, uuid: UUID, format: Format_apiV2InboxConversationsMessagesAttachmentsRetrieve? = nil) -> RequestBuilder<Attachment> {
        var localVariablePath = "/api/v2/inbox/conversations/{conversation}/messages/{message}/attachments/{uuid}/"
        let conversationPreEscape = "\(APIHelper.mapValueToPathItem(conversation))"
        let conversationPostEscape = conversationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{conversation}", with: conversationPostEscape, options: .literal, range: nil)
        let messagePreEscape = "\(APIHelper.mapValueToPathItem(message))"
        let messagePostEscape = messagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{message}", with: messagePostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Attachment>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter conversation: (path)  
     - parameter user: (form)  
     - parameter readDate: (form)  
     - parameter created: (form)  
     - parameter attachments: (form)  
     - parameter uuid: (form)  
     - parameter content: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2InboxConversationsMessagesCreate(conversation: UUID, user: String, readDate: Date, created: Date, attachments: [Attachment], uuid: UUID, content: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Message?, _ error: Error?) -> Void)) {
        apiV2InboxConversationsMessagesCreateWithRequestBuilder(conversation: conversation, user: user, readDate: readDate, created: created, attachments: attachments, uuid: uuid, content: content).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/inbox/conversations/{conversation}/messages/
     - View for creating message on a specific conversation
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter conversation: (path)  
     - parameter user: (form)  
     - parameter readDate: (form)  
     - parameter created: (form)  
     - parameter attachments: (form)  
     - parameter uuid: (form)  
     - parameter content: (form)  (optional)
     - returns: RequestBuilder<Message> 
     */
    open class func apiV2InboxConversationsMessagesCreateWithRequestBuilder(conversation: UUID, user: String, readDate: Date, created: Date, attachments: [Attachment], uuid: UUID, content: String? = nil) -> RequestBuilder<Message> {
        var localVariablePath = "/api/v2/inbox/conversations/{conversation}/messages/"
        let conversationPreEscape = "\(APIHelper.mapValueToPathItem(conversation))"
        let conversationPostEscape = conversationPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{conversation}", with: conversationPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "user": user.encodeToJSON(),
            "read_date": readDate.encodeToJSON(),
            "content": content?.encodeToJSON(),
            "created": created.encodeToJSON(),
            "attachments": attachments.encodeToJSON(),
            "uuid": uuid.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Message>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter platform: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2MobileVersionRetrieve(platform: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: MinimumAppVersion?, _ error: Error?) -> Void)) {
        apiV2MobileVersionRetrieveWithRequestBuilder(platform: platform).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/mobile/{platform}/version/
     - Returns the number of the last required APP Version for a platform.
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter platform: (path)  
     - returns: RequestBuilder<MinimumAppVersion> 
     */
    open class func apiV2MobileVersionRetrieveWithRequestBuilder(platform: String) -> RequestBuilder<MinimumAppVersion> {
        var localVariablePath = "/api/v2/mobile/{platform}/version/"
        let platformPreEscape = "\(APIHelper.mapValueToPathItem(platform))"
        let platformPostEscape = platformPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{platform}", with: platformPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MinimumAppVersion>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PlatformSettingsList(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: [NucoroSetting]?, _ error: Error?) -> Void)) {
        apiV2PlatformSettingsListWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/platform/settings/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - returns: RequestBuilder<[NucoroSetting]> 
     */
    open class func apiV2PlatformSettingsListWithRequestBuilder() -> RequestBuilder<[NucoroSetting]> {
        let localVariablePath = "/api/v2/platform/settings/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NucoroSetting]>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortalCountriesList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedCountryListList?, _ error: Error?) -> Void)) {
        apiV2PortalCountriesListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portal/countries/
     - Retrieves the list of countries
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedCountryListList> 
     */
    open class func apiV2PortalCountriesListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedCountryListList> {
        let localVariablePath = "/api/v2/portal/countries/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedCountryListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortalSettingsRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PortalSettingValueList?, _ error: Error?) -> Void)) {
        apiV2PortalSettingsRetrieveWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portal/settings/
     - BASIC:
       - type: http
       - name: basicAuth
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - returns: RequestBuilder<PortalSettingValueList> 
     */
    open class func apiV2PortalSettingsRetrieveWithRequestBuilder() -> RequestBuilder<PortalSettingValueList> {
        let localVariablePath = "/api/v2/portal/settings/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PortalSettingValueList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortalTosCurrentRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Tos?, _ error: Error?) -> Void)) {
        apiV2PortalTosCurrentRetrieveWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portal/tos/current/
     - Retrieves the current ToS for the Portal
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - returns: RequestBuilder<Tos> 
     */
    open class func apiV2PortalTosCurrentRetrieveWithRequestBuilder() -> RequestBuilder<Tos> {
        let localVariablePath = "/api/v2/portal/tos/current/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tos>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortalTosList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedTosList?, _ error: Error?) -> Void)) {
        apiV2PortalTosListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portal/tos/
     - List all ToS for the current Portal
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedTosList> 
     */
    open class func apiV2PortalTosListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedTosList> {
        let localVariablePath = "/api/v2/portal/tos/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTosList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortalTosRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Tos?, _ error: Error?) -> Void)) {
        apiV2PortalTosRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portal/tos/{uuid}/
     - Retrieves a specific ToS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<Tos> 
     */
    open class func apiV2PortalTosRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<Tos> {
        var localVariablePath = "/api/v2/portal/tos/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Tos>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter target
     */
    public enum Target_apiV2PortfoliosActivitiesList: String, CaseIterable {
        case empty = ""
        case cashcorporateaction = "cashcorporateaction"
        case charge = "charge"
        case deposit = "deposit"
        case portfolio = "portfolio"
        case rebalance = "rebalance"
        case sharescorporateaction = "sharescorporateaction"
        case withdrawal = "withdrawal"
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter target: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosActivitiesList(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, target: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedFeedActivityListList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosActivitiesListWithRequestBuilder(portfolioUuid: portfolioUuid, limit: limit, offset: offset, target: target).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/activities/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter target: (query)  (optional)
     - returns: RequestBuilder<PaginatedFeedActivityListList> 
     */
    open class func apiV2PortfoliosActivitiesListWithRequestBuilder(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, target: [String]? = nil) -> RequestBuilder<PaginatedFeedActivityListList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/activities/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "target": target?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedFeedActivityListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosActivitiesRetrieve(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: FeedActivityList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosActivitiesRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/activities/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<FeedActivityList> 
     */
    open class func apiV2PortfoliosActivitiesRetrieveWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<FeedActivityList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/activities/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FeedActivityList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosAllocationsEndDay(portfolioUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AllocationList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosAllocationsEndDayWithRequestBuilder(portfolioUuid: portfolioUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/allocations/end-day/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - returns: RequestBuilder<AllocationList> 
     */
    open class func apiV2PortfoliosAllocationsEndDayWithRequestBuilder(portfolioUuid: UUID) -> RequestBuilder<AllocationList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AllocationList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter allocationDate: (path)  
     - parameter portfolioUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosAllocationsEndDayByDateRetrieve(allocationDate: String, portfolioUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AllocationDetail?, _ error: Error?) -> Void)) {
        apiV2PortfoliosAllocationsEndDayByDateRetrieveWithRequestBuilder(allocationDate: allocationDate, portfolioUuid: portfolioUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/allocations/end-day/{allocation_date}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter allocationDate: (path)  
     - parameter portfolioUuid: (path)  
     - returns: RequestBuilder<AllocationDetail> 
     */
    open class func apiV2PortfoliosAllocationsEndDayByDateRetrieveWithRequestBuilder(allocationDate: String, portfolioUuid: UUID) -> RequestBuilder<AllocationDetail> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/{allocation_date}/"
        let allocationDatePreEscape = "\(APIHelper.mapValueToPathItem(allocationDate))"
        let allocationDatePostEscape = allocationDatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{allocation_date}", with: allocationDatePostEscape, options: .literal, range: nil)
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AllocationDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosAllocationsEndDayLatestRetrieve(portfolioUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AllocationDetail?, _ error: Error?) -> Void)) {
        apiV2PortfoliosAllocationsEndDayLatestRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/allocations/end-day/latest/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - returns: RequestBuilder<AllocationDetail> 
     */
    open class func apiV2PortfoliosAllocationsEndDayLatestRetrieveWithRequestBuilder(portfolioUuid: UUID) -> RequestBuilder<AllocationDetail> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/latest/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AllocationDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolio: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosAllocationsHistoryRetrieve(portfolio: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2PortfoliosAllocationsHistoryRetrieveWithRequestBuilder(portfolio: portfolio).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio}/allocations/history/
     - Allocations History for a given portfolio  It accepts two optional parameters, `date_to` and `date_from` to limit the daily allocations to a certain data range. If they are not given, all the allocations are returned.  ---  ## Parameters:   * **name**: `date_from`  * **description**: The initial date.  * **parameter type**: query param   * **name**: `date_from`  * **description**: The final date.  * **parameter type**: query param
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolio: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2PortfoliosAllocationsHistoryRetrieveWithRequestBuilder(portfolio: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/portfolios/{portfolio}/allocations/history/"
        let portfolioPreEscape = "\(APIHelper.mapValueToPathItem(portfolio))"
        let portfolioPostEscape = portfolioPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio}", with: portfolioPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosAllocationsIntradayLatestRetrieve(portfolioUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: CurrentAllocation?, _ error: Error?) -> Void)) {
        apiV2PortfoliosAllocationsIntradayLatestRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/allocations/intraday/latest/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - returns: RequestBuilder<CurrentAllocation> 
     */
    open class func apiV2PortfoliosAllocationsIntradayLatestRetrieveWithRequestBuilder(portfolioUuid: UUID) -> RequestBuilder<CurrentAllocation> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/allocations/intraday/latest/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CurrentAllocation>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter valuationDateAfter: (query)  (optional)
     - parameter valuationDateBefore: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosAllocationsList(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, valuationDateAfter: Date? = nil, valuationDateBefore: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedAllocationListList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosAllocationsListWithRequestBuilder(portfolioUuid: portfolioUuid, limit: limit, offset: offset, valuationDateAfter: valuationDateAfter, valuationDateBefore: valuationDateBefore).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/allocations/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter valuationDateAfter: (query)  (optional)
     - parameter valuationDateBefore: (query)  (optional)
     - returns: RequestBuilder<PaginatedAllocationListList> 
     */
    open class func apiV2PortfoliosAllocationsListWithRequestBuilder(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, valuationDateAfter: Date? = nil, valuationDateBefore: Date? = nil) -> RequestBuilder<PaginatedAllocationListList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/allocations/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "valuation_date_after": valuationDateAfter?.encodeToJSON(),
            "valuation_date_before": valuationDateBefore?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAllocationListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (path) A unique integer value identifying this allocation. 
     - parameter portfolioUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosAllocationsRetrieve(id: Int, portfolioUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AllocationList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosAllocationsRetrieveWithRequestBuilder(id: id, portfolioUuid: portfolioUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/allocations/{id}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter id: (path) A unique integer value identifying this allocation. 
     - parameter portfolioUuid: (path)  
     - returns: RequestBuilder<AllocationList> 
     */
    open class func apiV2PortfoliosAllocationsRetrieveWithRequestBuilder(id: Int, portfolioUuid: UUID) -> RequestBuilder<AllocationList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/allocations/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AllocationList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter portfolioCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosCreate(portfolioUuid: UUID, portfolioCreate: PortfolioCreate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PortfolioCreate?, _ error: Error?) -> Void)) {
        apiV2PortfoliosCreateWithRequestBuilder(portfolioUuid: portfolioUuid, portfolioCreate: portfolioCreate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/portfolios/
     - Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter portfolioCreate: (body)  
     - returns: RequestBuilder<PortfolioCreate> 
     */
    open class func apiV2PortfoliosCreateWithRequestBuilder(portfolioUuid: UUID, portfolioCreate: PortfolioCreate) -> RequestBuilder<PortfolioCreate> {
        var localVariablePath = "/api/v2/portfolios/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: portfolioCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PortfolioCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter depositCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosDepositsCreate(portfolioUuid: UUID, depositCreate: DepositCreate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: DepositCreate?, _ error: Error?) -> Void)) {
        apiV2PortfoliosDepositsCreateWithRequestBuilder(portfolioUuid: portfolioUuid, depositCreate: depositCreate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/portfolios/{portfolio_uuid}/deposits/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter depositCreate: (body)  
     - returns: RequestBuilder<DepositCreate> 
     */
    open class func apiV2PortfoliosDepositsCreateWithRequestBuilder(portfolioUuid: UUID, depositCreate: DepositCreate) -> RequestBuilder<DepositCreate> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/deposits/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: depositCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DepositCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosDepositsDestroy(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2PortfoliosDepositsDestroyWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2PortfoliosDepositsDestroyWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter status
     */
    public enum Status_apiV2PortfoliosDepositsList: String, CaseIterable {
        case cancelled = "CANCELLED"
        case completed = "COMPLETED"
        case error = "ERROR"
        case pending = "PENDING"
        case processing = "PROCESSING"
        case requested = "REQUESTED"
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosDepositsList(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, status: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedDepositListList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosDepositsListWithRequestBuilder(portfolioUuid: portfolioUuid, limit: limit, offset: offset, status: status).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/deposits/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<PaginatedDepositListList> 
     */
    open class func apiV2PortfoliosDepositsListWithRequestBuilder(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, status: [String]? = nil) -> RequestBuilder<PaginatedDepositListList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/deposits/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDepositListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosDepositsRetrieve(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: DepositDetail?, _ error: Error?) -> Void)) {
        apiV2PortfoliosDepositsRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<DepositDetail> 
     */
    open class func apiV2PortfoliosDepositsRetrieveWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<DepositDetail> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DepositDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosDestroy(portfolioUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2PortfoliosDestroyWithRequestBuilder(portfolioUuid: portfolioUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/portfolios/{portfolio_uuid}/
     - Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2PortfoliosDestroyWithRequestBuilder(portfolioUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter status
     */
    public enum Status_apiV2PortfoliosList: String, CaseIterable {
        case active = "ACTIVE"
        case deleted = "DELETED"
        case deleting = "DELETING"
        case pending = "PENDING"
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter externalCustodianId: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - parameter valuationDateAfter: (query)  (optional)
     - parameter valuationDateBefore: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosList(portfolioUuid: UUID, externalCustodianId: String? = nil, limit: Int? = nil, offset: Int? = nil, status: [String]? = nil, valuationDateAfter: Date? = nil, valuationDateBefore: Date? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedPortfolioListList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosListWithRequestBuilder(portfolioUuid: portfolioUuid, externalCustodianId: externalCustodianId, limit: limit, offset: offset, status: status, valuationDateAfter: valuationDateAfter, valuationDateBefore: valuationDateBefore).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/
     - Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter externalCustodianId: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - parameter valuationDateAfter: (query)  (optional)
     - parameter valuationDateBefore: (query)  (optional)
     - returns: RequestBuilder<PaginatedPortfolioListList> 
     */
    open class func apiV2PortfoliosListWithRequestBuilder(portfolioUuid: UUID, externalCustodianId: String? = nil, limit: Int? = nil, offset: Int? = nil, status: [String]? = nil, valuationDateAfter: Date? = nil, valuationDateBefore: Date? = nil) -> RequestBuilder<PaginatedPortfolioListList> {
        var localVariablePath = "/api/v2/portfolios/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "external_custodian_id": externalCustodianId?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "valuation_date_after": valuationDateAfter?.encodeToJSON(),
            "valuation_date_before": valuationDateBefore?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPortfolioListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter createOrder: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosOrdersCreate(portfolioUuid: UUID, createOrder: CreateOrder, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: CreateOrder?, _ error: Error?) -> Void)) {
        apiV2PortfoliosOrdersCreateWithRequestBuilder(portfolioUuid: portfolioUuid, createOrder: createOrder).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/portfolios/{portfolio_uuid}/orders/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter createOrder: (body)  
     - returns: RequestBuilder<CreateOrder> 
     */
    open class func apiV2PortfoliosOrdersCreateWithRequestBuilder(portfolioUuid: UUID, createOrder: CreateOrder) -> RequestBuilder<CreateOrder> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/orders/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrder)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateOrder>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosOrdersDestroy(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2PortfoliosOrdersDestroyWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/
     - Cancel or request cancellation to the broker
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2PortfoliosOrdersDestroyWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter adviceExternalId: (query)  (optional)
     - parameter asset: (query)  (optional)
     - parameter completedAfter: (query)  (optional)
     - parameter completedBefore: (query)  (optional)
     - parameter extraData: (query) Additional order attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter portfolio: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosOrdersList(portfolioUuid: UUID, adviceExternalId: String? = nil, asset: String? = nil, completedAfter: Date? = nil, completedBefore: Date? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, offset: Int? = nil, portfolio: String? = nil, status: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedOrderListList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosOrdersListWithRequestBuilder(portfolioUuid: portfolioUuid, adviceExternalId: adviceExternalId, asset: asset, completedAfter: completedAfter, completedBefore: completedBefore, extraData: extraData, limit: limit, offset: offset, portfolio: portfolio, status: status).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/orders/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter adviceExternalId: (query)  (optional)
     - parameter asset: (query)  (optional)
     - parameter completedAfter: (query)  (optional)
     - parameter completedBefore: (query)  (optional)
     - parameter extraData: (query) Additional order attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter portfolio: (query)  (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<PaginatedOrderListList> 
     */
    open class func apiV2PortfoliosOrdersListWithRequestBuilder(portfolioUuid: UUID, adviceExternalId: String? = nil, asset: String? = nil, completedAfter: Date? = nil, completedBefore: Date? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, offset: Int? = nil, portfolio: String? = nil, status: String? = nil) -> RequestBuilder<PaginatedOrderListList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/orders/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "advice_external_id": adviceExternalId?.encodeToJSON(),
            "asset": asset?.encodeToJSON(),
            "completed_after": completedAfter?.encodeToJSON(),
            "completed_before": completedBefore?.encodeToJSON(),
            "extra_data": extraData?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "portfolio": portfolio?.encodeToJSON(),
            "status": status?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedOrderListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosOrdersRetrieve(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: OrderList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosOrdersRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<OrderList> 
     */
    open class func apiV2PortfoliosOrdersRetrieveWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<OrderList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter patchedPortfolioUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosPartialUpdate(portfolioUuid: UUID, patchedPortfolioUpdate: PatchedPortfolioUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PortfolioUpdate?, _ error: Error?) -> Void)) {
        apiV2PortfoliosPartialUpdateWithRequestBuilder(portfolioUuid: portfolioUuid, patchedPortfolioUpdate: patchedPortfolioUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/portfolios/{portfolio_uuid}/
     - Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter patchedPortfolioUpdate: (body)  (optional)
     - returns: RequestBuilder<PortfolioUpdate> 
     */
    open class func apiV2PortfoliosPartialUpdateWithRequestBuilder(portfolioUuid: UUID, patchedPortfolioUpdate: PatchedPortfolioUpdate? = nil) -> RequestBuilder<PortfolioUpdate> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedPortfolioUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PortfolioUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosPerformanceMwrrList(portfolioUuid: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedPortfolioPerformanceList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosPerformanceMwrrListWithRequestBuilder(portfolioUuid: portfolioUuid, dateAfter: dateAfter, dateBefore: dateBefore, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/performance/mwrr/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedPortfolioPerformanceList> 
     */
    open class func apiV2PortfoliosPerformanceMwrrListWithRequestBuilder(portfolioUuid: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedPortfolioPerformanceList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/performance/mwrr/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_after": dateAfter?.encodeToJSON(),
            "date_before": dateBefore?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPortfolioPerformanceList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosPerformancePositionsList(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedPortfolioPerformancePositionsList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosPerformancePositionsListWithRequestBuilder(portfolioUuid: portfolioUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/performance/positions/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedPortfolioPerformancePositionsList> 
     */
    open class func apiV2PortfoliosPerformancePositionsListWithRequestBuilder(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedPortfolioPerformancePositionsList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/performance/positions/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPortfolioPerformancePositionsList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosPerformanceTwrrList(portfolioUuid: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedPortfolioPerformanceList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosPerformanceTwrrListWithRequestBuilder(portfolioUuid: portfolioUuid, dateAfter: dateAfter, dateBefore: dateBefore, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/performance/twrr/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter dateAfter: (query)  (optional)
     - parameter dateBefore: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedPortfolioPerformanceList> 
     */
    open class func apiV2PortfoliosPerformanceTwrrListWithRequestBuilder(portfolioUuid: UUID, dateAfter: Date? = nil, dateBefore: Date? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedPortfolioPerformanceList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/performance/twrr/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_after": dateAfter?.encodeToJSON(),
            "date_before": dateBefore?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPortfolioPerformanceList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosPortfoliotypesList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedPortfolioTypeList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosPortfoliotypesListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/portfoliotypes/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedPortfolioTypeList> 
     */
    open class func apiV2PortfoliosPortfoliotypesListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedPortfolioTypeList> {
        let localVariablePath = "/api/v2/portfolios/portfoliotypes/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedPortfolioTypeList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter code: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosPortfoliotypesRestrictionsList(code: String, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedBasePortfolioTypeRestrictionsList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosPortfoliotypesRestrictionsListWithRequestBuilder(code: code, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/portfoliotypes/{code}/restrictions/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter code: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedBasePortfolioTypeRestrictionsList> 
     */
    open class func apiV2PortfoliosPortfoliotypesRestrictionsListWithRequestBuilder(code: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedBasePortfolioTypeRestrictionsList> {
        var localVariablePath = "/api/v2/portfolios/portfoliotypes/{code}/restrictions/"
        let codePreEscape = "\(APIHelper.mapValueToPathItem(code))"
        let codePostEscape = codePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{code}", with: codePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedBasePortfolioTypeRestrictionsList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosRebalancesList(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedRebalanceList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosRebalancesListWithRequestBuilder(portfolioUuid: portfolioUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/rebalances/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedRebalanceList> 
     */
    open class func apiV2PortfoliosRebalancesListWithRequestBuilder(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedRebalanceList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/rebalances/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedRebalanceList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosRebalancesRetrieve(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Rebalance?, _ error: Error?) -> Void)) {
        apiV2PortfoliosRebalancesRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/rebalances/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Rebalance> 
     */
    open class func apiV2PortfoliosRebalancesRetrieveWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<Rebalance> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/rebalances/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Rebalance>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosRestrictionsRetrieve(portfolioUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PortfolioTypeRestrictions?, _ error: Error?) -> Void)) {
        apiV2PortfoliosRestrictionsRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/restrictions/
     - Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - returns: RequestBuilder<PortfolioTypeRestrictions> 
     */
    open class func apiV2PortfoliosRestrictionsRetrieveWithRequestBuilder(portfolioUuid: UUID) -> RequestBuilder<PortfolioTypeRestrictions> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/restrictions/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PortfolioTypeRestrictions>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosRetrieve(portfolioUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PortfolioDetail?, _ error: Error?) -> Void)) {
        apiV2PortfoliosRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/
     - Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - returns: RequestBuilder<PortfolioDetail> 
     */
    open class func apiV2PortfoliosRetrieveWithRequestBuilder(portfolioUuid: UUID) -> RequestBuilder<PortfolioDetail> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PortfolioDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter portfolioUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosUpdate(portfolioUuid: UUID, portfolioUpdate: PortfolioUpdate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PortfolioUpdate?, _ error: Error?) -> Void)) {
        apiV2PortfoliosUpdateWithRequestBuilder(portfolioUuid: portfolioUuid, portfolioUpdate: portfolioUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/portfolios/{portfolio_uuid}/
     - Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter portfolioUpdate: (body)  
     - returns: RequestBuilder<PortfolioUpdate> 
     */
    open class func apiV2PortfoliosUpdateWithRequestBuilder(portfolioUuid: UUID, portfolioUpdate: PortfolioUpdate) -> RequestBuilder<PortfolioUpdate> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: portfolioUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PortfolioUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter investorWithdrawalCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosWithdrawalsCreate(portfolioUuid: UUID, investorWithdrawalCreate: InvestorWithdrawalCreate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorWithdrawalCreate?, _ error: Error?) -> Void)) {
        apiV2PortfoliosWithdrawalsCreateWithRequestBuilder(portfolioUuid: portfolioUuid, investorWithdrawalCreate: investorWithdrawalCreate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/portfolios/{portfolio_uuid}/withdrawals/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter investorWithdrawalCreate: (body)  
     - returns: RequestBuilder<InvestorWithdrawalCreate> 
     */
    open class func apiV2PortfoliosWithdrawalsCreateWithRequestBuilder(portfolioUuid: UUID, investorWithdrawalCreate: InvestorWithdrawalCreate) -> RequestBuilder<InvestorWithdrawalCreate> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/withdrawals/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investorWithdrawalCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorWithdrawalCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosWithdrawalsDestroy(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2PortfoliosWithdrawalsDestroyWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2PortfoliosWithdrawalsDestroyWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter status
     */
    public enum Status_apiV2PortfoliosWithdrawalsList: String, CaseIterable {
        case cancelled = "CANCELLED"
        case completed = "COMPLETED"
        case draft = "DRAFT"
        case error = "ERROR"
        case pending = "PENDING"
        case positionsSold = "POSITIONS_SOLD"
        case processing = "PROCESSING"
        case requested = "REQUESTED"
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosWithdrawalsList(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, status: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvestorWithdrawalListList?, _ error: Error?) -> Void)) {
        apiV2PortfoliosWithdrawalsListWithRequestBuilder(portfolioUuid: portfolioUuid, limit: limit, offset: offset, status: status).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/withdrawals/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<PaginatedInvestorWithdrawalListList> 
     */
    open class func apiV2PortfoliosWithdrawalsListWithRequestBuilder(portfolioUuid: UUID, limit: Int? = nil, offset: Int? = nil, status: [String]? = nil) -> RequestBuilder<PaginatedInvestorWithdrawalListList> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/withdrawals/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvestorWithdrawalListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2PortfoliosWithdrawalsRetrieve(portfolioUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: WithdrawalDetail?, _ error: Error?) -> Void)) {
        apiV2PortfoliosWithdrawalsRetrieveWithRequestBuilder(portfolioUuid: portfolioUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter portfolioUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<WithdrawalDetail> 
     */
    open class func apiV2PortfoliosWithdrawalsRetrieveWithRequestBuilder(portfolioUuid: UUID, uuid: UUID) -> RequestBuilder<WithdrawalDetail> {
        var localVariablePath = "/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/"
        let portfolioUuidPreEscape = "\(APIHelper.mapValueToPathItem(portfolioUuid))"
        let portfolioUuidPostEscape = portfolioUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{portfolio_uuid}", with: portfolioUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WithdrawalDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AllocationByAsset?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/allocations-by-asset/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<AllocationByAsset> 
     */
    open class func apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<AllocationByAsset> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/allocations-by-asset/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AllocationByAsset>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AssetConcentrationRisk?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/asset-concentration-risk/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<AssetConcentrationRisk> 
     */
    open class func apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<AssetConcentrationRisk> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/asset-concentration-risk/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetConcentrationRisk>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AUMEvoluation?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/aum-evolution/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<AUMEvoluation> 
     */
    open class func apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<AUMEvoluation> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/aum-evolution/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AUMEvoluation>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AUMPortfolioRisk?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/aum-portfolio-risk/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<AUMPortfolioRisk> 
     */
    open class func apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<AUMPortfolioRisk> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/aum-portfolio-risk/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AUMPortfolioRisk>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAumRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAumRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/aum/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsAumRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/aum/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsClientByRiskRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsClientByRiskRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/client-by-risk/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsClientByRiskRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/client-by-risk/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsClientByStatusRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsClientByStatusRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/client-by-status/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsClientByStatusRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/client-by-status/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsClientRankingRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ClientRanking?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsClientRankingRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/client-ranking/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<ClientRanking> 
     */
    open class func apiV2RelationshipManagerAnalyticsClientRankingRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<ClientRanking> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/client-ranking/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientRanking>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/inflows-outflows/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/inflows-outflows/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/portfolio-risk-performance/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/portfolio-risk-performance/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/analytics/total-active-clients/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/analytics/total-active-clients/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerMeRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerMeRetrieveWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/me/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerMeRetrieveWithRequestBuilder() -> RequestBuilder<RelationshipManager> {
        let localVariablePath = "/api/v2/relationship-manager/me/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ReportStatementsList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ReportStatementsList(clientUuid: UUID, format: Format_apiV2ReportStatementsList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedStatementList?, _ error: Error?) -> Void)) {
        apiV2ReportStatementsListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/report/statements/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedStatementList> 
     */
    open class func apiV2ReportStatementsListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ReportStatementsList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedStatementList> {
        var localVariablePath = "/api/v2/report/statements/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStatementList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ReportStatementsRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ReportStatementsRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ReportStatementsRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Statement?, _ error: Error?) -> Void)) {
        apiV2ReportStatementsRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/report/statements/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<Statement> 
     */
    open class func apiV2ReportStatementsRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ReportStatementsRetrieve? = nil) -> RequestBuilder<Statement> {
        var localVariablePath = "/api/v2/report/statements/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Statement>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ReportTaxReportList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ReportTaxReportList(clientUuid: UUID, format: Format_apiV2ReportTaxReportList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedTaxReportList?, _ error: Error?) -> Void)) {
        apiV2ReportTaxReportListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/report/tax-report/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedTaxReportList> 
     */
    open class func apiV2ReportTaxReportListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ReportTaxReportList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedTaxReportList> {
        var localVariablePath = "/api/v2/report/tax-report/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTaxReportList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ReportTaxReportRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ReportTaxReportRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ReportTaxReportRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: TaxReport?, _ error: Error?) -> Void)) {
        apiV2ReportTaxReportRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/report/tax-report/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<TaxReport> 
     */
    open class func apiV2ReportTaxReportRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ReportTaxReportRetrieve? = nil) -> RequestBuilder<TaxReport> {
        var localVariablePath = "/api/v2/report/tax-report/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaxReport>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RiskQuestionsList(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedQuestionList?, _ error: Error?) -> Void)) {
        apiV2RiskQuestionsListWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/risk/questions/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedQuestionList> 
     */
    open class func apiV2RiskQuestionsListWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedQuestionList> {
        let localVariablePath = "/api/v2/risk/questions/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedQuestionList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter action: (path)  
     - parameter verifier: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2VerificationsVerifierWebhookCreate(action: String, verifier: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2VerificationsVerifierWebhookCreateWithRequestBuilder(action: action, verifier: verifier).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/verifications/verifier_webhook/{verifier}/{action}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter action: (path)  
     - parameter verifier: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2VerificationsVerifierWebhookCreateWithRequestBuilder(action: String, verifier: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/verifications/verifier_webhook/{verifier}/{action}/"
        let actionPreEscape = "\(APIHelper.mapValueToPathItem(action))"
        let actionPostEscape = actionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{action}", with: actionPostEscape, options: .literal, range: nil)
        let verifierPreEscape = "\(APIHelper.mapValueToPathItem(verifier))"
        let verifierPostEscape = verifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verifier}", with: verifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter websocketAuthentication: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2WebsocketAuthenticationTicketCreate(websocketAuthentication: WebsocketAuthentication, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AuthenticationResponse?, _ error: Error?) -> Void)) {
        apiV2WebsocketAuthenticationTicketCreateWithRequestBuilder(websocketAuthentication: websocketAuthentication).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/websocket/authentication/ticket/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter websocketAuthentication: (body)  
     - returns: RequestBuilder<AuthenticationResponse> 
     */
    open class func apiV2WebsocketAuthenticationTicketCreateWithRequestBuilder(websocketAuthentication: WebsocketAuthentication) -> RequestBuilder<AuthenticationResponse> {
        let localVariablePath = "/api/v2/websocket/authentication/ticket/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: websocketAuthentication)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticationResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter websocketAuthentication: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2WebsocketAuthorizeAssetCreate(websocketAuthentication: WebsocketAuthentication, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ModelResponse?, _ error: Error?) -> Void)) {
        apiV2WebsocketAuthorizeAssetCreateWithRequestBuilder(websocketAuthentication: websocketAuthentication).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/websocket/authorize/asset/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter websocketAuthentication: (body)  
     - returns: RequestBuilder<ModelResponse> 
     */
    open class func apiV2WebsocketAuthorizeAssetCreateWithRequestBuilder(websocketAuthentication: WebsocketAuthentication) -> RequestBuilder<ModelResponse> {
        let localVariablePath = "/api/v2/websocket/authorize/asset/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: websocketAuthentication)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter websocketAuthentication: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2WebsocketAuthorizeCreate(websocketAuthentication: WebsocketAuthentication, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ModelResponse?, _ error: Error?) -> Void)) {
        apiV2WebsocketAuthorizeCreateWithRequestBuilder(websocketAuthentication: websocketAuthentication).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/websocket/authorize/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter websocketAuthentication: (body)  
     - returns: RequestBuilder<ModelResponse> 
     */
    open class func apiV2WebsocketAuthorizeCreateWithRequestBuilder(websocketAuthentication: WebsocketAuthentication) -> RequestBuilder<ModelResponse> {
        let localVariablePath = "/api/v2/websocket/authorize/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: websocketAuthentication)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter websocketAuthentication: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2WebsocketAuthorizePortfolioCreate(websocketAuthentication: WebsocketAuthentication, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ModelResponse?, _ error: Error?) -> Void)) {
        apiV2WebsocketAuthorizePortfolioCreateWithRequestBuilder(websocketAuthentication: websocketAuthentication).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/websocket/authorize/portfolio/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter websocketAuthentication: (body)  
     - returns: RequestBuilder<ModelResponse> 
     */
    open class func apiV2WebsocketAuthorizePortfolioCreateWithRequestBuilder(websocketAuthentication: WebsocketAuthentication) -> RequestBuilder<ModelResponse> {
        let localVariablePath = "/api/v2/websocket/authorize/portfolio/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: websocketAuthentication)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter subscribe: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2WebsocketOnSubscribeCreate(subscribe: Subscribe, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Subscribe?, _ error: Error?) -> Void)) {
        apiV2WebsocketOnSubscribeCreateWithRequestBuilder(subscribe: subscribe).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/websocket/on_subscribe/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter subscribe: (body)  
     - returns: RequestBuilder<Subscribe> 
     */
    open class func apiV2WebsocketOnSubscribeCreateWithRequestBuilder(subscribe: Subscribe) -> RequestBuilder<Subscribe> {
        let localVariablePath = "/api/v2/websocket/on_subscribe/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subscribe)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Subscribe>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter unsubscribe: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2WebsocketOnUnsubscribeCreate(unsubscribe: Unsubscribe, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Unsubscribe?, _ error: Error?) -> Void)) {
        apiV2WebsocketOnUnsubscribeCreateWithRequestBuilder(unsubscribe: unsubscribe).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/websocket/on_unsubscribe/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter unsubscribe: (body)  
     - returns: RequestBuilder<Unsubscribe> 
     */
    open class func apiV2WebsocketOnUnsubscribeCreateWithRequestBuilder(unsubscribe: Unsubscribe) -> RequestBuilder<Unsubscribe> {
        let localVariablePath = "/api/v2/websocket/on_unsubscribe/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unsubscribe)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Unsubscribe>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
