//
// InvoiceList.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations */
public struct InvoiceList: Codable, Hashable {

    public var uuid: UUID
    /** Invoice legal number */
    public var number: String
    public var status: Status260Enum
    /** Beginning of charge period */
    public var dateFrom: Date
    /** End of charge period */
    public var dateTo: Date
    public var amount: Double
    public var charges: [String]

    public init(uuid: UUID, number: String, status: Status260Enum, dateFrom: Date, dateTo: Date, amount: Double, charges: [String]) {
        self.uuid = uuid
        self.number = number
        self.status = status
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.amount = amount
        self.charges = charges
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case number
        case status
        case dateFrom = "date_from"
        case dateTo = "date_to"
        case amount
        case charges
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(number, forKey: .number)
        try container.encode(status, forKey: .status)
        try container.encode(dateFrom, forKey: .dateFrom)
        try container.encode(dateTo, forKey: .dateTo)
        try container.encode(amount, forKey: .amount)
        try container.encode(charges, forKey: .charges)
    }
}

