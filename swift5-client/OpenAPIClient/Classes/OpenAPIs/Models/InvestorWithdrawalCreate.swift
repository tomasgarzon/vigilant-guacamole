//
// InvestorWithdrawalCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InvestorWithdrawalCreate: Codable, Hashable {

    public var uuid: UUID
    public var amount: Double
    public var provider: String
    public var status: Status14bEnum
    /** Cancelled reason */
    public var reason: String
    public var completed: Date
    /** Withdrawal reason */
    public var purpose: String?
    public var withdrawalType: String
    /** Additional withdrawal attributes for the specific portal */
    public var extraData: [String: AnyCodable]?

    public init(uuid: UUID, amount: Double, provider: String, status: Status14bEnum, reason: String, completed: Date, purpose: String? = nil, withdrawalType: String, extraData: [String: AnyCodable]? = nil) {
        self.uuid = uuid
        self.amount = amount
        self.provider = provider
        self.status = status
        self.reason = reason
        self.completed = completed
        self.purpose = purpose
        self.withdrawalType = withdrawalType
        self.extraData = extraData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case amount
        case provider
        case status
        case reason
        case completed
        case purpose
        case withdrawalType = "withdrawal_type"
        case extraData = "extra_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(amount, forKey: .amount)
        try container.encode(provider, forKey: .provider)
        try container.encode(status, forKey: .status)
        try container.encode(reason, forKey: .reason)
        try container.encode(completed, forKey: .completed)
        try container.encodeIfPresent(purpose, forKey: .purpose)
        try container.encode(withdrawalType, forKey: .withdrawalType)
        try container.encodeIfPresent(extraData, forKey: .extraData)
    }
}

