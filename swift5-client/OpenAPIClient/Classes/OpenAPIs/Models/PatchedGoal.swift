//
// PatchedGoal.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchedGoal: Codable, Hashable {

    public var uuid: UUID?
    public var name: String?
    public var portfolio: String?
    /** Desired amount needed to fulfill the goal */
    public var goalAmount: Double?
    /** Due date to reach the goal. */
    public var deadline: Date?
    /** Initial deposit amount to start from. No sense to start by 0 */
    public var initialAmount: Double?
    public var recurringAmount: Double?
    public var riskLevel: Int?
    public var created: Date?

    public init(uuid: UUID? = nil, name: String? = nil, portfolio: String? = nil, goalAmount: Double? = nil, deadline: Date? = nil, initialAmount: Double? = nil, recurringAmount: Double? = nil, riskLevel: Int? = nil, created: Date? = nil) {
        self.uuid = uuid
        self.name = name
        self.portfolio = portfolio
        self.goalAmount = goalAmount
        self.deadline = deadline
        self.initialAmount = initialAmount
        self.recurringAmount = recurringAmount
        self.riskLevel = riskLevel
        self.created = created
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case name
        case portfolio
        case goalAmount = "goal_amount"
        case deadline
        case initialAmount = "initial_amount"
        case recurringAmount = "recurring_amount"
        case riskLevel = "risk_level"
        case created
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(portfolio, forKey: .portfolio)
        try container.encodeIfPresent(goalAmount, forKey: .goalAmount)
        try container.encodeIfPresent(deadline, forKey: .deadline)
        try container.encodeIfPresent(initialAmount, forKey: .initialAmount)
        try container.encodeIfPresent(recurringAmount, forKey: .recurringAmount)
        try container.encodeIfPresent(riskLevel, forKey: .riskLevel)
        try container.encodeIfPresent(created, forKey: .created)
    }
}

