//
// PortfolioPerformancePositions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PortfolioPerformancePositions: Codable, Hashable {

    public var valuationDatetime: Date
    public var lastUpdate: Date
    public var asset: String
    public var shares: Double
    public var price: Double
    public var currency: String
    public var weight: Double?
    public var fxRateAccount: Double?
    public var assetCurrencyValue: Double?
    public var value: Double
    public var positionReturn: Double
    public var unrealisedPl: Double
    public var realisedPl: Double
    public var earnings: Double
    public var avgEntryPrice: Double
    public var dailyPl: Double

    public init(valuationDatetime: Date, lastUpdate: Date, asset: String, shares: Double, price: Double, currency: String, weight: Double? = nil, fxRateAccount: Double? = nil, assetCurrencyValue: Double? = nil, value: Double, positionReturn: Double, unrealisedPl: Double, realisedPl: Double, earnings: Double, avgEntryPrice: Double, dailyPl: Double) {
        self.valuationDatetime = valuationDatetime
        self.lastUpdate = lastUpdate
        self.asset = asset
        self.shares = shares
        self.price = price
        self.currency = currency
        self.weight = weight
        self.fxRateAccount = fxRateAccount
        self.assetCurrencyValue = assetCurrencyValue
        self.value = value
        self.positionReturn = positionReturn
        self.unrealisedPl = unrealisedPl
        self.realisedPl = realisedPl
        self.earnings = earnings
        self.avgEntryPrice = avgEntryPrice
        self.dailyPl = dailyPl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case valuationDatetime = "valuation_datetime"
        case lastUpdate = "last_update"
        case asset
        case shares
        case price
        case currency
        case weight
        case fxRateAccount = "fx_rate_account"
        case assetCurrencyValue = "asset_currency_value"
        case value
        case positionReturn = "position_return"
        case unrealisedPl = "unrealised_pl"
        case realisedPl = "realised_pl"
        case earnings
        case avgEntryPrice = "avg_entry_price"
        case dailyPl = "daily_pl"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(valuationDatetime, forKey: .valuationDatetime)
        try container.encode(lastUpdate, forKey: .lastUpdate)
        try container.encode(asset, forKey: .asset)
        try container.encode(shares, forKey: .shares)
        try container.encode(price, forKey: .price)
        try container.encode(currency, forKey: .currency)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(fxRateAccount, forKey: .fxRateAccount)
        try container.encodeIfPresent(assetCurrencyValue, forKey: .assetCurrencyValue)
        try container.encode(value, forKey: .value)
        try container.encode(positionReturn, forKey: .positionReturn)
        try container.encode(unrealisedPl, forKey: .unrealisedPl)
        try container.encode(realisedPl, forKey: .realisedPl)
        try container.encode(earnings, forKey: .earnings)
        try container.encode(avgEntryPrice, forKey: .avgEntryPrice)
        try container.encode(dailyPl, forKey: .dailyPl)
    }
}

