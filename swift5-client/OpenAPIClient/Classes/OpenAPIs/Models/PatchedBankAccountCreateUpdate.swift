//
// PatchedBankAccountCreateUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchedBankAccountCreateUpdate: Codable, Hashable {

    public var uuid: UUID?
    public var accountNumber: String?
    public var accountSortCode: String?
    public var accountHolderName: String?
    public var joint: Bool?
    public var bankName: String?
    public var iban: String?
    public var swiftCode: String?

    public init(uuid: UUID? = nil, accountNumber: String? = nil, accountSortCode: String? = nil, accountHolderName: String? = nil, joint: Bool? = nil, bankName: String? = nil, iban: String? = nil, swiftCode: String? = nil) {
        self.uuid = uuid
        self.accountNumber = accountNumber
        self.accountSortCode = accountSortCode
        self.accountHolderName = accountHolderName
        self.joint = joint
        self.bankName = bankName
        self.iban = iban
        self.swiftCode = swiftCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case accountNumber = "account_number"
        case accountSortCode = "account_sort_code"
        case accountHolderName = "account_holder_name"
        case joint
        case bankName = "bank_name"
        case iban
        case swiftCode = "swift_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(accountNumber, forKey: .accountNumber)
        try container.encodeIfPresent(accountSortCode, forKey: .accountSortCode)
        try container.encodeIfPresent(accountHolderName, forKey: .accountHolderName)
        try container.encodeIfPresent(joint, forKey: .joint)
        try container.encodeIfPresent(bankName, forKey: .bankName)
        try container.encodeIfPresent(iban, forKey: .iban)
        try container.encodeIfPresent(swiftCode, forKey: .swiftCode)
    }
}

