//
// ClientCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations */
public struct ClientCreate: Codable, Hashable {

    public var email: String
    public var birthdate: Date?
    public var title: TitleEnum?
    public var firstName: String?
    public var lastName: String?
    public var middleName: String?
    public var gender: GenderEnum?
    public var maritalStatus: MaritalStatusEnum?
    public var language: String?
    public var employmentStatus: EmploymentStatusEnum?
    public var activated: Date?
    public var profile: [String: AnyCodable]?
    public var password: String?
    public var referralCode: String?
    public var utmSource: String?
    public var utmMedium: String?
    public var utmCampaign: String?
    public var utmTerm: String?
    public var utmContent: String?
    public var tosConsent: Bool?
    public var dataConsent: Bool?
    public var marketingConsent: Bool?
    public var extraData: [String: AnyCodable]?
    public var phoneNumber: String?

    public init(email: String, birthdate: Date? = nil, title: TitleEnum? = nil, firstName: String? = nil, lastName: String? = nil, middleName: String? = nil, gender: GenderEnum? = nil, maritalStatus: MaritalStatusEnum? = nil, language: String? = nil, employmentStatus: EmploymentStatusEnum? = nil, activated: Date? = nil, profile: [String: AnyCodable]? = nil, password: String? = nil, referralCode: String? = nil, utmSource: String? = nil, utmMedium: String? = nil, utmCampaign: String? = nil, utmTerm: String? = nil, utmContent: String? = nil, tosConsent: Bool? = nil, dataConsent: Bool? = nil, marketingConsent: Bool? = nil, extraData: [String: AnyCodable]? = nil, phoneNumber: String? = nil) {
        self.email = email
        self.birthdate = birthdate
        self.title = title
        self.firstName = firstName
        self.lastName = lastName
        self.middleName = middleName
        self.gender = gender
        self.maritalStatus = maritalStatus
        self.language = language
        self.employmentStatus = employmentStatus
        self.activated = activated
        self.profile = profile
        self.password = password
        self.referralCode = referralCode
        self.utmSource = utmSource
        self.utmMedium = utmMedium
        self.utmCampaign = utmCampaign
        self.utmTerm = utmTerm
        self.utmContent = utmContent
        self.tosConsent = tosConsent
        self.dataConsent = dataConsent
        self.marketingConsent = marketingConsent
        self.extraData = extraData
        self.phoneNumber = phoneNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case birthdate
        case title
        case firstName = "first_name"
        case lastName = "last_name"
        case middleName = "middle_name"
        case gender
        case maritalStatus = "marital_status"
        case language
        case employmentStatus = "employment_status"
        case activated
        case profile
        case password
        case referralCode = "referral_code"
        case utmSource = "utm_source"
        case utmMedium = "utm_medium"
        case utmCampaign = "utm_campaign"
        case utmTerm = "utm_term"
        case utmContent = "utm_content"
        case tosConsent = "tos_consent"
        case dataConsent = "data_consent"
        case marketingConsent = "marketing_consent"
        case extraData = "extra_data"
        case phoneNumber = "phone_number"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(birthdate, forKey: .birthdate)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(maritalStatus, forKey: .maritalStatus)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(employmentStatus, forKey: .employmentStatus)
        try container.encodeIfPresent(activated, forKey: .activated)
        try container.encodeIfPresent(profile, forKey: .profile)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(referralCode, forKey: .referralCode)
        try container.encodeIfPresent(utmSource, forKey: .utmSource)
        try container.encodeIfPresent(utmMedium, forKey: .utmMedium)
        try container.encodeIfPresent(utmCampaign, forKey: .utmCampaign)
        try container.encodeIfPresent(utmTerm, forKey: .utmTerm)
        try container.encodeIfPresent(utmContent, forKey: .utmContent)
        try container.encodeIfPresent(tosConsent, forKey: .tosConsent)
        try container.encodeIfPresent(dataConsent, forKey: .dataConsent)
        try container.encodeIfPresent(marketingConsent, forKey: .marketingConsent)
        try container.encodeIfPresent(extraData, forKey: .extraData)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
    }
}

