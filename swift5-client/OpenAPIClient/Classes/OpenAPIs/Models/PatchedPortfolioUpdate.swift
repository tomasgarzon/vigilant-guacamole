//
// PatchedPortfolioUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations */
public struct PatchedPortfolioUpdate: Codable, Hashable {

    public var uuid: UUID?
    public var name: String?
    public var portfolioType: String?
    public var riskLevel: Int?
    public var timeHorizon: Int?
    public var status: Status2efEnum?
    public var currency: String?
    public var created: Date?
    public var activated: Date?
    public var advisor: String?
    public var adviceEngine: String?
    public var extraData: [String: AnyCodable]?
    public var client: String?

    public init(uuid: UUID? = nil, name: String? = nil, portfolioType: String? = nil, riskLevel: Int? = nil, timeHorizon: Int? = nil, status: Status2efEnum? = nil, currency: String? = nil, created: Date? = nil, activated: Date? = nil, advisor: String? = nil, adviceEngine: String? = nil, extraData: [String: AnyCodable]? = nil, client: String? = nil) {
        self.uuid = uuid
        self.name = name
        self.portfolioType = portfolioType
        self.riskLevel = riskLevel
        self.timeHorizon = timeHorizon
        self.status = status
        self.currency = currency
        self.created = created
        self.activated = activated
        self.advisor = advisor
        self.adviceEngine = adviceEngine
        self.extraData = extraData
        self.client = client
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case name
        case portfolioType = "portfolio_type"
        case riskLevel = "risk_level"
        case timeHorizon = "time_horizon"
        case status
        case currency
        case created
        case activated
        case advisor
        case adviceEngine = "advice_engine"
        case extraData = "extra_data"
        case client
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(portfolioType, forKey: .portfolioType)
        try container.encodeIfPresent(riskLevel, forKey: .riskLevel)
        try container.encodeIfPresent(timeHorizon, forKey: .timeHorizon)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(activated, forKey: .activated)
        try container.encodeIfPresent(advisor, forKey: .advisor)
        try container.encodeIfPresent(adviceEngine, forKey: .adviceEngine)
        try container.encodeIfPresent(extraData, forKey: .extraData)
        try container.encodeIfPresent(client, forKey: .client)
    }
}

