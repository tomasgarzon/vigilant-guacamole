/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetCategory from './AssetCategory';
import AssetTypeEnum from './AssetTypeEnum';
import Status6f6Enum from './Status6f6Enum';

/**
 * The AssetList model module.
 * @module model/AssetList
 * @version 4.175.0
 */
class AssetList {
    /**
     * Constructs a new <code>AssetList</code>.
     * A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
     * @alias module:model/AssetList
     * @param uuid {String} 
     * @param name {String} 
     * @param isin {String} 
     * @param ticker {String} 
     * @param status {module:model/Status6f6Enum} 
     * @param market {String} 
     * @param currency {String} 
     * @param extraData {Object.<String, Object>} 
     * @param categories {Array.<module:model/AssetCategory>} 
     * @param assetType {module:model/AssetTypeEnum} 
     */
    constructor(uuid, name, isin, ticker, status, market, currency, extraData, categories, assetType) { 
        
        AssetList.initialize(this, uuid, name, isin, ticker, status, market, currency, extraData, categories, assetType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid, name, isin, ticker, status, market, currency, extraData, categories, assetType) { 
        obj['uuid'] = uuid;
        obj['name'] = name;
        obj['isin'] = isin;
        obj['ticker'] = ticker;
        obj['status'] = status;
        obj['market'] = market;
        obj['currency'] = currency;
        obj['extra_data'] = extraData;
        obj['categories'] = categories;
        obj['asset_type'] = assetType;
    }

    /**
     * Constructs a <code>AssetList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetList} obj Optional instance to populate.
     * @return {module:model/AssetList} The populated <code>AssetList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetList();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('isin')) {
                obj['isin'] = ApiClient.convertToType(data['isin'], 'String');
            }
            if (data.hasOwnProperty('ticker')) {
                obj['ticker'] = ApiClient.convertToType(data['ticker'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], Status6f6Enum);
            }
            if (data.hasOwnProperty('market')) {
                obj['market'] = ApiClient.convertToType(data['market'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('extra_data')) {
                obj['extra_data'] = ApiClient.convertToType(data['extra_data'], {'String': Object});
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [AssetCategory]);
            }
            if (data.hasOwnProperty('asset_type')) {
                obj['asset_type'] = ApiClient.convertToType(data['asset_type'], AssetTypeEnum);
            }
        }
        return obj;
    }


}

/**
 * @member {String} uuid
 */
AssetList.prototype['uuid'] = undefined;

/**
 * @member {String} name
 */
AssetList.prototype['name'] = undefined;

/**
 * @member {String} isin
 */
AssetList.prototype['isin'] = undefined;

/**
 * @member {String} ticker
 */
AssetList.prototype['ticker'] = undefined;

/**
 * @member {module:model/Status6f6Enum} status
 */
AssetList.prototype['status'] = undefined;

/**
 * @member {String} market
 */
AssetList.prototype['market'] = undefined;

/**
 * @member {String} currency
 */
AssetList.prototype['currency'] = undefined;

/**
 * @member {Object.<String, Object>} extra_data
 */
AssetList.prototype['extra_data'] = undefined;

/**
 * @member {Array.<module:model/AssetCategory>} categories
 */
AssetList.prototype['categories'] = undefined;

/**
 * @member {module:model/AssetTypeEnum} asset_type
 */
AssetList.prototype['asset_type'] = undefined;






export default AssetList;

