/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelEnum from './ChannelEnum';

/**
 * The AccessLog model module.
 * @module model/AccessLog
 * @version 4.175.0
 */
class AccessLog {
    /**
     * Constructs a new <code>AccessLog</code>.
     * A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
     * @alias module:model/AccessLog
     * @param uuid {String} 
     * @param created {Date} 
     * @param userAgent {String} 
     * @param ipAddress {String} 
     * @param browser {String} 
     * @param browserVersion {String} 
     * @param deviceBrand {String} 
     * @param deviceModel {String} 
     * @param os {String} 
     * @param osVersion {String} 
     * @param channel {module:model/ChannelEnum} 
     * @param country {String} 
     * @param city {String} 
     */
    constructor(uuid, created, userAgent, ipAddress, browser, browserVersion, deviceBrand, deviceModel, os, osVersion, channel, country, city) { 
        
        AccessLog.initialize(this, uuid, created, userAgent, ipAddress, browser, browserVersion, deviceBrand, deviceModel, os, osVersion, channel, country, city);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uuid, created, userAgent, ipAddress, browser, browserVersion, deviceBrand, deviceModel, os, osVersion, channel, country, city) { 
        obj['uuid'] = uuid;
        obj['created'] = created;
        obj['user_agent'] = userAgent;
        obj['ip_address'] = ipAddress;
        obj['browser'] = browser;
        obj['browser_version'] = browserVersion;
        obj['device_brand'] = deviceBrand;
        obj['device_model'] = deviceModel;
        obj['os'] = os;
        obj['os_version'] = osVersion;
        obj['channel'] = channel;
        obj['country'] = country;
        obj['city'] = city;
    }

    /**
     * Constructs a <code>AccessLog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessLog} obj Optional instance to populate.
     * @return {module:model/AccessLog} The populated <code>AccessLog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessLog();

            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('user_agent')) {
                obj['user_agent'] = ApiClient.convertToType(data['user_agent'], 'String');
            }
            if (data.hasOwnProperty('ip_address')) {
                obj['ip_address'] = ApiClient.convertToType(data['ip_address'], 'String');
            }
            if (data.hasOwnProperty('browser')) {
                obj['browser'] = ApiClient.convertToType(data['browser'], 'String');
            }
            if (data.hasOwnProperty('browser_version')) {
                obj['browser_version'] = ApiClient.convertToType(data['browser_version'], 'String');
            }
            if (data.hasOwnProperty('device_brand')) {
                obj['device_brand'] = ApiClient.convertToType(data['device_brand'], 'String');
            }
            if (data.hasOwnProperty('device_model')) {
                obj['device_model'] = ApiClient.convertToType(data['device_model'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('os_version')) {
                obj['os_version'] = ApiClient.convertToType(data['os_version'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], ChannelEnum);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} uuid
 */
AccessLog.prototype['uuid'] = undefined;

/**
 * @member {Date} created
 */
AccessLog.prototype['created'] = undefined;

/**
 * @member {String} user_agent
 */
AccessLog.prototype['user_agent'] = undefined;

/**
 * @member {String} ip_address
 */
AccessLog.prototype['ip_address'] = undefined;

/**
 * @member {String} browser
 */
AccessLog.prototype['browser'] = undefined;

/**
 * @member {String} browser_version
 */
AccessLog.prototype['browser_version'] = undefined;

/**
 * @member {String} device_brand
 */
AccessLog.prototype['device_brand'] = undefined;

/**
 * @member {String} device_model
 */
AccessLog.prototype['device_model'] = undefined;

/**
 * @member {String} os
 */
AccessLog.prototype['os'] = undefined;

/**
 * @member {String} os_version
 */
AccessLog.prototype['os_version'] = undefined;

/**
 * @member {module:model/ChannelEnum} channel
 */
AccessLog.prototype['channel'] = undefined;

/**
 * @member {String} country
 */
AccessLog.prototype['country'] = undefined;

/**
 * @member {String} city
 */
AccessLog.prototype['city'] = undefined;






export default AccessLog;

