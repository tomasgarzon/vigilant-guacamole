/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RelatedAssetSerializerWithAssetCategories from './RelatedAssetSerializerWithAssetCategories';

/**
 * The Position model module.
 * @module model/Position
 * @version 4.175.0
 */
class Position {
    /**
     * Constructs a new <code>Position</code>.
     * @alias module:model/Position
     * @param asset {module:model/RelatedAssetSerializerWithAssetCategories} 
     * @param shares {Number} 
     * @param price {Number} 
     * @param value {Number} 
     * @param weight {Number} 
     * @param fxRateAccount {Number} 
     * @param assetCurrencyValue {Number} 
     */
    constructor(asset, shares, price, value, weight, fxRateAccount, assetCurrencyValue) { 
        
        Position.initialize(this, asset, shares, price, value, weight, fxRateAccount, assetCurrencyValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, asset, shares, price, value, weight, fxRateAccount, assetCurrencyValue) { 
        obj['asset'] = asset;
        obj['shares'] = shares;
        obj['price'] = price;
        obj['value'] = value;
        obj['weight'] = weight;
        obj['fx_rate_account'] = fxRateAccount;
        obj['asset_currency_value'] = assetCurrencyValue;
    }

    /**
     * Constructs a <code>Position</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Position} obj Optional instance to populate.
     * @return {module:model/Position} The populated <code>Position</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Position();

            if (data.hasOwnProperty('asset')) {
                obj['asset'] = ApiClient.convertToType(data['asset'], RelatedAssetSerializerWithAssetCategories);
            }
            if (data.hasOwnProperty('shares')) {
                obj['shares'] = ApiClient.convertToType(data['shares'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
            if (data.hasOwnProperty('fx_rate_account')) {
                obj['fx_rate_account'] = ApiClient.convertToType(data['fx_rate_account'], 'Number');
            }
            if (data.hasOwnProperty('asset_currency_value')) {
                obj['asset_currency_value'] = ApiClient.convertToType(data['asset_currency_value'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/RelatedAssetSerializerWithAssetCategories} asset
 */
Position.prototype['asset'] = undefined;

/**
 * @member {Number} shares
 */
Position.prototype['shares'] = undefined;

/**
 * @member {Number} price
 */
Position.prototype['price'] = undefined;

/**
 * @member {Number} value
 */
Position.prototype['value'] = undefined;

/**
 * @member {Number} weight
 */
Position.prototype['weight'] = undefined;

/**
 * @member {Number} fx_rate_account
 */
Position.prototype['fx_rate_account'] = undefined;

/**
 * @member {Number} asset_currency_value
 */
Position.prototype['asset_currency_value'] = undefined;






export default Position;

