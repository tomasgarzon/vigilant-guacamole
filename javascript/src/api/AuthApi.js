/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImpersionationResponse from '../model/ImpersionationResponse';
import ImpersonationToken from '../model/ImpersonationToken';
import JSONWebToken from '../model/JSONWebToken';
import JWTRefreshResponse from '../model/JWTRefreshResponse';
import JWTResponse from '../model/JWTResponse';
import OnboardingResponse from '../model/OnboardingResponse';
import OnboardingToken from '../model/OnboardingToken';
import PasswordReset from '../model/PasswordReset';
import PasswordResetRequest from '../model/PasswordResetRequest';
import PasswordUpdate from '../model/PasswordUpdate';
import PatchedPasswordResetRequest from '../model/PatchedPasswordResetRequest';
import TokenRefresh from '../model/TokenRefresh';

/**
* Auth service.
* @module api/AuthApi
* @version 4.175.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authGetOnboardingToken operation.
     * @callback module:api/AuthApi~authGetOnboardingTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OnboardingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API View that receives a onboarding token and check its validity  Returns a JSON Web Token that can be used for authenticated requests.
     * @param {module:model/OnboardingToken} onboardingToken 
     * @param {module:api/AuthApi~authGetOnboardingTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OnboardingResponse}
     */
    authGetOnboardingToken(onboardingToken, callback) {
      let postBody = onboardingToken;
      // verify the required parameter 'onboardingToken' is set
      if (onboardingToken === undefined || onboardingToken === null) {
        throw new Error("Missing the required parameter 'onboardingToken' when calling authGetOnboardingToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = OnboardingResponse;
      return this.apiClient.callApi(
        '/api/v2/auth/onboarding_token/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authImpersonationToken operation.
     * @callback module:api/AuthApi~authImpersonationTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImpersionationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API View that receives an impersonation token and check its validity Returns a JSON Web Token that can be used for authenticated (and restricted) requests.
     * @param {module:model/ImpersonationToken} impersonationToken 
     * @param {module:api/AuthApi~authImpersonationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImpersionationResponse}
     */
    authImpersonationToken(impersonationToken, callback) {
      let postBody = impersonationToken;
      // verify the required parameter 'impersonationToken' is set
      if (impersonationToken === undefined || impersonationToken === null) {
        throw new Error("Missing the required parameter 'impersonationToken' when calling authImpersonationToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImpersionationResponse;
      return this.apiClient.callApi(
        '/api/v2/auth/impersonation_token/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authLogin operation.
     * @callback module:api/AuthApi~authLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWTResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API View that receives a POST with a user's username and password.  Returns a JSON Web Token that can be used for authenticated requests.
     * @param {module:model/JSONWebToken} jSONWebToken 
     * @param {module:api/AuthApi~authLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWTResponse}
     */
    authLogin(jSONWebToken, callback) {
      let postBody = jSONWebToken;
      // verify the required parameter 'jSONWebToken' is set
      if (jSONWebToken === undefined || jSONWebToken === null) {
        throw new Error("Missing the required parameter 'jSONWebToken' when calling authLogin");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = JWTResponse;
      return this.apiClient.callApi(
        '/api/v2/auth/login/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authResfreshJWTToken operation.
     * @callback module:api/AuthApi~authResfreshJWTTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWTRefreshResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API View that receives a POST with a refresh token as token.  Returns a refreshed JSON Web Token that can be used for authenticated requests.
     * @param {module:model/TokenRefresh} tokenRefresh 
     * @param {module:api/AuthApi~authResfreshJWTTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWTRefreshResponse}
     */
    authResfreshJWTToken(tokenRefresh, callback) {
      let postBody = tokenRefresh;
      // verify the required parameter 'tokenRefresh' is set
      if (tokenRefresh === undefined || tokenRefresh === null) {
        throw new Error("Missing the required parameter 'tokenRefresh' when calling authResfreshJWTToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = JWTRefreshResponse;
      return this.apiClient.callApi(
        '/api/v2/auth/token_renewal/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userChangePassword operation.
     * @callback module:api/AuthApi~userChangePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change password for an user
     * @param {module:model/PasswordUpdate} passwordUpdate 
     * @param {module:api/AuthApi~userChangePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordUpdate}
     */
    userChangePassword(passwordUpdate, callback) {
      let postBody = passwordUpdate;
      // verify the required parameter 'passwordUpdate' is set
      if (passwordUpdate === undefined || passwordUpdate === null) {
        throw new Error("Missing the required parameter 'passwordUpdate' when calling userChangePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PasswordUpdate;
      return this.apiClient.callApi(
        '/api/v2/auth/password/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userRequestPasswordReset operation.
     * @callback module:api/AuthApi~userRequestPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordResetRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request a password reset
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPasswordResetRequest} opts.patchedPasswordResetRequest 
     * @param {module:api/AuthApi~userRequestPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordResetRequest}
     */
    userRequestPasswordReset(opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedPasswordResetRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PasswordResetRequest;
      return this.apiClient.callApi(
        '/api/v2/auth/password/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userSetPassword operation.
     * @callback module:api/AuthApi~userSetPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordReset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a new password for an user
     * @param {module:model/PasswordReset} passwordReset 
     * @param {module:api/AuthApi~userSetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordReset}
     */
    userSetPassword(passwordReset, callback) {
      let postBody = passwordReset;
      // verify the required parameter 'passwordReset' is set
      if (passwordReset === undefined || passwordReset === null) {
        throw new Error("Missing the required parameter 'passwordReset' when calling userSetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PasswordReset;
      return this.apiClient.callApi(
        '/api/v2/auth/password/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
