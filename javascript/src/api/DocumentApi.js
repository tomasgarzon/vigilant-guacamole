/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocTypeEnum from '../model/DocTypeEnum';
import Document from '../model/Document';
import PaginatedDocumentList from '../model/PaginatedDocumentList';

/**
* Document service.
* @module api/DocumentApi
* @version 4.175.0
*/
export default class DocumentApi {

    /**
    * Constructs a new DocumentApi. 
    * @alias module:api/DocumentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clientDocumentCreate operation.
     * @callback module:api/DocumentApi~clientDocumentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a document for a client
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {String} name 
     * @param {module:model/DocTypeEnum} docType 
     * @param {String} path 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description 
     * @param {module:api/DocumentApi~clientDocumentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    clientDocumentCreate(clientUuid, uuid, name, docType, path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientDocumentCreate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientDocumentCreate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling clientDocumentCreate");
      }
      // verify the required parameter 'docType' is set
      if (docType === undefined || docType === null) {
        throw new Error("Missing the required parameter 'docType' when calling clientDocumentCreate");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling clientDocumentCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'uuid': uuid,
        'name': name,
        'doc_type': docType,
        'description': opts['description'],
        'path': path
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/documents/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientDocumentDelete operation.
     * @callback module:api/DocumentApi~clientDocumentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client document
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/DocumentApi~clientDocumentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientDocumentDelete(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientDocumentDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientDocumentDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/documents/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientDocumentList operation.
     * @callback module:api/DocumentApi~clientDocumentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Document for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.client 
     * @param {String} opts.description 
     * @param {Array.<module:model/String>} opts.docType 
     * @param {Object.<String, {String: Object}>} opts.extraData Additional document attributes for the specific portal
     * @param {Number} opts.limit Number of results to return per page.
     * @param {String} opts.name 
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/DocumentApi~clientDocumentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDocumentList}
     */
    clientDocumentList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientDocumentList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'client': opts['client'],
        'description': opts['description'],
        'doc_type': this.apiClient.buildCollectionParam(opts['docType'], 'multi'),
        'extra_data': opts['extraData'],
        'limit': opts['limit'],
        'name': opts['name'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDocumentList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/documents/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientDocumentRetrieve operation.
     * @callback module:api/DocumentApi~clientDocumentRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client document
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/DocumentApi~clientDocumentRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    clientDocumentRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientDocumentRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientDocumentRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/documents/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
