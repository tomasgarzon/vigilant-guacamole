/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BankAccountCreateUpdate from '../model/BankAccountCreateUpdate';
import BankAccountList from '../model/BankAccountList';
import PaginatedBankAccountListList from '../model/PaginatedBankAccountListList';
import PatchedBankAccountCreateUpdate from '../model/PatchedBankAccountCreateUpdate';

/**
* BankAccount service.
* @module api/BankAccountApi
* @version 4.175.0
*/
export default class BankAccountApi {

    /**
    * Constructs a new BankAccountApi. 
    * @alias module:api/BankAccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the clientBankAccountCreate operation.
     * @callback module:api/BankAccountApi~clientBankAccountCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bank account for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/BankAccountCreateUpdate} opts.bankAccountCreateUpdate 
     * @param {module:api/BankAccountApi~clientBankAccountCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountCreateUpdate}
     */
    clientBankAccountCreate(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['bankAccountCreateUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BankAccountCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountDelete operation.
     * @callback module:api/BankAccountApi~clientBankAccountDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client bank account
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/BankAccountApi~clientBankAccountDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientBankAccountDelete(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientBankAccountDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountPartialUpdate operation.
     * @callback module:api/BankAccountApi~clientBankAccountPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update a client bank account
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedBankAccountCreateUpdate} opts.patchedBankAccountCreateUpdate 
     * @param {module:api/BankAccountApi~clientBankAccountPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountCreateUpdate}
     */
    clientBankAccountPartialUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedBankAccountCreateUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientBankAccountPartialUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BankAccountCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountRetrieve operation.
     * @callback module:api/BankAccountApi~clientBankAccountRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client bank account
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/BankAccountApi~clientBankAccountRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountList}
     */
    clientBankAccountRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientBankAccountRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankAccountList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountUpdate operation.
     * @callback module:api/BankAccountApi~clientBankAccountUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client bank account
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/BankAccountCreateUpdate} opts.bankAccountCreateUpdate 
     * @param {module:api/BankAccountApi~clientBankAccountUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountCreateUpdate}
     */
    clientBankAccountUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['bankAccountCreateUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientBankAccountUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BankAccountCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountsList operation.
     * @callback module:api/BankAccountApi~clientBankAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedBankAccountListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Bank Account for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/BankAccountApi~clientBankAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedBankAccountListList}
     */
    clientBankAccountsList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountsList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedBankAccountListList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
