/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AUMEvoluation from '../model/AUMEvoluation';
import AUMPortfolioRisk from '../model/AUMPortfolioRisk';
import AddressCreate from '../model/AddressCreate';
import AddressList from '../model/AddressList';
import AddressUpdate from '../model/AddressUpdate';
import AllocationByAsset from '../model/AllocationByAsset';
import ApplicationClientUpdate from '../model/ApplicationClientUpdate';
import Assessment from '../model/Assessment';
import AssetConcentrationRisk from '../model/AssetConcentrationRisk';
import BankAccountCreateUpdate from '../model/BankAccountCreateUpdate';
import BankAccountList from '../model/BankAccountList';
import ClientCreate from '../model/ClientCreate';
import ClientDetail from '../model/ClientDetail';
import ClientPerformance from '../model/ClientPerformance';
import ClientRanking from '../model/ClientRanking';
import DocTypeEnum from '../model/DocTypeEnum';
import Document from '../model/Document';
import DocumentTypeEnum from '../model/DocumentTypeEnum';
import FeedActivityList from '../model/FeedActivityList';
import InvestorFee from '../model/InvestorFee';
import InvoiceList from '../model/InvoiceList';
import NationalityCreate from '../model/NationalityCreate';
import NationalityList from '../model/NationalityList';
import NationalityUpdate from '../model/NationalityUpdate';
import OneOfResultEnumBlankEnum from '../model/OneOfResultEnumBlankEnum';
import PaginatedAddressListList from '../model/PaginatedAddressListList';
import PaginatedAssessmentList from '../model/PaginatedAssessmentList';
import PaginatedBankAccountListList from '../model/PaginatedBankAccountListList';
import PaginatedClientDetailList from '../model/PaginatedClientDetailList';
import PaginatedDocumentList from '../model/PaginatedDocumentList';
import PaginatedFeedActivityListList from '../model/PaginatedFeedActivityListList';
import PaginatedInvestorFeeList from '../model/PaginatedInvestorFeeList';
import PaginatedInvoiceListList from '../model/PaginatedInvoiceListList';
import PaginatedNationalityListList from '../model/PaginatedNationalityListList';
import PaginatedStatementList from '../model/PaginatedStatementList';
import PaginatedTaxInformationListList from '../model/PaginatedTaxInformationListList';
import PaginatedTaxReportList from '../model/PaginatedTaxReportList';
import PaginatedVerificationDocumentList from '../model/PaginatedVerificationDocumentList';
import PaginatedVerificationListList from '../model/PaginatedVerificationListList';
import PaginatedWatchlistList from '../model/PaginatedWatchlistList';
import PatchedAddressUpdate from '../model/PatchedAddressUpdate';
import PatchedApplicationClientUpdate from '../model/PatchedApplicationClientUpdate';
import PatchedAssessment from '../model/PatchedAssessment';
import PatchedBankAccountCreateUpdate from '../model/PatchedBankAccountCreateUpdate';
import PatchedInvestorFee from '../model/PatchedInvestorFee';
import PatchedNationalityUpdate from '../model/PatchedNationalityUpdate';
import PatchedTaxInformationCreateUpdate from '../model/PatchedTaxInformationCreateUpdate';
import RelationshipManager from '../model/RelationshipManager';
import Statement from '../model/Statement';
import StatusBd7Enum from '../model/StatusBd7Enum';
import TaxInformationCreateUpdate from '../model/TaxInformationCreateUpdate';
import TaxInformationList from '../model/TaxInformationList';
import TaxReport from '../model/TaxReport';
import VerificationCreate from '../model/VerificationCreate';
import VerificationDocument from '../model/VerificationDocument';
import VerificationDocumentCreate from '../model/VerificationDocumentCreate';
import VerificationList from '../model/VerificationList';
import VerificationWithType from '../model/VerificationWithType';
import VerifyTypeEnum from '../model/VerifyTypeEnum';
import Watchlist from '../model/Watchlist';

/**
* Application service.
* @module api/ApplicationApi
* @version 4.175.0
*/
export default class ApplicationApi {

    /**
    * Constructs a new ApplicationApi. 
    * @alias module:api/ApplicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2ClientsActivitiesList operation.
     * @callback module:api/ApplicationApi~apiV2ClientsActivitiesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFeedActivityListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Array.<module:model/String>} opts.target 
     * @param {module:api/ApplicationApi~apiV2ClientsActivitiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFeedActivityListList}
     */
    apiV2ClientsActivitiesList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsActivitiesList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'target': this.apiClient.buildCollectionParam(opts['target'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedFeedActivityListList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/activities/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsActivitiesRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ClientsActivitiesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedActivityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~apiV2ClientsActivitiesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedActivityList}
     */
    apiV2ClientsActivitiesRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsActivitiesRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsActivitiesRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeedActivityList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/activities/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsAdviceEnginesList operation.
     * @callback module:api/ApplicationApi~apiV2ClientsAdviceEnginesListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {module:api/ApplicationApi~apiV2ClientsAdviceEnginesListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ClientsAdviceEnginesList(clientUuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsAdviceEnginesList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/advice-engines/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsAdviceEnginesRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ClientsAdviceEnginesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~apiV2ClientsAdviceEnginesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ClientsAdviceEnginesRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsAdviceEnginesRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsAdviceEnginesRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/advice-engines/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsBillingFeesCreate operation.
     * @callback module:api/ApplicationApi~apiV2ClientsBillingFeesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorFee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {module:model/InvestorFee} investorFee 
     * @param {module:api/ApplicationApi~apiV2ClientsBillingFeesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorFee}
     */
    apiV2ClientsBillingFeesCreate(clientUuid, investorFee, callback) {
      let postBody = investorFee;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsBillingFeesCreate");
      }
      // verify the required parameter 'investorFee' is set
      if (investorFee === undefined || investorFee === null) {
        throw new Error("Missing the required parameter 'investorFee' when calling apiV2ClientsBillingFeesCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InvestorFee;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/billing/fees/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsBillingFeesDestroy operation.
     * @callback module:api/ApplicationApi~apiV2ClientsBillingFeesDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~apiV2ClientsBillingFeesDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ClientsBillingFeesDestroy(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsBillingFeesDestroy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsBillingFeesDestroy");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/billing/fees/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsBillingFeesList operation.
     * @callback module:api/ApplicationApi~apiV2ClientsBillingFeesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedInvestorFeeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~apiV2ClientsBillingFeesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedInvestorFeeList}
     */
    apiV2ClientsBillingFeesList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsBillingFeesList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedInvestorFeeList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/billing/fees/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsBillingFeesPartialUpdate operation.
     * @callback module:api/ApplicationApi~apiV2ClientsBillingFeesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorFee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedInvestorFee} opts.patchedInvestorFee 
     * @param {module:api/ApplicationApi~apiV2ClientsBillingFeesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorFee}
     */
    apiV2ClientsBillingFeesPartialUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedInvestorFee'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsBillingFeesPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsBillingFeesPartialUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InvestorFee;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/billing/fees/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsBillingFeesRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ClientsBillingFeesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorFee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~apiV2ClientsBillingFeesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorFee}
     */
    apiV2ClientsBillingFeesRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsBillingFeesRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsBillingFeesRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvestorFee;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/billing/fees/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsBillingFeesUpdate operation.
     * @callback module:api/ApplicationApi~apiV2ClientsBillingFeesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorFee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:model/InvestorFee} investorFee 
     * @param {module:api/ApplicationApi~apiV2ClientsBillingFeesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorFee}
     */
    apiV2ClientsBillingFeesUpdate(clientUuid, uuid, investorFee, callback) {
      let postBody = investorFee;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsBillingFeesUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsBillingFeesUpdate");
      }
      // verify the required parameter 'investorFee' is set
      if (investorFee === undefined || investorFee === null) {
        throw new Error("Missing the required parameter 'investorFee' when calling apiV2ClientsBillingFeesUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InvestorFee;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/billing/fees/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsBillingInvoicesList operation.
     * @callback module:api/ApplicationApi~apiV2ClientsBillingInvoicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedInvoiceListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~apiV2ClientsBillingInvoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedInvoiceListList}
     */
    apiV2ClientsBillingInvoicesList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsBillingInvoicesList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = PaginatedInvoiceListList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/billing/invoices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsBillingInvoicesRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ClientsBillingInvoicesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {module:api/ApplicationApi~apiV2ClientsBillingInvoicesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceList}
     */
    apiV2ClientsBillingInvoicesRetrieve(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsBillingInvoicesRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsBillingInvoicesRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = InvoiceList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/billing/invoices/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsReportStatementsList operation.
     * @callback module:api/ApplicationApi~apiV2ClientsReportStatementsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedStatementList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~apiV2ClientsReportStatementsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedStatementList}
     */
    apiV2ClientsReportStatementsList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsReportStatementsList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = PaginatedStatementList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/report/statements/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsReportStatementsRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ClientsReportStatementsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {module:api/ApplicationApi~apiV2ClientsReportStatementsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statement}
     */
    apiV2ClientsReportStatementsRetrieve(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsReportStatementsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsReportStatementsRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = Statement;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/report/statements/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsReportTaxReportsList operation.
     * @callback module:api/ApplicationApi~apiV2ClientsReportTaxReportsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedTaxReportList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~apiV2ClientsReportTaxReportsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedTaxReportList}
     */
    apiV2ClientsReportTaxReportsList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsReportTaxReportsList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = PaginatedTaxReportList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/report/tax-reports/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsReportTaxReportsRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ClientsReportTaxReportsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {module:api/ApplicationApi~apiV2ClientsReportTaxReportsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxReport}
     */
    apiV2ClientsReportTaxReportsRetrieve(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsReportTaxReportsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsReportTaxReportsRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = TaxReport;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/report/tax-reports/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsWatchlistsCreate operation.
     * @callback module:api/ApplicationApi~apiV2ClientsWatchlistsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Watchlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     * @param {String} clientUuid 
     * @param {module:model/Watchlist} watchlist 
     * @param {module:api/ApplicationApi~apiV2ClientsWatchlistsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Watchlist}
     */
    apiV2ClientsWatchlistsCreate(clientUuid, watchlist, callback) {
      let postBody = watchlist;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsWatchlistsCreate");
      }
      // verify the required parameter 'watchlist' is set
      if (watchlist === undefined || watchlist === null) {
        throw new Error("Missing the required parameter 'watchlist' when calling apiV2ClientsWatchlistsCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Watchlist;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/watchlists/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsWatchlistsDestroy operation.
     * @callback module:api/ApplicationApi~apiV2ClientsWatchlistsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~apiV2ClientsWatchlistsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ClientsWatchlistsDestroy(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsWatchlistsDestroy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsWatchlistsDestroy");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/watchlists/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsWatchlistsList operation.
     * @callback module:api/ApplicationApi~apiV2ClientsWatchlistsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWatchlistList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~apiV2ClientsWatchlistsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWatchlistList}
     */
    apiV2ClientsWatchlistsList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsWatchlistsList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedWatchlistList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/watchlists/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsWatchlistsRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ClientsWatchlistsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Watchlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~apiV2ClientsWatchlistsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Watchlist}
     */
    apiV2ClientsWatchlistsRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsWatchlistsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsWatchlistsRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Watchlist;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/watchlists/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsWatchlistsUpdate operation.
     * @callback module:api/ApplicationApi~apiV2ClientsWatchlistsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Watchlist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:model/Watchlist} watchlist 
     * @param {module:api/ApplicationApi~apiV2ClientsWatchlistsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Watchlist}
     */
    apiV2ClientsWatchlistsUpdate(clientUuid, uuid, watchlist, callback) {
      let postBody = watchlist;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ClientsWatchlistsUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsWatchlistsUpdate");
      }
      // verify the required parameter 'watchlist' is set
      if (watchlist === undefined || watchlist === null) {
        throw new Error("Missing the required parameter 'watchlist' when calling apiV2ClientsWatchlistsUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Watchlist;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/watchlists/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationByAsset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationByAsset}
     */
    apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllocationByAsset;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/allocations-by-asset/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetConcentrationRisk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetConcentrationRisk}
     */
    apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetConcentrationRisk;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/asset-concentration-risk/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AUMEvoluation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AUMEvoluation}
     */
    apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AUMEvoluation;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-evolution/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AUMPortfolioRisk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AUMPortfolioRisk}
     */
    apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AUMPortfolioRisk;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-portfolio-risk/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsAumRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAumRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsAumRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipManager}
     */
    apiV2RelationshipManagerAnalyticsAumRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsAumRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipManager;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsClientByRiskRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsClientByRiskRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsClientByRiskRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipManager}
     */
    apiV2RelationshipManagerAnalyticsClientByRiskRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsClientByRiskRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipManager;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-risk/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsClientByStatusRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsClientByStatusRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsClientByStatusRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipManager}
     */
    apiV2RelationshipManagerAnalyticsClientByStatusRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsClientByStatusRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipManager;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-status/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsClientRankingRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsClientRankingRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientRanking} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsClientRankingRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientRanking}
     */
    apiV2RelationshipManagerAnalyticsClientRankingRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsClientRankingRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientRanking;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-ranking/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipManager}
     */
    apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipManager;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/inflows-outflows/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipManager}
     */
    apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipManager;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/portfolio-risk-performance/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} relationshipManagerUuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipManager}
     */
    apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(relationshipManagerUuid, callback) {
      let postBody = null;
      // verify the required parameter 'relationshipManagerUuid' is set
      if (relationshipManagerUuid === undefined || relationshipManagerUuid === null) {
        throw new Error("Missing the required parameter 'relationshipManagerUuid' when calling apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve");
      }

      let pathParams = {
        'relationship_manager_uuid': relationshipManagerUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipManager;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/total-active-clients/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerMeRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerMeRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerMeRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipManager}
     */
    apiV2RelationshipManagerMeRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipManager;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/me/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RelationshipManagerRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2RelationshipManagerRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelationshipManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~apiV2RelationshipManagerRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelationshipManager}
     */
    apiV2RelationshipManagerRetrieve(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2RelationshipManagerRetrieve");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RelationshipManager;
      return this.apiClient.callApi(
        '/api/v2/relationship-manager/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ReportStatementsList operation.
     * @callback module:api/ApplicationApi~apiV2ReportStatementsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedStatementList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~apiV2ReportStatementsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedStatementList}
     */
    apiV2ReportStatementsList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ReportStatementsList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = PaginatedStatementList;
      return this.apiClient.callApi(
        '/api/v2/report/statements/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ReportStatementsRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ReportStatementsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Statement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {module:api/ApplicationApi~apiV2ReportStatementsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Statement}
     */
    apiV2ReportStatementsRetrieve(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ReportStatementsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ReportStatementsRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = Statement;
      return this.apiClient.callApi(
        '/api/v2/report/statements/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ReportTaxReportList operation.
     * @callback module:api/ApplicationApi~apiV2ReportTaxReportListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedTaxReportList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~apiV2ReportTaxReportListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedTaxReportList}
     */
    apiV2ReportTaxReportList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ReportTaxReportList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'format': opts['format'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = PaginatedTaxReportList;
      return this.apiClient.callApi(
        '/api/v2/report/tax-report/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ReportTaxReportRetrieve operation.
     * @callback module:api/ApplicationApi~apiV2ReportTaxReportRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {module:api/ApplicationApi~apiV2ReportTaxReportRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxReport}
     */
    apiV2ReportTaxReportRetrieve(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling apiV2ReportTaxReportRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ReportTaxReportRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = TaxReport;
      return this.apiClient.callApi(
        '/api/v2/report/tax-report/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientAddressCreate operation.
     * @callback module:api/ApplicationApi~clientAddressCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an address for a client
     * @param {String} clientUuid 
     * @param {module:model/AddressCreate} addressCreate 
     * @param {module:api/ApplicationApi~clientAddressCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressCreate}
     */
    clientAddressCreate(clientUuid, addressCreate, callback) {
      let postBody = addressCreate;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientAddressCreate");
      }
      // verify the required parameter 'addressCreate' is set
      if (addressCreate === undefined || addressCreate === null) {
        throw new Error("Missing the required parameter 'addressCreate' when calling clientAddressCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddressCreate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/addresses/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientAddressDelete operation.
     * @callback module:api/ApplicationApi~clientAddressDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client address
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientAddressDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientAddressDelete(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientAddressDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientAddressDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/addresses/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientAddressPartialUpdate operation.
     * @callback module:api/ApplicationApi~clientAddressPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update a client address
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedAddressUpdate} opts.patchedAddressUpdate 
     * @param {module:api/ApplicationApi~clientAddressPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressUpdate}
     */
    clientAddressPartialUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedAddressUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientAddressPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientAddressPartialUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddressUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/addresses/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientAddressRetrieve operation.
     * @callback module:api/ApplicationApi~clientAddressRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client address
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientAddressRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressList}
     */
    clientAddressRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientAddressRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientAddressRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddressList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/addresses/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientAddressUpdate operation.
     * @callback module:api/ApplicationApi~clientAddressUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client address
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:model/AddressUpdate} addressUpdate 
     * @param {module:api/ApplicationApi~clientAddressUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressUpdate}
     */
    clientAddressUpdate(clientUuid, uuid, addressUpdate, callback) {
      let postBody = addressUpdate;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientAddressUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientAddressUpdate");
      }
      // verify the required parameter 'addressUpdate' is set
      if (addressUpdate === undefined || addressUpdate === null) {
        throw new Error("Missing the required parameter 'addressUpdate' when calling clientAddressUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddressUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/addresses/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientAddressesList operation.
     * @callback module:api/ApplicationApi~clientAddressesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAddressListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List address for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~clientAddressesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAddressListList}
     */
    clientAddressesList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientAddressesList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAddressListList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/addresses/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountCreate operation.
     * @callback module:api/ApplicationApi~clientBankAccountCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a bank account for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/BankAccountCreateUpdate} opts.bankAccountCreateUpdate 
     * @param {module:api/ApplicationApi~clientBankAccountCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountCreateUpdate}
     */
    clientBankAccountCreate(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['bankAccountCreateUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BankAccountCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountDelete operation.
     * @callback module:api/ApplicationApi~clientBankAccountDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client bank account
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientBankAccountDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientBankAccountDelete(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientBankAccountDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountPartialUpdate operation.
     * @callback module:api/ApplicationApi~clientBankAccountPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update a client bank account
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedBankAccountCreateUpdate} opts.patchedBankAccountCreateUpdate 
     * @param {module:api/ApplicationApi~clientBankAccountPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountCreateUpdate}
     */
    clientBankAccountPartialUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedBankAccountCreateUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientBankAccountPartialUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BankAccountCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountRetrieve operation.
     * @callback module:api/ApplicationApi~clientBankAccountRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client bank account
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientBankAccountRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountList}
     */
    clientBankAccountRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientBankAccountRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BankAccountList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountUpdate operation.
     * @callback module:api/ApplicationApi~clientBankAccountUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BankAccountCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client bank account
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/BankAccountCreateUpdate} opts.bankAccountCreateUpdate 
     * @param {module:api/ApplicationApi~clientBankAccountUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BankAccountCreateUpdate}
     */
    clientBankAccountUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['bankAccountCreateUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientBankAccountUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = BankAccountCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientBankAccountsList operation.
     * @callback module:api/ApplicationApi~clientBankAccountsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedBankAccountListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Bank Account for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~clientBankAccountsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedBankAccountListList}
     */
    clientBankAccountsList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientBankAccountsList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedBankAccountListList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/bank-accounts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientCompleteOnboarding operation.
     * @callback module:api/ApplicationApi~clientCompleteOnboardingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete onboarding for a client
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:model/ClientDetail} clientDetail 
     * @param {module:api/ApplicationApi~clientCompleteOnboardingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientDetail}
     */
    clientCompleteOnboarding(clientUuid, uuid, clientDetail, callback) {
      let postBody = clientDetail;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientCompleteOnboarding");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientCompleteOnboarding");
      }
      // verify the required parameter 'clientDetail' is set
      if (clientDetail === undefined || clientDetail === null) {
        throw new Error("Missing the required parameter 'clientDetail' when calling clientCompleteOnboarding");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ClientDetail;
      return this.apiClient.callApi(
        '/api/v2/clients/{uuid}/onboarding/complete/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientCreate operation.
     * @callback module:api/ApplicationApi~clientCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a client
     * @param {module:model/ClientCreate} clientCreate 
     * @param {module:api/ApplicationApi~clientCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientCreate}
     */
    clientCreate(clientCreate, callback) {
      let postBody = clientCreate;
      // verify the required parameter 'clientCreate' is set
      if (clientCreate === undefined || clientCreate === null) {
        throw new Error("Missing the required parameter 'clientCreate' when calling clientCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ClientCreate;
      return this.apiClient.callApi(
        '/api/v2/clients/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientDocumentCreate operation.
     * @callback module:api/ApplicationApi~clientDocumentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a document for a client
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {String} name 
     * @param {module:model/DocTypeEnum} docType 
     * @param {String} path 
     * @param {Object} opts Optional parameters
     * @param {String} opts.description 
     * @param {module:api/ApplicationApi~clientDocumentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    clientDocumentCreate(clientUuid, uuid, name, docType, path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientDocumentCreate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientDocumentCreate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling clientDocumentCreate");
      }
      // verify the required parameter 'docType' is set
      if (docType === undefined || docType === null) {
        throw new Error("Missing the required parameter 'docType' when calling clientDocumentCreate");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling clientDocumentCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'uuid': uuid,
        'name': name,
        'doc_type': docType,
        'description': opts['description'],
        'path': path
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/documents/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientDocumentDelete operation.
     * @callback module:api/ApplicationApi~clientDocumentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client document
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientDocumentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientDocumentDelete(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientDocumentDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientDocumentDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/documents/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientDocumentList operation.
     * @callback module:api/ApplicationApi~clientDocumentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Document for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.client 
     * @param {String} opts.description 
     * @param {Array.<module:model/String>} opts.docType 
     * @param {Object.<String, {String: Object}>} opts.extraData Additional document attributes for the specific portal
     * @param {Number} opts.limit Number of results to return per page.
     * @param {String} opts.name 
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~clientDocumentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDocumentList}
     */
    clientDocumentList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientDocumentList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'client': opts['client'],
        'description': opts['description'],
        'doc_type': this.apiClient.buildCollectionParam(opts['docType'], 'multi'),
        'extra_data': opts['extraData'],
        'limit': opts['limit'],
        'name': opts['name'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDocumentList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/documents/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientDocumentRetrieve operation.
     * @callback module:api/ApplicationApi~clientDocumentRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client document
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientDocumentRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    clientDocumentRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientDocumentRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientDocumentRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/documents/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientList operation.
     * @callback module:api/ApplicationApi~clientListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedClientDetailList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List client for a Relationship manager
     * @param {Object} opts Optional parameters
     * @param {String} opts.externalCustodianId 
     * @param {Object.<String, {String: Object}>} opts.extraData Additional client attributes for the specific portal
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Array.<module:model/String>} opts.ordering Ordering
     * @param {String} opts.search A search term.
     * @param {module:model/String} opts.status 
     * @param {module:api/ApplicationApi~clientListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedClientDetailList}
     */
    clientList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'external_custodian_id': opts['externalCustodianId'],
        'extra_data': opts['extraData'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'ordering': this.apiClient.buildCollectionParam(opts['ordering'], 'csv'),
        'search': opts['search'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedClientDetailList;
      return this.apiClient.callApi(
        '/api/v2/clients/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientNationalityCreate operation.
     * @callback module:api/ApplicationApi~clientNationalityCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NationalityCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create nationality for a client
     * @param {String} clientUuid 
     * @param {module:model/NationalityCreate} nationalityCreate 
     * @param {module:api/ApplicationApi~clientNationalityCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NationalityCreate}
     */
    clientNationalityCreate(clientUuid, nationalityCreate, callback) {
      let postBody = nationalityCreate;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientNationalityCreate");
      }
      // verify the required parameter 'nationalityCreate' is set
      if (nationalityCreate === undefined || nationalityCreate === null) {
        throw new Error("Missing the required parameter 'nationalityCreate' when calling clientNationalityCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NationalityCreate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/nationalities/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientNationlitiesList operation.
     * @callback module:api/ApplicationApi~clientNationlitiesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedNationalityListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List nationlities for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~clientNationlitiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedNationalityListList}
     */
    clientNationlitiesList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientNationlitiesList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedNationalityListList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/nationalities/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientNationlityDelete operation.
     * @callback module:api/ApplicationApi~clientNationlityDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client nationality
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientNationlityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientNationlityDelete(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientNationlityDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientNationlityDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/nationalities/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientNationlityPartialUpdate operation.
     * @callback module:api/ApplicationApi~clientNationlityPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NationalityUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update a client nationality
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedNationalityUpdate} opts.patchedNationalityUpdate 
     * @param {module:api/ApplicationApi~clientNationlityPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NationalityUpdate}
     */
    clientNationlityPartialUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedNationalityUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientNationlityPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientNationlityPartialUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NationalityUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/nationalities/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientNationlityRetrieve operation.
     * @callback module:api/ApplicationApi~clientNationlityRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NationalityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client nationality
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientNationlityRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NationalityList}
     */
    clientNationlityRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientNationlityRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientNationlityRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NationalityList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/nationalities/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientNationlityUpdate operation.
     * @callback module:api/ApplicationApi~clientNationlityUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NationalityUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client nationality
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:model/NationalityUpdate} nationalityUpdate 
     * @param {module:api/ApplicationApi~clientNationlityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NationalityUpdate}
     */
    clientNationlityUpdate(clientUuid, uuid, nationalityUpdate, callback) {
      let postBody = nationalityUpdate;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientNationlityUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientNationlityUpdate");
      }
      // verify the required parameter 'nationalityUpdate' is set
      if (nationalityUpdate === undefined || nationalityUpdate === null) {
        throw new Error("Missing the required parameter 'nationalityUpdate' when calling clientNationlityUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = NationalityUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/nationalities/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientPartialUpdate operation.
     * @callback module:api/ApplicationApi~clientPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationClientUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update a client
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedApplicationClientUpdate} opts.patchedApplicationClientUpdate 
     * @param {module:api/ApplicationApi~clientPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationClientUpdate}
     */
    clientPartialUpdate(uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedApplicationClientUpdate'];
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientPartialUpdate");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationClientUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientRetrieve operation.
     * @callback module:api/ApplicationApi~clientRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientDetail}
     */
    clientRetrieve(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientRetrieve");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientDetail;
      return this.apiClient.callApi(
        '/api/v2/clients/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientRiskAssessmentCreate operation.
     * @callback module:api/ApplicationApi~clientRiskAssessmentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a risk assessment for a client
     * @param {String} clientUuid 
     * @param {module:model/Assessment} assessment 
     * @param {module:api/ApplicationApi~clientRiskAssessmentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assessment}
     */
    clientRiskAssessmentCreate(clientUuid, assessment, callback) {
      let postBody = assessment;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentCreate");
      }
      // verify the required parameter 'assessment' is set
      if (assessment === undefined || assessment === null) {
        throw new Error("Missing the required parameter 'assessment' when calling clientRiskAssessmentCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Assessment;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/risk-assessments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientRiskAssessmentDelete operation.
     * @callback module:api/ApplicationApi~clientRiskAssessmentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client risk assessment
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientRiskAssessmentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientRiskAssessmentDelete(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientRiskAssessmentDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientRiskAssessmentList operation.
     * @callback module:api/ApplicationApi~clientRiskAssessmentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAssessmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Risk Assessment for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Array.<module:model/String>} opts.status 
     * @param {module:api/ApplicationApi~clientRiskAssessmentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAssessmentList}
     */
    clientRiskAssessmentList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAssessmentList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/risk-assessments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientRiskAssessmentPartialUpdate operation.
     * @callback module:api/ApplicationApi~clientRiskAssessmentPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update a client risk assessment
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedAssessment} opts.patchedAssessment 
     * @param {module:api/ApplicationApi~clientRiskAssessmentPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assessment}
     */
    clientRiskAssessmentPartialUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedAssessment'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientRiskAssessmentPartialUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Assessment;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientRiskAssessmentRetrieve operation.
     * @callback module:api/ApplicationApi~clientRiskAssessmentRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client risk assessment
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientRiskAssessmentRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assessment}
     */
    clientRiskAssessmentRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientRiskAssessmentRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientRiskAssessmentRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Assessment;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientTWRRPerformance operation.
     * @callback module:api/ApplicationApi~clientTWRRPerformanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientPerformance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate TWRR Performance for client
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientTWRRPerformanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientPerformance}
     */
    clientTWRRPerformance(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientTWRRPerformance");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientTWRRPerformance");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientPerformance;
      return this.apiClient.callApi(
        '/api/v2/clients/{uuid}/performance/twrr/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientTaxInformationCreate operation.
     * @callback module:api/ApplicationApi~clientTaxInformationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxInformationCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a tax inforation for a client
     * @param {String} clientUuid 
     * @param {module:model/TaxInformationCreateUpdate} taxInformationCreateUpdate 
     * @param {module:api/ApplicationApi~clientTaxInformationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxInformationCreateUpdate}
     */
    clientTaxInformationCreate(clientUuid, taxInformationCreateUpdate, callback) {
      let postBody = taxInformationCreateUpdate;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientTaxInformationCreate");
      }
      // verify the required parameter 'taxInformationCreateUpdate' is set
      if (taxInformationCreateUpdate === undefined || taxInformationCreateUpdate === null) {
        throw new Error("Missing the required parameter 'taxInformationCreateUpdate' when calling clientTaxInformationCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TaxInformationCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/tax-informations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientTaxInformationDelete operation.
     * @callback module:api/ApplicationApi~clientTaxInformationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client tax inforation
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientTaxInformationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientTaxInformationDelete(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientTaxInformationDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientTaxInformationDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/tax-informations/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientTaxInformationList operation.
     * @callback module:api/ApplicationApi~clientTaxInformationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedTaxInformationListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List tax information for a client
     * @param {String} clientUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~clientTaxInformationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedTaxInformationListList}
     */
    clientTaxInformationList(clientUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientTaxInformationList");
      }

      let pathParams = {
        'client_uuid': clientUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedTaxInformationListList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/tax-informations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientTaxInformationPartialUpdate operation.
     * @callback module:api/ApplicationApi~clientTaxInformationPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxInformationCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update a client tax inforation
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedTaxInformationCreateUpdate} opts.patchedTaxInformationCreateUpdate 
     * @param {module:api/ApplicationApi~clientTaxInformationPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxInformationCreateUpdate}
     */
    clientTaxInformationPartialUpdate(clientUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedTaxInformationCreateUpdate'];
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientTaxInformationPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientTaxInformationPartialUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TaxInformationCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/tax-informations/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientTaxInformationRetrieve operation.
     * @callback module:api/ApplicationApi~clientTaxInformationRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxInformationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client tax inforation
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:api/ApplicationApi~clientTaxInformationRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxInformationList}
     */
    clientTaxInformationRetrieve(clientUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientTaxInformationRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientTaxInformationRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaxInformationList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/tax-informations/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientTaxInformationUpdate operation.
     * @callback module:api/ApplicationApi~clientTaxInformationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaxInformationCreateUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client tax inforation
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {module:model/TaxInformationCreateUpdate} taxInformationCreateUpdate 
     * @param {module:api/ApplicationApi~clientTaxInformationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaxInformationCreateUpdate}
     */
    clientTaxInformationUpdate(clientUuid, uuid, taxInformationCreateUpdate, callback) {
      let postBody = taxInformationCreateUpdate;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientTaxInformationUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientTaxInformationUpdate");
      }
      // verify the required parameter 'taxInformationCreateUpdate' is set
      if (taxInformationCreateUpdate === undefined || taxInformationCreateUpdate === null) {
        throw new Error("Missing the required parameter 'taxInformationCreateUpdate' when calling clientTaxInformationUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TaxInformationCreateUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/tax-informations/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientUpdate operation.
     * @callback module:api/ApplicationApi~clientUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationClientUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client
     * @param {String} uuid 
     * @param {module:model/ApplicationClientUpdate} applicationClientUpdate 
     * @param {module:api/ApplicationApi~clientUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationClientUpdate}
     */
    clientUpdate(uuid, applicationClientUpdate, callback) {
      let postBody = applicationClientUpdate;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientUpdate");
      }
      // verify the required parameter 'applicationClientUpdate' is set
      if (applicationClientUpdate === undefined || applicationClientUpdate === null) {
        throw new Error("Missing the required parameter 'applicationClientUpdate' when calling clientUpdate");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApplicationClientUpdate;
      return this.apiClient.callApi(
        '/api/v2/clients/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationCreate operation.
     * @callback module:api/ApplicationApi~clientVerificationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a verification for a client
     * @param {String} clientUuid 
     * @param {String} verifyTypeCode 
     * @param {module:model/VerificationCreate} verificationCreate 
     * @param {module:api/ApplicationApi~clientVerificationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationCreate}
     */
    clientVerificationCreate(clientUuid, verifyTypeCode, verificationCreate, callback) {
      let postBody = verificationCreate;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationCreate");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationCreate");
      }
      // verify the required parameter 'verificationCreate' is set
      if (verificationCreate === undefined || verificationCreate === null) {
        throw new Error("Missing the required parameter 'verificationCreate' when calling clientVerificationCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = VerificationCreate;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationDocumentCreate operation.
     * @callback module:api/ApplicationApi~clientVerificationDocumentCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationWithType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a verification Document for a client
     * @param {String} clientUuid 
     * @param {String} verifyTypeCode 
     * @param {String} uuid 
     * @param {module:model/VerifyTypeEnum} verifyType 
     * @param {Date} created 
     * @param {Date} updated 
     * @param {Array.<module:model/VerificationDocumentCreate>} verificationDocuments 
     * @param {Object} opts Optional parameters
     * @param {module:model/StatusBd7Enum} opts.status 
     * @param {module:model/OneOfResultEnumBlankEnum} opts.result 
     * @param {module:api/ApplicationApi~clientVerificationDocumentCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationWithType}
     */
    clientVerificationDocumentCreate(clientUuid, verifyTypeCode, uuid, verifyType, created, updated, verificationDocuments, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentCreate");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentCreate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientVerificationDocumentCreate");
      }
      // verify the required parameter 'verifyType' is set
      if (verifyType === undefined || verifyType === null) {
        throw new Error("Missing the required parameter 'verifyType' when calling clientVerificationDocumentCreate");
      }
      // verify the required parameter 'created' is set
      if (created === undefined || created === null) {
        throw new Error("Missing the required parameter 'created' when calling clientVerificationDocumentCreate");
      }
      // verify the required parameter 'updated' is set
      if (updated === undefined || updated === null) {
        throw new Error("Missing the required parameter 'updated' when calling clientVerificationDocumentCreate");
      }
      // verify the required parameter 'verificationDocuments' is set
      if (verificationDocuments === undefined || verificationDocuments === null) {
        throw new Error("Missing the required parameter 'verificationDocuments' when calling clientVerificationDocumentCreate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'uuid': uuid,
        'verify_type': verifyType,
        'status': opts['status'],
        'result': opts['result'],
        'created': created,
        'updated': updated,
        'verification_documents': this.apiClient.buildCollectionParam(verificationDocuments, 'csv')
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerificationWithType;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationDocumentDelete operation.
     * @callback module:api/ApplicationApi~clientVerificationDocumentDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a client verificatoin document
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {String} verifyTypeCode 
     * @param {module:api/ApplicationApi~clientVerificationDocumentDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    clientVerificationDocumentDelete(clientUuid, uuid, verifyTypeCode, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentDelete");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientVerificationDocumentDelete");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentDelete");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationDocumentList operation.
     * @callback module:api/ApplicationApi~clientVerificationDocumentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVerificationDocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Verification Document for a client
     * @param {String} clientUuid 
     * @param {String} verifyTypeCode 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~clientVerificationDocumentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVerificationDocumentList}
     */
    clientVerificationDocumentList(clientUuid, verifyTypeCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentList");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentList");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVerificationDocumentList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationDocumentPartialUpdate operation.
     * @callback module:api/ApplicationApi~clientVerificationDocumentPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partial Update a client verification document
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {String} verifyTypeCode 
     * @param {Object} opts Optional parameters
     * @param {String} opts.uuid2 
     * @param {module:model/DocumentTypeEnum} opts.documentType 
     * @param {String} opts.documentFront 
     * @param {String} opts.documentBack 
     * @param {module:api/ApplicationApi~clientVerificationDocumentPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationDocument}
     */
    clientVerificationDocumentPartialUpdate(clientUuid, uuid, verifyTypeCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientVerificationDocumentPartialUpdate");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentPartialUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'uuid': opts['uuid2'],
        'document_type': opts['documentType'],
        'document_front': opts['documentFront'],
        'document_back': opts['documentBack']
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerificationDocument;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationDocumentRetrieve operation.
     * @callback module:api/ApplicationApi~clientVerificationDocumentRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client verification document
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {String} verifyTypeCode 
     * @param {module:api/ApplicationApi~clientVerificationDocumentRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationDocument}
     */
    clientVerificationDocumentRetrieve(clientUuid, uuid, verifyTypeCode, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientVerificationDocumentRetrieve");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerificationDocument;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationDocumentUpdate operation.
     * @callback module:api/ApplicationApi~clientVerificationDocumentUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a client verification document
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {String} verifyTypeCode 
     * @param {String} uuid2 
     * @param {module:model/DocumentTypeEnum} documentType 
     * @param {String} documentFront 
     * @param {String} documentBack 
     * @param {module:api/ApplicationApi~clientVerificationDocumentUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationDocument}
     */
    clientVerificationDocumentUpdate(clientUuid, uuid, verifyTypeCode, uuid2, documentType, documentFront, documentBack, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationDocumentUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientVerificationDocumentUpdate");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationDocumentUpdate");
      }
      // verify the required parameter 'uuid2' is set
      if (uuid2 === undefined || uuid2 === null) {
        throw new Error("Missing the required parameter 'uuid2' when calling clientVerificationDocumentUpdate");
      }
      // verify the required parameter 'documentType' is set
      if (documentType === undefined || documentType === null) {
        throw new Error("Missing the required parameter 'documentType' when calling clientVerificationDocumentUpdate");
      }
      // verify the required parameter 'documentFront' is set
      if (documentFront === undefined || documentFront === null) {
        throw new Error("Missing the required parameter 'documentFront' when calling clientVerificationDocumentUpdate");
      }
      // verify the required parameter 'documentBack' is set
      if (documentBack === undefined || documentBack === null) {
        throw new Error("Missing the required parameter 'documentBack' when calling clientVerificationDocumentUpdate");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'uuid': uuid2,
        'document_type': documentType,
        'document_front': documentFront,
        'document_back': documentBack
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['multipart/form-data', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VerificationDocument;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationList operation.
     * @callback module:api/ApplicationApi~clientVerificationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedVerificationListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Verification for a client
     * @param {String} clientUuid 
     * @param {String} verifyTypeCode 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApplicationApi~clientVerificationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedVerificationListList}
     */
    clientVerificationList(clientUuid, verifyTypeCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationList");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationList");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedVerificationListList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the clientVerificationRetrieve operation.
     * @callback module:api/ApplicationApi~clientVerificationRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerificationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a client verification 
     * @param {String} clientUuid 
     * @param {String} uuid 
     * @param {String} verifyTypeCode 
     * @param {module:api/ApplicationApi~clientVerificationRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerificationList}
     */
    clientVerificationRetrieve(clientUuid, uuid, verifyTypeCode, callback) {
      let postBody = null;
      // verify the required parameter 'clientUuid' is set
      if (clientUuid === undefined || clientUuid === null) {
        throw new Error("Missing the required parameter 'clientUuid' when calling clientVerificationRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clientVerificationRetrieve");
      }
      // verify the required parameter 'verifyTypeCode' is set
      if (verifyTypeCode === undefined || verifyTypeCode === null) {
        throw new Error("Missing the required parameter 'verifyTypeCode' when calling clientVerificationRetrieve");
      }

      let pathParams = {
        'client_uuid': clientUuid,
        'uuid': uuid,
        'verify_type_code': verifyTypeCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerificationList;
      return this.apiClient.callApi(
        '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
