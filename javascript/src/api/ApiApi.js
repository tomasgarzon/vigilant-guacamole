/**
 * Nucoro API
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllocationDetail from '../model/AllocationDetail';
import AllocationList from '../model/AllocationList';
import AssetDetail from '../model/AssetDetail';
import Attachment from '../model/Attachment';
import AuthenticationResponse from '../model/AuthenticationResponse';
import ClientReferral from '../model/ClientReferral';
import ConversationCreate from '../model/ConversationCreate';
import CreateOrder from '../model/CreateOrder';
import CurrentAllocation from '../model/CurrentAllocation';
import DepositCreate from '../model/DepositCreate';
import DepositDetail from '../model/DepositDetail';
import ETSForecastRequest from '../model/ETSForecastRequest';
import EmailVerifyRequest from '../model/EmailVerifyRequest';
import EmailVerifyView from '../model/EmailVerifyView';
import FeedActivityList from '../model/FeedActivityList';
import ForecastDecumulationRequest from '../model/ForecastDecumulationRequest';
import ForecastRequest from '../model/ForecastRequest';
import Goal from '../model/Goal';
import IntradayPrice from '../model/IntradayPrice';
import InvestorModelPortfolio from '../model/InvestorModelPortfolio';
import InvestorWithdrawalCreate from '../model/InvestorWithdrawalCreate';
import InvoiceDetails from '../model/InvoiceDetails';
import Message from '../model/Message';
import MinimumAppVersion from '../model/MinimumAppVersion';
import ModelPortfolioForecastRequest from '../model/ModelPortfolioForecastRequest';
import NucoroSetting from '../model/NucoroSetting';
import OrderList from '../model/OrderList';
import PaginatedAccessLogList from '../model/PaginatedAccessLogList';
import PaginatedAllocationListList from '../model/PaginatedAllocationListList';
import PaginatedAssetCategoryList from '../model/PaginatedAssetCategoryList';
import PaginatedAssetGrowthList from '../model/PaginatedAssetGrowthList';
import PaginatedAssetListList from '../model/PaginatedAssetListList';
import PaginatedBasePortfolioTypeRestrictionsList from '../model/PaginatedBasePortfolioTypeRestrictionsList';
import PaginatedCategoryList from '../model/PaginatedCategoryList';
import PaginatedConversationListList from '../model/PaginatedConversationListList';
import PaginatedCoreCategoryGroupList from '../model/PaginatedCoreCategoryGroupList';
import PaginatedCountryListList from '../model/PaginatedCountryListList';
import PaginatedDepositListList from '../model/PaginatedDepositListList';
import PaginatedFeedActivityListList from '../model/PaginatedFeedActivityListList';
import PaginatedGoalList from '../model/PaginatedGoalList';
import PaginatedIntradayPriceList from '../model/PaginatedIntradayPriceList';
import PaginatedInvestorModelPortfolioList from '../model/PaginatedInvestorModelPortfolioList';
import PaginatedInvestorWithdrawalListList from '../model/PaginatedInvestorWithdrawalListList';
import PaginatedInvoiceListList from '../model/PaginatedInvoiceListList';
import PaginatedMessageList from '../model/PaginatedMessageList';
import PaginatedNationalDocumentList from '../model/PaginatedNationalDocumentList';
import PaginatedOrderListList from '../model/PaginatedOrderListList';
import PaginatedPortfolioListList from '../model/PaginatedPortfolioListList';
import PaginatedPortfolioPerformanceList from '../model/PaginatedPortfolioPerformanceList';
import PaginatedPortfolioPerformancePositionsList from '../model/PaginatedPortfolioPerformancePositionsList';
import PaginatedPortfolioTypeList from '../model/PaginatedPortfolioTypeList';
import PaginatedPresetCategoryGroupList from '../model/PaginatedPresetCategoryGroupList';
import PaginatedPriceList from '../model/PaginatedPriceList';
import PaginatedQuestionList from '../model/PaginatedQuestionList';
import PaginatedRebalanceList from '../model/PaginatedRebalanceList';
import PaginatedTosList from '../model/PaginatedTosList';
import PatchedGoal from '../model/PatchedGoal';
import PatchedPortfolioUpdate from '../model/PatchedPortfolioUpdate';
import PortalSettingValueList from '../model/PortalSettingValueList';
import PortfolioCreate from '../model/PortfolioCreate';
import PortfolioDetail from '../model/PortfolioDetail';
import PortfolioTypeRestrictions from '../model/PortfolioTypeRestrictions';
import PortfolioUpdate from '../model/PortfolioUpdate';
import Price from '../model/Price';
import Rebalance from '../model/Rebalance';
import Response from '../model/Response';
import Subscribe from '../model/Subscribe';
import Tos from '../model/Tos';
import Unsubscribe from '../model/Unsubscribe';
import WebsocketAuthentication from '../model/WebsocketAuthentication';
import WithdrawalDetail from '../model/WithdrawalDetail';

/**
* Api service.
* @module api/ApiApi
* @version 4.175.0
*/
export default class ApiApi {

    /**
    * Constructs a new ApiApi. 
    * @alias module:api/ApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiSchemaRetrieve operation.
     * @callback module:api/ApiApi~apiSchemaRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {module:model/String} opts.lang 
     * @param {module:api/ApiApi~apiSchemaRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    apiSchemaRetrieve(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'lang': opts['lang']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/vnd.oai.openapi', 'application/yaml', 'application/vnd.oai.openapi+json', 'application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/api/schema/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AdviceEnginesEtsCategoriesList operation.
     * @callback module:api/ApiApi~apiV2AdviceEnginesEtsCategoriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedCategoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2AdviceEnginesEtsCategoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedCategoryList}
     */
    apiV2AdviceEnginesEtsCategoriesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedCategoryList;
      return this.apiClient.callApi(
        '/api/v2/advice-engines/ets/categories/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AdviceEnginesEtsCoreCategoryGroupsList operation.
     * @callback module:api/ApiApi~apiV2AdviceEnginesEtsCoreCategoryGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedCoreCategoryGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2AdviceEnginesEtsCoreCategoryGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedCoreCategoryGroupList}
     */
    apiV2AdviceEnginesEtsCoreCategoryGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedCoreCategoryGroupList;
      return this.apiClient.callApi(
        '/api/v2/advice-engines/ets/core-category-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AdviceEnginesEtsForecastCreate operation.
     * @callback module:api/ApiApi~apiV2AdviceEnginesEtsForecastCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ETSForecastRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The forecast positions and amounts for the time_horizon and  risk_level chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     * @param {module:model/ETSForecastRequest} eTSForecastRequest 
     * @param {module:api/ApiApi~apiV2AdviceEnginesEtsForecastCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ETSForecastRequest}
     */
    apiV2AdviceEnginesEtsForecastCreate(eTSForecastRequest, callback) {
      let postBody = eTSForecastRequest;
      // verify the required parameter 'eTSForecastRequest' is set
      if (eTSForecastRequest === undefined || eTSForecastRequest === null) {
        throw new Error("Missing the required parameter 'eTSForecastRequest' when calling apiV2AdviceEnginesEtsForecastCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ETSForecastRequest;
      return this.apiClient.callApi(
        '/api/v2/advice-engines/ets/forecast/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AdviceEnginesEtsPresetCategoryGroupsList operation.
     * @callback module:api/ApiApi~apiV2AdviceEnginesEtsPresetCategoryGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPresetCategoryGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2AdviceEnginesEtsPresetCategoryGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPresetCategoryGroupList}
     */
    apiV2AdviceEnginesEtsPresetCategoryGroupsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPresetCategoryGroupList;
      return this.apiClient.callApi(
        '/api/v2/advice-engines/ets/preset-category-groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AdviceEnginesModelPortfolioForecastCreate operation.
     * @callback module:api/ApiApi~apiV2AdviceEnginesModelPortfolioForecastCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelPortfolioForecastRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The forecast positions and amounts for the time_horizon chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.
     * @param {module:model/ModelPortfolioForecastRequest} modelPortfolioForecastRequest 
     * @param {module:api/ApiApi~apiV2AdviceEnginesModelPortfolioForecastCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelPortfolioForecastRequest}
     */
    apiV2AdviceEnginesModelPortfolioForecastCreate(modelPortfolioForecastRequest, callback) {
      let postBody = modelPortfolioForecastRequest;
      // verify the required parameter 'modelPortfolioForecastRequest' is set
      if (modelPortfolioForecastRequest === undefined || modelPortfolioForecastRequest === null) {
        throw new Error("Missing the required parameter 'modelPortfolioForecastRequest' when calling apiV2AdviceEnginesModelPortfolioForecastCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ModelPortfolioForecastRequest;
      return this.apiClient.callApi(
        '/api/v2/advice-engines/model-portfolio/forecast/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AdviceEnginesModelPortfolioModelPortfoliosList operation.
     * @callback module:api/ApiApi~apiV2AdviceEnginesModelPortfolioModelPortfoliosListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedInvestorModelPortfolioList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Object.<String, {String: Object}>} opts.extraData Additional ModelPortfolio attributes
     * @param {Number} opts.limit Number of results to return per page.
     * @param {String} opts.name 
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Number} opts.riskHigher 
     * @param {Number} opts.riskLevel 
     * @param {Number} opts.riskLower 
     * @param {module:api/ApiApi~apiV2AdviceEnginesModelPortfolioModelPortfoliosListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedInvestorModelPortfolioList}
     */
    apiV2AdviceEnginesModelPortfolioModelPortfoliosList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'extra_data': opts['extraData'],
        'limit': opts['limit'],
        'name': opts['name'],
        'offset': opts['offset'],
        'risk_higher': opts['riskHigher'],
        'risk_level': opts['riskLevel'],
        'risk_lower': opts['riskLower']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedInvestorModelPortfolioList;
      return this.apiClient.callApi(
        '/api/v2/advice-engines/model-portfolio/model-portfolios/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieve operation.
     * @callback module:api/ApiApi~apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorModelPortfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorModelPortfolio}
     */
    apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieve(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2AdviceEnginesModelPortfolioModelPortfoliosRetrieve");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvestorModelPortfolio;
      return this.apiClient.callApi(
        '/api/v2/advice-engines/model-portfolio/model-portfolios/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AssetsCategoriesList operation.
     * @callback module:api/ApiApi~apiV2AssetsCategoriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAssetCategoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all asset categories
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.type 
     * @param {module:api/ApiApi~apiV2AssetsCategoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAssetCategoryList}
     */
    apiV2AssetsCategoriesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAssetCategoryList;
      return this.apiClient.callApi(
        '/api/v2/assets/categories/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AssetsIntradayPricesLatestRetrieve operation.
     * @callback module:api/ApiApi~apiV2AssetsIntradayPricesLatestRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntradayPrice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param {String} assetIdentifier 
     * @param {module:api/ApiApi~apiV2AssetsIntradayPricesLatestRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntradayPrice}
     */
    apiV2AssetsIntradayPricesLatestRetrieve(assetIdentifier, callback) {
      let postBody = null;
      // verify the required parameter 'assetIdentifier' is set
      if (assetIdentifier === undefined || assetIdentifier === null) {
        throw new Error("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsIntradayPricesLatestRetrieve");
      }

      let pathParams = {
        'asset_identifier': assetIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntradayPrice;
      return this.apiClient.callApi(
        '/api/v2/assets/{asset_identifier}/intraday-prices/latest/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AssetsIntradayPricesList operation.
     * @callback module:api/ApiApi~apiV2AssetsIntradayPricesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedIntradayPriceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param {String} assetIdentifier 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateAfter 
     * @param {Date} opts.dateBefore 
     * @param {Date} opts.datetimeAfter 
     * @param {Date} opts.datetimeBefore 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2AssetsIntradayPricesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedIntradayPriceList}
     */
    apiV2AssetsIntradayPricesList(assetIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetIdentifier' is set
      if (assetIdentifier === undefined || assetIdentifier === null) {
        throw new Error("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsIntradayPricesList");
      }

      let pathParams = {
        'asset_identifier': assetIdentifier
      };
      let queryParams = {
        'date_after': opts['dateAfter'],
        'date_before': opts['dateBefore'],
        'datetime_after': opts['datetimeAfter'],
        'datetime_before': opts['datetimeBefore'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedIntradayPriceList;
      return this.apiClient.callApi(
        '/api/v2/assets/{asset_identifier}/intraday-prices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AssetsList operation.
     * @callback module:api/ApiApi~apiV2AssetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAssetListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of Assets filtered by category codes. Default is an empty dict which returns the whole universe.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.assetType 
     * @param {Array.<String>} opts.categoryCode 
     * @param {Array.<String>} opts.categoryType 
     * @param {Number} opts.currency 
     * @param {String} opts.isin 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.market 
     * @param {String} opts.name 
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:model/String} opts.status 
     * @param {String} opts.ticker 
     * @param {module:api/ApiApi~apiV2AssetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAssetListList}
     */
    apiV2AssetsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'asset_type': opts['assetType'],
        'category_code': this.apiClient.buildCollectionParam(opts['categoryCode'], 'multi'),
        'category_type': this.apiClient.buildCollectionParam(opts['categoryType'], 'multi'),
        'currency': opts['currency'],
        'isin': opts['isin'],
        'limit': opts['limit'],
        'market': opts['market'],
        'name': opts['name'],
        'offset': opts['offset'],
        'status': opts['status'],
        'ticker': opts['ticker']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAssetListList;
      return this.apiClient.callApi(
        '/api/v2/assets/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AssetsPerformanceList operation.
     * @callback module:api/ApiApi~apiV2AssetsPerformanceListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAssetGrowthList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve asset's yearly performance.  This View overwrites ListAPIView's 'list' method because it doesn't have any hook that allows us to call 'get_asset_price_year_graph after the filtering is applied.
     * @param {String} assetIdentifier 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.dateYearAfter 
     * @param {Number} opts.dateYearBefore 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2AssetsPerformanceListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAssetGrowthList}
     */
    apiV2AssetsPerformanceList(assetIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetIdentifier' is set
      if (assetIdentifier === undefined || assetIdentifier === null) {
        throw new Error("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsPerformanceList");
      }

      let pathParams = {
        'asset_identifier': assetIdentifier
      };
      let queryParams = {
        'date_year_after': opts['dateYearAfter'],
        'date_year_before': opts['dateYearBefore'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAssetGrowthList;
      return this.apiClient.callApi(
        '/api/v2/assets/{asset_identifier}/performance/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AssetsPricesLatestRetrieve operation.
     * @callback module:api/ApiApi~apiV2AssetsPricesLatestRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Price} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param {String} assetIdentifier 
     * @param {module:api/ApiApi~apiV2AssetsPricesLatestRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Price}
     */
    apiV2AssetsPricesLatestRetrieve(assetIdentifier, callback) {
      let postBody = null;
      // verify the required parameter 'assetIdentifier' is set
      if (assetIdentifier === undefined || assetIdentifier === null) {
        throw new Error("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsPricesLatestRetrieve");
      }

      let pathParams = {
        'asset_identifier': assetIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Price;
      return this.apiClient.callApi(
        '/api/v2/assets/{asset_identifier}/prices/latest/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AssetsPricesList operation.
     * @callback module:api/ApiApi~apiV2AssetsPricesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPriceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)
     * @param {String} assetIdentifier 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateAfter 
     * @param {Date} opts.dateBefore 
     * @param {Date} opts.datetimeAfter 
     * @param {Date} opts.datetimeBefore 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2AssetsPricesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPriceList}
     */
    apiV2AssetsPricesList(assetIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetIdentifier' is set
      if (assetIdentifier === undefined || assetIdentifier === null) {
        throw new Error("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsPricesList");
      }

      let pathParams = {
        'asset_identifier': assetIdentifier
      };
      let queryParams = {
        'date_after': opts['dateAfter'],
        'date_before': opts['dateBefore'],
        'datetime_after': opts['datetimeAfter'],
        'datetime_before': opts['datetimeBefore'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPriceList;
      return this.apiClient.callApi(
        '/api/v2/assets/{asset_identifier}/prices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2AssetsRetrieve operation.
     * @callback module:api/ApiApi~apiV2AssetsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows get an asset instance by * UUID * ISIN * ISIN & MARKET_CODE * ISIN & MARKET_CODE & CURRENCY_CODE  Examples:     * assets/a66633d7-4418-4c85-9582-01c80df531d4/     * assets/IE00B579F325/     * assets/IE00B579F325_XETR_GBP/     * assets/IE00B579F325_XETR/
     * @param {String} assetIdentifier 
     * @param {module:api/ApiApi~apiV2AssetsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetDetail}
     */
    apiV2AssetsRetrieve(assetIdentifier, callback) {
      let postBody = null;
      // verify the required parameter 'assetIdentifier' is set
      if (assetIdentifier === undefined || assetIdentifier === null) {
        throw new Error("Missing the required parameter 'assetIdentifier' when calling apiV2AssetsRetrieve");
      }

      let pathParams = {
        'asset_identifier': assetIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetDetail;
      return this.apiClient.callApi(
        '/api/v2/assets/{asset_identifier}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2BillingInvoicesList operation.
     * @callback module:api/ApiApi~apiV2BillingInvoicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedInvoiceListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateFrom 
     * @param {Date} opts.dateTo 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:model/String} opts.status 
     * @param {module:api/ApiApi~apiV2BillingInvoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedInvoiceListList}
     */
    apiV2BillingInvoicesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedInvoiceListList;
      return this.apiClient.callApi(
        '/api/v2/billing/invoices/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2BillingInvoicesRetrieve operation.
     * @callback module:api/ApiApi~apiV2BillingInvoicesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvoiceDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {module:api/ApiApi~apiV2BillingInvoicesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvoiceDetails}
     */
    apiV2BillingInvoicesRetrieve(uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2BillingInvoicesRetrieve");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = InvoiceDetails;
      return this.apiClient.callApi(
        '/api/v2/billing/invoices/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2BrokerOrdersCreate operation.
     * @callback module:api/ApiApi~apiV2BrokerOrdersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {module:model/CreateOrder} createOrder 
     * @param {module:api/ApiApi~apiV2BrokerOrdersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrder}
     */
    apiV2BrokerOrdersCreate(portfolioUuid, createOrder, callback) {
      let postBody = createOrder;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2BrokerOrdersCreate");
      }
      // verify the required parameter 'createOrder' is set
      if (createOrder === undefined || createOrder === null) {
        throw new Error("Missing the required parameter 'createOrder' when calling apiV2BrokerOrdersCreate");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateOrder;
      return this.apiClient.callApi(
        '/api/v2/broker/orders/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2BrokerOrdersDestroy operation.
     * @callback module:api/ApiApi~apiV2BrokerOrdersDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel or request cancellation to the broker
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2BrokerOrdersDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2BrokerOrdersDestroy(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2BrokerOrdersDestroy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2BrokerOrdersDestroy");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/broker/orders/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2BrokerOrdersList operation.
     * @callback module:api/ApiApi~apiV2BrokerOrdersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedOrderListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.adviceExternalId 
     * @param {String} opts.asset 
     * @param {Date} opts.completedAfter 
     * @param {Date} opts.completedBefore 
     * @param {Object.<String, {String: Object}>} opts.extraData Additional order attributes for the specific portal
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.portfolio 
     * @param {String} opts.status 
     * @param {module:api/ApiApi~apiV2BrokerOrdersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedOrderListList}
     */
    apiV2BrokerOrdersList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2BrokerOrdersList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'advice_external_id': opts['adviceExternalId'],
        'asset': opts['asset'],
        'completed_after': opts['completedAfter'],
        'completed_before': opts['completedBefore'],
        'extra_data': opts['extraData'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'portfolio': opts['portfolio'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedOrderListList;
      return this.apiClient.callApi(
        '/api/v2/broker/orders/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2BrokerOrdersRetrieve operation.
     * @callback module:api/ApiApi~apiV2BrokerOrdersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2BrokerOrdersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderList}
     */
    apiV2BrokerOrdersRetrieve(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2BrokerOrdersRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2BrokerOrdersRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderList;
      return this.apiClient.callApi(
        '/api/v2/broker/orders/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsMeVerifyEmailCreate operation.
     * @callback module:api/ApiApi~apiV2ClientsMeVerifyEmailCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailVerifyRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request e-mail account verification notification.
     * @param {Object} opts Optional parameters
     * @param {module:model/EmailVerifyRequest} opts.emailVerifyRequest 
     * @param {module:api/ApiApi~apiV2ClientsMeVerifyEmailCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailVerifyRequest}
     */
    apiV2ClientsMeVerifyEmailCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['emailVerifyRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EmailVerifyRequest;
      return this.apiClient.callApi(
        '/api/v2/clients/me/verify/email/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsNationalDocumentsList operation.
     * @callback module:api/ApiApi~apiV2ClientsNationalDocumentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedNationalDocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2ClientsNationalDocumentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedNationalDocumentList}
     */
    apiV2ClientsNationalDocumentsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedNationalDocumentList;
      return this.apiClient.callApi(
        '/api/v2/clients/national_documents/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsReferralRetrieve operation.
     * @callback module:api/ApiApi~apiV2ClientsReferralRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientReferral} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the currently logged in client referral code
     * @param {String} referralCode 
     * @param {module:api/ApiApi~apiV2ClientsReferralRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientReferral}
     */
    apiV2ClientsReferralRetrieve(referralCode, callback) {
      let postBody = null;
      // verify the required parameter 'referralCode' is set
      if (referralCode === undefined || referralCode === null) {
        throw new Error("Missing the required parameter 'referralCode' when calling apiV2ClientsReferralRetrieve");
      }

      let pathParams = {
        'referral_code': referralCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ClientReferral;
      return this.apiClient.callApi(
        '/api/v2/clients/referral/{referral_code}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ClientsVerifyEmailUpdate operation.
     * @callback module:api/ApiApi~apiV2ClientsVerifyEmailUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailVerifyView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify e-mail account with the given email token.
     * @param {String} uuid 
     * @param {module:model/EmailVerifyView} emailVerifyView 
     * @param {module:api/ApiApi~apiV2ClientsVerifyEmailUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailVerifyView}
     */
    apiV2ClientsVerifyEmailUpdate(uuid, emailVerifyView, callback) {
      let postBody = emailVerifyView;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2ClientsVerifyEmailUpdate");
      }
      // verify the required parameter 'emailVerifyView' is set
      if (emailVerifyView === undefined || emailVerifyView === null) {
        throw new Error("Missing the required parameter 'emailVerifyView' when calling apiV2ClientsVerifyEmailUpdate");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EmailVerifyView;
      return this.apiClient.callApi(
        '/api/v2/clients/{uuid}/verify/email/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2FeedsAccessLogsList operation.
     * @callback module:api/ApiApi~apiV2FeedsAccessLogsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAccessLogList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the latest access to the client's account
     * @param {Object} opts Optional parameters
     * @param {String} opts.browser 
     * @param {String} opts.browserVersion 
     * @param {module:model/String} opts.channel 
     * @param {String} opts.city 
     * @param {Number} opts.country 
     * @param {String} opts.deviceBrand 
     * @param {String} opts.deviceModel 
     * @param {String} opts.ipAddress 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.os 
     * @param {String} opts.osVersion 
     * @param {String} opts.userAgent 
     * @param {module:api/ApiApi~apiV2FeedsAccessLogsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAccessLogList}
     */
    apiV2FeedsAccessLogsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'browser': opts['browser'],
        'browser_version': opts['browserVersion'],
        'channel': opts['channel'],
        'city': opts['city'],
        'country': opts['country'],
        'device_brand': opts['deviceBrand'],
        'device_model': opts['deviceModel'],
        'ip_address': opts['ipAddress'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'os': opts['os'],
        'os_version': opts['osVersion'],
        'user_agent': opts['userAgent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAccessLogList;
      return this.apiClient.callApi(
        '/api/v2/feeds/access-logs/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2FeedsActivitiesList operation.
     * @callback module:api/ApiApi~apiV2FeedsActivitiesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFeedActivityListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Array.<module:model/String>} opts.target 
     * @param {module:api/ApiApi~apiV2FeedsActivitiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFeedActivityListList}
     */
    apiV2FeedsActivitiesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'target': this.apiClient.buildCollectionParam(opts['target'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedFeedActivityListList;
      return this.apiClient.callApi(
        '/api/v2/feeds/activities/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2GoalsCreate operation.
     * @callback module:api/ApiApi~apiV2GoalsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Goal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} goalUuid 
     * @param {module:model/Goal} goal 
     * @param {module:api/ApiApi~apiV2GoalsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Goal}
     */
    apiV2GoalsCreate(goalUuid, goal, callback) {
      let postBody = goal;
      // verify the required parameter 'goalUuid' is set
      if (goalUuid === undefined || goalUuid === null) {
        throw new Error("Missing the required parameter 'goalUuid' when calling apiV2GoalsCreate");
      }
      // verify the required parameter 'goal' is set
      if (goal === undefined || goal === null) {
        throw new Error("Missing the required parameter 'goal' when calling apiV2GoalsCreate");
      }

      let pathParams = {
        'goal_uuid': goalUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Goal;
      return this.apiClient.callApi(
        '/api/v2/goals/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2GoalsDecumulationCreate operation.
     * @callback module:api/ApiApi~apiV2GoalsDecumulationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForecastDecumulationRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Goal Forecast Decumulation
     * @param {module:model/ForecastDecumulationRequest} forecastDecumulationRequest 
     * @param {module:api/ApiApi~apiV2GoalsDecumulationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForecastDecumulationRequest}
     */
    apiV2GoalsDecumulationCreate(forecastDecumulationRequest, callback) {
      let postBody = forecastDecumulationRequest;
      // verify the required parameter 'forecastDecumulationRequest' is set
      if (forecastDecumulationRequest === undefined || forecastDecumulationRequest === null) {
        throw new Error("Missing the required parameter 'forecastDecumulationRequest' when calling apiV2GoalsDecumulationCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForecastDecumulationRequest;
      return this.apiClient.callApi(
        '/api/v2/goals/decumulation/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2GoalsDestroy operation.
     * @callback module:api/ApiApi~apiV2GoalsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} goalUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2GoalsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2GoalsDestroy(goalUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'goalUuid' is set
      if (goalUuid === undefined || goalUuid === null) {
        throw new Error("Missing the required parameter 'goalUuid' when calling apiV2GoalsDestroy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2GoalsDestroy");
      }

      let pathParams = {
        'goal_uuid': goalUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/goals/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2GoalsForecastCreate operation.
     * @callback module:api/ApiApi~apiV2GoalsForecastCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForecastRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return a Goal Forecast
     * @param {module:model/ForecastRequest} forecastRequest 
     * @param {module:api/ApiApi~apiV2GoalsForecastCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForecastRequest}
     */
    apiV2GoalsForecastCreate(forecastRequest, callback) {
      let postBody = forecastRequest;
      // verify the required parameter 'forecastRequest' is set
      if (forecastRequest === undefined || forecastRequest === null) {
        throw new Error("Missing the required parameter 'forecastRequest' when calling apiV2GoalsForecastCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ForecastRequest;
      return this.apiClient.callApi(
        '/api/v2/goals/forecast/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2GoalsList operation.
     * @callback module:api/ApiApi~apiV2GoalsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedGoalList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} goalUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2GoalsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedGoalList}
     */
    apiV2GoalsList(goalUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'goalUuid' is set
      if (goalUuid === undefined || goalUuid === null) {
        throw new Error("Missing the required parameter 'goalUuid' when calling apiV2GoalsList");
      }

      let pathParams = {
        'goal_uuid': goalUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedGoalList;
      return this.apiClient.callApi(
        '/api/v2/goals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2GoalsPartialUpdate operation.
     * @callback module:api/ApiApi~apiV2GoalsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Goal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} goalUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedGoal} opts.patchedGoal 
     * @param {module:api/ApiApi~apiV2GoalsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Goal}
     */
    apiV2GoalsPartialUpdate(goalUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedGoal'];
      // verify the required parameter 'goalUuid' is set
      if (goalUuid === undefined || goalUuid === null) {
        throw new Error("Missing the required parameter 'goalUuid' when calling apiV2GoalsPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2GoalsPartialUpdate");
      }

      let pathParams = {
        'goal_uuid': goalUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Goal;
      return this.apiClient.callApi(
        '/api/v2/goals/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2GoalsRetrieve operation.
     * @callback module:api/ApiApi~apiV2GoalsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Goal} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} goalUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2GoalsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Goal}
     */
    apiV2GoalsRetrieve(goalUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'goalUuid' is set
      if (goalUuid === undefined || goalUuid === null) {
        throw new Error("Missing the required parameter 'goalUuid' when calling apiV2GoalsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2GoalsRetrieve");
      }

      let pathParams = {
        'goal_uuid': goalUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Goal;
      return this.apiClient.callApi(
        '/api/v2/goals/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2InboxConversationDetailMessagesList operation.
     * @callback module:api/ApiApi~apiV2InboxConversationDetailMessagesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedMessageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all messages from a conversation uuid
     * @param {String} conversation 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2InboxConversationDetailMessagesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedMessageList}
     */
    apiV2InboxConversationDetailMessagesList(conversation, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversation' is set
      if (conversation === undefined || conversation === null) {
        throw new Error("Missing the required parameter 'conversation' when calling apiV2InboxConversationDetailMessagesList");
      }

      let pathParams = {
        'conversation': conversation
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedMessageList;
      return this.apiClient.callApi(
        '/api/v2/inbox/conversations/{conversation}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2InboxConversationsCreate operation.
     * @callback module:api/ApiApi~apiV2InboxConversationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     * @param {String} uuid 
     * @param {Number} portal 
     * @param {Date} created 
     * @param {String} subject 
     * @param {Object} opts Optional parameters
     * @param {module:model/Message} opts.messages 
     * @param {module:api/ApiApi~apiV2InboxConversationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationCreate}
     */
    apiV2InboxConversationsCreate(uuid, portal, created, subject, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2InboxConversationsCreate");
      }
      // verify the required parameter 'portal' is set
      if (portal === undefined || portal === null) {
        throw new Error("Missing the required parameter 'portal' when calling apiV2InboxConversationsCreate");
      }
      // verify the required parameter 'created' is set
      if (created === undefined || created === null) {
        throw new Error("Missing the required parameter 'created' when calling apiV2InboxConversationsCreate");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling apiV2InboxConversationsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'uuid': uuid,
        'portal': portal,
        'created': created,
        'subject': subject,
        'messages': opts['messages']
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ConversationCreate;
      return this.apiClient.callApi(
        '/api/v2/inbox/conversations/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2InboxConversationsList operation.
     * @callback module:api/ApiApi~apiV2InboxConversationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedConversationListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2InboxConversationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedConversationListList}
     */
    apiV2InboxConversationsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedConversationListList;
      return this.apiClient.callApi(
        '/api/v2/inbox/conversations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2InboxConversationsMessagesAttachmentsRetrieve operation.
     * @callback module:api/ApiApi~apiV2InboxConversationsMessagesAttachmentsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View to access to an attachment
     * @param {String} conversation 
     * @param {String} message 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.format 
     * @param {module:api/ApiApi~apiV2InboxConversationsMessagesAttachmentsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    apiV2InboxConversationsMessagesAttachmentsRetrieve(conversation, message, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversation' is set
      if (conversation === undefined || conversation === null) {
        throw new Error("Missing the required parameter 'conversation' when calling apiV2InboxConversationsMessagesAttachmentsRetrieve");
      }
      // verify the required parameter 'message' is set
      if (message === undefined || message === null) {
        throw new Error("Missing the required parameter 'message' when calling apiV2InboxConversationsMessagesAttachmentsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2InboxConversationsMessagesAttachmentsRetrieve");
      }

      let pathParams = {
        'conversation': conversation,
        'message': message,
        'uuid': uuid
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/pdf', 'text/plain'];
      let returnType = Attachment;
      return this.apiClient.callApi(
        '/api/v2/inbox/conversations/{conversation}/messages/{message}/attachments/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2InboxConversationsMessagesCreate operation.
     * @callback module:api/ApiApi~apiV2InboxConversationsMessagesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View for creating message on a specific conversation
     * @param {String} conversation 
     * @param {String} user 
     * @param {Date} readDate 
     * @param {Date} created 
     * @param {Array.<module:model/Attachment>} attachments 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.content 
     * @param {module:api/ApiApi~apiV2InboxConversationsMessagesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    apiV2InboxConversationsMessagesCreate(conversation, user, readDate, created, attachments, uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversation' is set
      if (conversation === undefined || conversation === null) {
        throw new Error("Missing the required parameter 'conversation' when calling apiV2InboxConversationsMessagesCreate");
      }
      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiV2InboxConversationsMessagesCreate");
      }
      // verify the required parameter 'readDate' is set
      if (readDate === undefined || readDate === null) {
        throw new Error("Missing the required parameter 'readDate' when calling apiV2InboxConversationsMessagesCreate");
      }
      // verify the required parameter 'created' is set
      if (created === undefined || created === null) {
        throw new Error("Missing the required parameter 'created' when calling apiV2InboxConversationsMessagesCreate");
      }
      // verify the required parameter 'attachments' is set
      if (attachments === undefined || attachments === null) {
        throw new Error("Missing the required parameter 'attachments' when calling apiV2InboxConversationsMessagesCreate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2InboxConversationsMessagesCreate");
      }

      let pathParams = {
        'conversation': conversation
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'user': user,
        'read_date': readDate,
        'content': opts['content'],
        'created': created,
        'attachments': this.apiClient.buildCollectionParam(attachments, 'csv'),
        'uuid': uuid
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Message;
      return this.apiClient.callApi(
        '/api/v2/inbox/conversations/{conversation}/messages/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2MobileVersionRetrieve operation.
     * @callback module:api/ApiApi~apiV2MobileVersionRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MinimumAppVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of the last required APP Version for a platform.
     * @param {String} platform 
     * @param {module:api/ApiApi~apiV2MobileVersionRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MinimumAppVersion}
     */
    apiV2MobileVersionRetrieve(platform, callback) {
      let postBody = null;
      // verify the required parameter 'platform' is set
      if (platform === undefined || platform === null) {
        throw new Error("Missing the required parameter 'platform' when calling apiV2MobileVersionRetrieve");
      }

      let pathParams = {
        'platform': platform
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MinimumAppVersion;
      return this.apiClient.callApi(
        '/api/v2/mobile/{platform}/version/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PlatformSettingsList operation.
     * @callback module:api/ApiApi~apiV2PlatformSettingsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NucoroSetting>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ApiApi~apiV2PlatformSettingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NucoroSetting>}
     */
    apiV2PlatformSettingsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NucoroSetting];
      return this.apiClient.callApi(
        '/api/v2/platform/settings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortalCountriesList operation.
     * @callback module:api/ApiApi~apiV2PortalCountriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedCountryListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of countries
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2PortalCountriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedCountryListList}
     */
    apiV2PortalCountriesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedCountryListList;
      return this.apiClient.callApi(
        '/api/v2/portal/countries/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortalSettingsRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortalSettingsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortalSettingValueList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ApiApi~apiV2PortalSettingsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortalSettingValueList}
     */
    apiV2PortalSettingsRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth', 'cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortalSettingValueList;
      return this.apiClient.callApi(
        '/api/v2/portal/settings/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortalTosCurrentRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortalTosCurrentRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tos} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the current ToS for the Portal
     * @param {module:api/ApiApi~apiV2PortalTosCurrentRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tos}
     */
    apiV2PortalTosCurrentRetrieve(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tos;
      return this.apiClient.callApi(
        '/api/v2/portal/tos/current/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortalTosList operation.
     * @callback module:api/ApiApi~apiV2PortalTosListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedTosList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all ToS for the current Portal
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2PortalTosListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedTosList}
     */
    apiV2PortalTosList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedTosList;
      return this.apiClient.callApi(
        '/api/v2/portal/tos/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortalTosRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortalTosRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tos} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific ToS
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortalTosRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tos}
     */
    apiV2PortalTosRetrieve(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortalTosRetrieve");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tos;
      return this.apiClient.callApi(
        '/api/v2/portal/tos/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosActivitiesList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosActivitiesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedFeedActivityListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Array.<module:model/String>} opts.target 
     * @param {module:api/ApiApi~apiV2PortfoliosActivitiesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedFeedActivityListList}
     */
    apiV2PortfoliosActivitiesList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosActivitiesList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'target': this.apiClient.buildCollectionParam(opts['target'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedFeedActivityListList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/activities/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosActivitiesRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosActivitiesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedActivityList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosActivitiesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedActivityList}
     */
    apiV2PortfoliosActivitiesRetrieve(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosActivitiesRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosActivitiesRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeedActivityList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/activities/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosAllocationsEndDay operation.
     * @callback module:api/ApiApi~apiV2PortfoliosAllocationsEndDayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {module:api/ApiApi~apiV2PortfoliosAllocationsEndDayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationList}
     */
    apiV2PortfoliosAllocationsEndDay(portfolioUuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsEndDay");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllocationList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosAllocationsEndDayByDateRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosAllocationsEndDayByDateRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} allocationDate 
     * @param {String} portfolioUuid 
     * @param {module:api/ApiApi~apiV2PortfoliosAllocationsEndDayByDateRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationDetail}
     */
    apiV2PortfoliosAllocationsEndDayByDateRetrieve(allocationDate, portfolioUuid, callback) {
      let postBody = null;
      // verify the required parameter 'allocationDate' is set
      if (allocationDate === undefined || allocationDate === null) {
        throw new Error("Missing the required parameter 'allocationDate' when calling apiV2PortfoliosAllocationsEndDayByDateRetrieve");
      }
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsEndDayByDateRetrieve");
      }

      let pathParams = {
        'allocation_date': allocationDate,
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllocationDetail;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/{allocation_date}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosAllocationsEndDayLatestRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosAllocationsEndDayLatestRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {module:api/ApiApi~apiV2PortfoliosAllocationsEndDayLatestRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationDetail}
     */
    apiV2PortfoliosAllocationsEndDayLatestRetrieve(portfolioUuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsEndDayLatestRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllocationDetail;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/latest/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosAllocationsHistoryRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosAllocationsHistoryRetrieveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allocations History for a given portfolio  It accepts two optional parameters, `date_to` and `date_from` to limit the daily allocations to a certain data range. If they are not given, all the allocations are returned.  ---  ## Parameters:   * **name**: `date_from`  * **description**: The initial date.  * **parameter type**: query param   * **name**: `date_from`  * **description**: The final date.  * **parameter type**: query param
     * @param {String} portfolio 
     * @param {module:api/ApiApi~apiV2PortfoliosAllocationsHistoryRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2PortfoliosAllocationsHistoryRetrieve(portfolio, callback) {
      let postBody = null;
      // verify the required parameter 'portfolio' is set
      if (portfolio === undefined || portfolio === null) {
        throw new Error("Missing the required parameter 'portfolio' when calling apiV2PortfoliosAllocationsHistoryRetrieve");
      }

      let pathParams = {
        'portfolio': portfolio
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio}/allocations/history/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosAllocationsIntradayLatestRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosAllocationsIntradayLatestRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrentAllocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {module:api/ApiApi~apiV2PortfoliosAllocationsIntradayLatestRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrentAllocation}
     */
    apiV2PortfoliosAllocationsIntradayLatestRetrieve(portfolioUuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsIntradayLatestRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrentAllocation;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/allocations/intraday/latest/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosAllocationsList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosAllocationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedAllocationListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Date} opts.valuationDateAfter 
     * @param {Date} opts.valuationDateBefore 
     * @param {module:api/ApiApi~apiV2PortfoliosAllocationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedAllocationListList}
     */
    apiV2PortfoliosAllocationsList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'valuation_date_after': opts['valuationDateAfter'],
        'valuation_date_before': opts['valuationDateBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedAllocationListList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/allocations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosAllocationsRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosAllocationsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllocationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this allocation.
     * @param {String} portfolioUuid 
     * @param {module:api/ApiApi~apiV2PortfoliosAllocationsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllocationList}
     */
    apiV2PortfoliosAllocationsRetrieve(id, portfolioUuid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV2PortfoliosAllocationsRetrieve");
      }
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosAllocationsRetrieve");
      }

      let pathParams = {
        'id': id,
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllocationList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/allocations/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosCreate operation.
     * @callback module:api/ApiApi~apiV2PortfoliosCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     * @param {String} portfolioUuid 
     * @param {module:model/PortfolioCreate} portfolioCreate 
     * @param {module:api/ApiApi~apiV2PortfoliosCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioCreate}
     */
    apiV2PortfoliosCreate(portfolioUuid, portfolioCreate, callback) {
      let postBody = portfolioCreate;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosCreate");
      }
      // verify the required parameter 'portfolioCreate' is set
      if (portfolioCreate === undefined || portfolioCreate === null) {
        throw new Error("Missing the required parameter 'portfolioCreate' when calling apiV2PortfoliosCreate");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PortfolioCreate;
      return this.apiClient.callApi(
        '/api/v2/portfolios/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosDepositsCreate operation.
     * @callback module:api/ApiApi~apiV2PortfoliosDepositsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DepositCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {module:model/DepositCreate} depositCreate 
     * @param {module:api/ApiApi~apiV2PortfoliosDepositsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DepositCreate}
     */
    apiV2PortfoliosDepositsCreate(portfolioUuid, depositCreate, callback) {
      let postBody = depositCreate;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDepositsCreate");
      }
      // verify the required parameter 'depositCreate' is set
      if (depositCreate === undefined || depositCreate === null) {
        throw new Error("Missing the required parameter 'depositCreate' when calling apiV2PortfoliosDepositsCreate");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = DepositCreate;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/deposits/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosDepositsDestroy operation.
     * @callback module:api/ApiApi~apiV2PortfoliosDepositsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosDepositsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2PortfoliosDepositsDestroy(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDepositsDestroy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosDepositsDestroy");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosDepositsList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosDepositsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDepositListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Array.<module:model/String>} opts.status 
     * @param {module:api/ApiApi~apiV2PortfoliosDepositsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDepositListList}
     */
    apiV2PortfoliosDepositsList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDepositsList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDepositListList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/deposits/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosDepositsRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosDepositsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DepositDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosDepositsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DepositDetail}
     */
    apiV2PortfoliosDepositsRetrieve(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDepositsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosDepositsRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DepositDetail;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosDestroy operation.
     * @callback module:api/ApiApi~apiV2PortfoliosDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2PortfoliosDestroy(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosDestroy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosDestroy");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPortfolioListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.client 
     * @param {String} opts.externalCustodianId 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {String} opts.name 
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Array.<module:model/String>} opts.ordering Ordering
     * @param {Number} opts.portfolioType 
     * @param {Array.<module:model/String>} opts.status 
     * @param {Date} opts.valuationDateAfter 
     * @param {Date} opts.valuationDateBefore 
     * @param {module:api/ApiApi~apiV2PortfoliosListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPortfolioListList}
     */
    apiV2PortfoliosList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'client': opts['client'],
        'external_custodian_id': opts['externalCustodianId'],
        'limit': opts['limit'],
        'name': opts['name'],
        'offset': opts['offset'],
        'ordering': this.apiClient.buildCollectionParam(opts['ordering'], 'csv'),
        'portfolio_type': opts['portfolioType'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'valuation_date_after': opts['valuationDateAfter'],
        'valuation_date_before': opts['valuationDateBefore']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPortfolioListList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosOrdersCreate operation.
     * @callback module:api/ApiApi~apiV2PortfoliosOrdersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {module:model/CreateOrder} createOrder 
     * @param {module:api/ApiApi~apiV2PortfoliosOrdersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOrder}
     */
    apiV2PortfoliosOrdersCreate(portfolioUuid, createOrder, callback) {
      let postBody = createOrder;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosOrdersCreate");
      }
      // verify the required parameter 'createOrder' is set
      if (createOrder === undefined || createOrder === null) {
        throw new Error("Missing the required parameter 'createOrder' when calling apiV2PortfoliosOrdersCreate");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CreateOrder;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/orders/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosOrdersDestroy operation.
     * @callback module:api/ApiApi~apiV2PortfoliosOrdersDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel or request cancellation to the broker
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosOrdersDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2PortfoliosOrdersDestroy(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosOrdersDestroy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosOrdersDestroy");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosOrdersList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosOrdersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedOrderListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.adviceExternalId 
     * @param {String} opts.asset 
     * @param {Date} opts.completedAfter 
     * @param {Date} opts.completedBefore 
     * @param {Object.<String, {String: Object}>} opts.extraData Additional order attributes for the specific portal
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {String} opts.portfolio 
     * @param {String} opts.status 
     * @param {module:api/ApiApi~apiV2PortfoliosOrdersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedOrderListList}
     */
    apiV2PortfoliosOrdersList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosOrdersList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'advice_external_id': opts['adviceExternalId'],
        'asset': opts['asset'],
        'completed_after': opts['completedAfter'],
        'completed_before': opts['completedBefore'],
        'extra_data': opts['extraData'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'portfolio': opts['portfolio'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedOrderListList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/orders/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosOrdersRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosOrdersRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosOrdersRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderList}
     */
    apiV2PortfoliosOrdersRetrieve(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosOrdersRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosOrdersRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrderList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosPartialUpdate operation.
     * @callback module:api/ApiApi~apiV2PortfoliosPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {Object} opts Optional parameters
     * @param {module:model/PatchedPortfolioUpdate} opts.patchedPortfolioUpdate 
     * @param {module:api/ApiApi~apiV2PortfoliosPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioUpdate}
     */
    apiV2PortfoliosPartialUpdate(portfolioUuid, uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['patchedPortfolioUpdate'];
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosPartialUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosPartialUpdate");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PortfolioUpdate;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{uuid}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosPerformanceMwrrList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosPerformanceMwrrListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPortfolioPerformanceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateAfter 
     * @param {Date} opts.dateBefore 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2PortfoliosPerformanceMwrrListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPortfolioPerformanceList}
     */
    apiV2PortfoliosPerformanceMwrrList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosPerformanceMwrrList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'date_after': opts['dateAfter'],
        'date_before': opts['dateBefore'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPortfolioPerformanceList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/performance/mwrr/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosPerformancePositionsList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosPerformancePositionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPortfolioPerformancePositionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2PortfoliosPerformancePositionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPortfolioPerformancePositionsList}
     */
    apiV2PortfoliosPerformancePositionsList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosPerformancePositionsList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPortfolioPerformancePositionsList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/performance/positions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosPerformanceTwrrList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosPerformanceTwrrListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPortfolioPerformanceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dateAfter 
     * @param {Date} opts.dateBefore 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2PortfoliosPerformanceTwrrListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPortfolioPerformanceList}
     */
    apiV2PortfoliosPerformanceTwrrList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosPerformanceTwrrList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'date_after': opts['dateAfter'],
        'date_before': opts['dateBefore'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPortfolioPerformanceList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/performance/twrr/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosPortfoliotypesList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosPortfoliotypesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPortfolioTypeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2PortfoliosPortfoliotypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPortfolioTypeList}
     */
    apiV2PortfoliosPortfoliotypesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPortfolioTypeList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/portfoliotypes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosPortfoliotypesRestrictionsList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosPortfoliotypesRestrictionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedBasePortfolioTypeRestrictionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} code 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2PortfoliosPortfoliotypesRestrictionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedBasePortfolioTypeRestrictionsList}
     */
    apiV2PortfoliosPortfoliotypesRestrictionsList(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling apiV2PortfoliosPortfoliotypesRestrictionsList");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedBasePortfolioTypeRestrictionsList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/portfoliotypes/{code}/restrictions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosRebalancesList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosRebalancesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedRebalanceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2PortfoliosRebalancesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedRebalanceList}
     */
    apiV2PortfoliosRebalancesList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosRebalancesList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedRebalanceList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/rebalances/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosRebalancesRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosRebalancesRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rebalance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosRebalancesRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rebalance}
     */
    apiV2PortfoliosRebalancesRetrieve(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosRebalancesRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosRebalancesRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Rebalance;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/rebalances/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosRestrictionsRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosRestrictionsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioTypeRestrictions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosRestrictionsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioTypeRestrictions}
     */
    apiV2PortfoliosRestrictionsRetrieve(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosRestrictionsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosRestrictionsRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfolioTypeRestrictions;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{uuid}/restrictions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioDetail}
     */
    apiV2PortfoliosRetrieve(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PortfolioDetail;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosUpdate operation.
     * @callback module:api/ApiApi~apiV2PortfoliosUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:model/PortfolioUpdate} portfolioUpdate 
     * @param {module:api/ApiApi~apiV2PortfoliosUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioUpdate}
     */
    apiV2PortfoliosUpdate(portfolioUuid, uuid, portfolioUpdate, callback) {
      let postBody = portfolioUpdate;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosUpdate");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosUpdate");
      }
      // verify the required parameter 'portfolioUpdate' is set
      if (portfolioUpdate === undefined || portfolioUpdate === null) {
        throw new Error("Missing the required parameter 'portfolioUpdate' when calling apiV2PortfoliosUpdate");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = PortfolioUpdate;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{uuid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosWithdrawalsCreate operation.
     * @callback module:api/ApiApi~apiV2PortfoliosWithdrawalsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvestorWithdrawalCreate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {module:model/InvestorWithdrawalCreate} investorWithdrawalCreate 
     * @param {module:api/ApiApi~apiV2PortfoliosWithdrawalsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvestorWithdrawalCreate}
     */
    apiV2PortfoliosWithdrawalsCreate(portfolioUuid, investorWithdrawalCreate, callback) {
      let postBody = investorWithdrawalCreate;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosWithdrawalsCreate");
      }
      // verify the required parameter 'investorWithdrawalCreate' is set
      if (investorWithdrawalCreate === undefined || investorWithdrawalCreate === null) {
        throw new Error("Missing the required parameter 'investorWithdrawalCreate' when calling apiV2PortfoliosWithdrawalsCreate");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = InvestorWithdrawalCreate;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/withdrawals/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosWithdrawalsDestroy operation.
     * @callback module:api/ApiApi~apiV2PortfoliosWithdrawalsDestroyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosWithdrawalsDestroyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2PortfoliosWithdrawalsDestroy(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosWithdrawalsDestroy");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosWithdrawalsDestroy");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosWithdrawalsList operation.
     * @callback module:api/ApiApi~apiV2PortfoliosWithdrawalsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedInvestorWithdrawalListList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {Array.<module:model/String>} opts.status 
     * @param {module:api/ApiApi~apiV2PortfoliosWithdrawalsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedInvestorWithdrawalListList}
     */
    apiV2PortfoliosWithdrawalsList(portfolioUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosWithdrawalsList");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedInvestorWithdrawalListList;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/withdrawals/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PortfoliosWithdrawalsRetrieve operation.
     * @callback module:api/ApiApi~apiV2PortfoliosWithdrawalsRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WithdrawalDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} portfolioUuid 
     * @param {String} uuid 
     * @param {module:api/ApiApi~apiV2PortfoliosWithdrawalsRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WithdrawalDetail}
     */
    apiV2PortfoliosWithdrawalsRetrieve(portfolioUuid, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'portfolioUuid' is set
      if (portfolioUuid === undefined || portfolioUuid === null) {
        throw new Error("Missing the required parameter 'portfolioUuid' when calling apiV2PortfoliosWithdrawalsRetrieve");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiV2PortfoliosWithdrawalsRetrieve");
      }

      let pathParams = {
        'portfolio_uuid': portfolioUuid,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WithdrawalDetail;
      return this.apiClient.callApi(
        '/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2RiskQuestionsList operation.
     * @callback module:api/ApiApi~apiV2RiskQuestionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedQuestionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiV2RiskQuestionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedQuestionList}
     */
    apiV2RiskQuestionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedQuestionList;
      return this.apiClient.callApi(
        '/api/v2/risk/questions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2VerificationsVerifierWebhookCreate operation.
     * @callback module:api/ApiApi~apiV2VerificationsVerifierWebhookCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} action 
     * @param {String} verifier 
     * @param {module:api/ApiApi~apiV2VerificationsVerifierWebhookCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2VerificationsVerifierWebhookCreate(action, verifier, callback) {
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling apiV2VerificationsVerifierWebhookCreate");
      }
      // verify the required parameter 'verifier' is set
      if (verifier === undefined || verifier === null) {
        throw new Error("Missing the required parameter 'verifier' when calling apiV2VerificationsVerifierWebhookCreate");
      }

      let pathParams = {
        'action': action,
        'verifier': verifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/verifications/verifier_webhook/{verifier}/{action}/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WebsocketAuthenticationTicketCreate operation.
     * @callback module:api/ApiApi~apiV2WebsocketAuthenticationTicketCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WebsocketAuthentication} websocketAuthentication 
     * @param {module:api/ApiApi~apiV2WebsocketAuthenticationTicketCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationResponse}
     */
    apiV2WebsocketAuthenticationTicketCreate(websocketAuthentication, callback) {
      let postBody = websocketAuthentication;
      // verify the required parameter 'websocketAuthentication' is set
      if (websocketAuthentication === undefined || websocketAuthentication === null) {
        throw new Error("Missing the required parameter 'websocketAuthentication' when calling apiV2WebsocketAuthenticationTicketCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AuthenticationResponse;
      return this.apiClient.callApi(
        '/api/v2/websocket/authentication/ticket/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WebsocketAuthorizeAssetCreate operation.
     * @callback module:api/ApiApi~apiV2WebsocketAuthorizeAssetCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WebsocketAuthentication} websocketAuthentication 
     * @param {module:api/ApiApi~apiV2WebsocketAuthorizeAssetCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    apiV2WebsocketAuthorizeAssetCreate(websocketAuthentication, callback) {
      let postBody = websocketAuthentication;
      // verify the required parameter 'websocketAuthentication' is set
      if (websocketAuthentication === undefined || websocketAuthentication === null) {
        throw new Error("Missing the required parameter 'websocketAuthentication' when calling apiV2WebsocketAuthorizeAssetCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/api/v2/websocket/authorize/asset/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WebsocketAuthorizeCreate operation.
     * @callback module:api/ApiApi~apiV2WebsocketAuthorizeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WebsocketAuthentication} websocketAuthentication 
     * @param {module:api/ApiApi~apiV2WebsocketAuthorizeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    apiV2WebsocketAuthorizeCreate(websocketAuthentication, callback) {
      let postBody = websocketAuthentication;
      // verify the required parameter 'websocketAuthentication' is set
      if (websocketAuthentication === undefined || websocketAuthentication === null) {
        throw new Error("Missing the required parameter 'websocketAuthentication' when calling apiV2WebsocketAuthorizeCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/api/v2/websocket/authorize/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WebsocketAuthorizePortfolioCreate operation.
     * @callback module:api/ApiApi~apiV2WebsocketAuthorizePortfolioCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/WebsocketAuthentication} websocketAuthentication 
     * @param {module:api/ApiApi~apiV2WebsocketAuthorizePortfolioCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    apiV2WebsocketAuthorizePortfolioCreate(websocketAuthentication, callback) {
      let postBody = websocketAuthentication;
      // verify the required parameter 'websocketAuthentication' is set
      if (websocketAuthentication === undefined || websocketAuthentication === null) {
        throw new Error("Missing the required parameter 'websocketAuthentication' when calling apiV2WebsocketAuthorizePortfolioCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/api/v2/websocket/authorize/portfolio/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WebsocketOnSubscribeCreate operation.
     * @callback module:api/ApiApi~apiV2WebsocketOnSubscribeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Subscribe} subscribe 
     * @param {module:api/ApiApi~apiV2WebsocketOnSubscribeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscribe}
     */
    apiV2WebsocketOnSubscribeCreate(subscribe, callback) {
      let postBody = subscribe;
      // verify the required parameter 'subscribe' is set
      if (subscribe === undefined || subscribe === null) {
        throw new Error("Missing the required parameter 'subscribe' when calling apiV2WebsocketOnSubscribeCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Subscribe;
      return this.apiClient.callApi(
        '/api/v2/websocket/on_subscribe/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2WebsocketOnUnsubscribeCreate operation.
     * @callback module:api/ApiApi~apiV2WebsocketOnUnsubscribeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Unsubscribe} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Unsubscribe} unsubscribe 
     * @param {module:api/ApiApi~apiV2WebsocketOnUnsubscribeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Unsubscribe}
     */
    apiV2WebsocketOnUnsubscribeCreate(unsubscribe, callback) {
      let postBody = unsubscribe;
      // verify the required parameter 'unsubscribe' is set
      if (unsubscribe === undefined || unsubscribe === null) {
        throw new Error("Missing the required parameter 'unsubscribe' when calling apiV2WebsocketOnUnsubscribeCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['cookieAuth', 'jwtAuth', 'tokenAuth'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Unsubscribe;
      return this.apiClient.callApi(
        '/api/v2/websocket/on_unsubscribe/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
