/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ValueUnitEnum the model 'ValueUnitEnum'
type ValueUnitEnum string

// List of ValueUnitEnum
const (
	FIXED_AMOUNT ValueUnitEnum = "fixed_amount"
	PERCENTAGE ValueUnitEnum = "percentage"
)

var allowedValueUnitEnumEnumValues = []ValueUnitEnum{
	"fixed_amount",
	"percentage",
}

func (v *ValueUnitEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValueUnitEnum(value)
	for _, existing := range allowedValueUnitEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValueUnitEnum", value)
}

// NewValueUnitEnumFromValue returns a pointer to a valid ValueUnitEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValueUnitEnumFromValue(v string) (*ValueUnitEnum, error) {
	ev := ValueUnitEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValueUnitEnum: valid values are %v", v, allowedValueUnitEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValueUnitEnum) IsValid() bool {
	for _, existing := range allowedValueUnitEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValueUnitEnum value
func (v ValueUnitEnum) Ptr() *ValueUnitEnum {
	return &v
}

type NullableValueUnitEnum struct {
	value *ValueUnitEnum
	isSet bool
}

func (v NullableValueUnitEnum) Get() *ValueUnitEnum {
	return v.value
}

func (v *NullableValueUnitEnum) Set(val *ValueUnitEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableValueUnitEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableValueUnitEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueUnitEnum(val *ValueUnitEnum) *NullableValueUnitEnum {
	return &NullableValueUnitEnum{value: val, isSet: true}
}

func (v NullableValueUnitEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueUnitEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

