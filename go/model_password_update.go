/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PasswordUpdate struct for PasswordUpdate
type PasswordUpdate struct {
	OldPassword *string `json:"old_password,omitempty"`
	NewPassword string `json:"new_password"`
}

// NewPasswordUpdate instantiates a new PasswordUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordUpdate(newPassword string) *PasswordUpdate {
	this := PasswordUpdate{}
	this.NewPassword = newPassword
	return &this
}

// NewPasswordUpdateWithDefaults instantiates a new PasswordUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordUpdateWithDefaults() *PasswordUpdate {
	this := PasswordUpdate{}
	return &this
}

// GetOldPassword returns the OldPassword field value if set, zero value otherwise.
func (o *PasswordUpdate) GetOldPassword() string {
	if o == nil || o.OldPassword == nil {
		var ret string
		return ret
	}
	return *o.OldPassword
}

// GetOldPasswordOk returns a tuple with the OldPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordUpdate) GetOldPasswordOk() (*string, bool) {
	if o == nil || o.OldPassword == nil {
		return nil, false
	}
	return o.OldPassword, true
}

// HasOldPassword returns a boolean if a field has been set.
func (o *PasswordUpdate) HasOldPassword() bool {
	if o != nil && o.OldPassword != nil {
		return true
	}

	return false
}

// SetOldPassword gets a reference to the given string and assigns it to the OldPassword field.
func (o *PasswordUpdate) SetOldPassword(v string) {
	o.OldPassword = &v
}

// GetNewPassword returns the NewPassword field value
func (o *PasswordUpdate) GetNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value
// and a boolean to check if the value has been set.
func (o *PasswordUpdate) GetNewPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NewPassword, true
}

// SetNewPassword sets field value
func (o *PasswordUpdate) SetNewPassword(v string) {
	o.NewPassword = v
}

func (o PasswordUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OldPassword != nil {
		toSerialize["old_password"] = o.OldPassword
	}
	if true {
		toSerialize["new_password"] = o.NewPassword
	}
	return json.Marshal(toSerialize)
}

type NullablePasswordUpdate struct {
	value *PasswordUpdate
	isSet bool
}

func (v NullablePasswordUpdate) Get() *PasswordUpdate {
	return v.value
}

func (v *NullablePasswordUpdate) Set(val *PasswordUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordUpdate(val *PasswordUpdate) *NullablePasswordUpdate {
	return &NullablePasswordUpdate{value: val, isSet: true}
}

func (v NullablePasswordUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


