/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PatchedAssessment struct for PatchedAssessment
type PatchedAssessment struct {
	Uuid *string `json:"uuid,omitempty"`
	Completed NullableTime `json:"completed,omitempty"`
	Choices *[]RiskChoiceQuestionCode `json:"choices,omitempty"`
	Status *AssessmentStatusEnum `json:"status,omitempty"`
	RiskLevel *int32 `json:"risk_level,omitempty"`
	Created *time.Time `json:"created,omitempty"`
}

// NewPatchedAssessment instantiates a new PatchedAssessment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedAssessment() *PatchedAssessment {
	this := PatchedAssessment{}
	return &this
}

// NewPatchedAssessmentWithDefaults instantiates a new PatchedAssessment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedAssessmentWithDefaults() *PatchedAssessment {
	this := PatchedAssessment{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *PatchedAssessment) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAssessment) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *PatchedAssessment) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *PatchedAssessment) SetUuid(v string) {
	o.Uuid = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedAssessment) GetCompleted() time.Time {
	if o == nil || o.Completed.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Completed.Get()
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedAssessment) GetCompletedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Completed.Get(), o.Completed.IsSet()
}

// HasCompleted returns a boolean if a field has been set.
func (o *PatchedAssessment) HasCompleted() bool {
	if o != nil && o.Completed.IsSet() {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given NullableTime and assigns it to the Completed field.
func (o *PatchedAssessment) SetCompleted(v time.Time) {
	o.Completed.Set(&v)
}
// SetCompletedNil sets the value for Completed to be an explicit nil
func (o *PatchedAssessment) SetCompletedNil() {
	o.Completed.Set(nil)
}

// UnsetCompleted ensures that no value is present for Completed, not even an explicit nil
func (o *PatchedAssessment) UnsetCompleted() {
	o.Completed.Unset()
}

// GetChoices returns the Choices field value if set, zero value otherwise.
func (o *PatchedAssessment) GetChoices() []RiskChoiceQuestionCode {
	if o == nil || o.Choices == nil {
		var ret []RiskChoiceQuestionCode
		return ret
	}
	return *o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAssessment) GetChoicesOk() (*[]RiskChoiceQuestionCode, bool) {
	if o == nil || o.Choices == nil {
		return nil, false
	}
	return o.Choices, true
}

// HasChoices returns a boolean if a field has been set.
func (o *PatchedAssessment) HasChoices() bool {
	if o != nil && o.Choices != nil {
		return true
	}

	return false
}

// SetChoices gets a reference to the given []RiskChoiceQuestionCode and assigns it to the Choices field.
func (o *PatchedAssessment) SetChoices(v []RiskChoiceQuestionCode) {
	o.Choices = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PatchedAssessment) GetStatus() AssessmentStatusEnum {
	if o == nil || o.Status == nil {
		var ret AssessmentStatusEnum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAssessment) GetStatusOk() (*AssessmentStatusEnum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PatchedAssessment) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AssessmentStatusEnum and assigns it to the Status field.
func (o *PatchedAssessment) SetStatus(v AssessmentStatusEnum) {
	o.Status = &v
}

// GetRiskLevel returns the RiskLevel field value if set, zero value otherwise.
func (o *PatchedAssessment) GetRiskLevel() int32 {
	if o == nil || o.RiskLevel == nil {
		var ret int32
		return ret
	}
	return *o.RiskLevel
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAssessment) GetRiskLevelOk() (*int32, bool) {
	if o == nil || o.RiskLevel == nil {
		return nil, false
	}
	return o.RiskLevel, true
}

// HasRiskLevel returns a boolean if a field has been set.
func (o *PatchedAssessment) HasRiskLevel() bool {
	if o != nil && o.RiskLevel != nil {
		return true
	}

	return false
}

// SetRiskLevel gets a reference to the given int32 and assigns it to the RiskLevel field.
func (o *PatchedAssessment) SetRiskLevel(v int32) {
	o.RiskLevel = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *PatchedAssessment) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAssessment) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *PatchedAssessment) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *PatchedAssessment) SetCreated(v time.Time) {
	o.Created = &v
}

func (o PatchedAssessment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Completed.IsSet() {
		toSerialize["completed"] = o.Completed.Get()
	}
	if o.Choices != nil {
		toSerialize["choices"] = o.Choices
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.RiskLevel != nil {
		toSerialize["risk_level"] = o.RiskLevel
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedAssessment struct {
	value *PatchedAssessment
	isSet bool
}

func (v NullablePatchedAssessment) Get() *PatchedAssessment {
	return v.value
}

func (v *NullablePatchedAssessment) Set(val *PatchedAssessment) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedAssessment) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedAssessment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedAssessment(val *PatchedAssessment) *NullablePatchedAssessment {
	return &NullablePatchedAssessment{value: val, isSet: true}
}

func (v NullablePatchedAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedAssessment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


