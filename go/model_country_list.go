/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CountryList struct for CountryList
type CountryList struct {
	Code string `json:"code"`
	Iso3 string `json:"iso3"`
	Name string `json:"name"`
	LongName string `json:"long_name"`
	EeaCountry bool `json:"eea_country"`
}

// NewCountryList instantiates a new CountryList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryList(code string, iso3 string, name string, longName string, eeaCountry bool) *CountryList {
	this := CountryList{}
	this.Code = code
	this.Iso3 = iso3
	this.Name = name
	this.LongName = longName
	this.EeaCountry = eeaCountry
	return &this
}

// NewCountryListWithDefaults instantiates a new CountryList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryListWithDefaults() *CountryList {
	this := CountryList{}
	return &this
}

// GetCode returns the Code field value
func (o *CountryList) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CountryList) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CountryList) SetCode(v string) {
	o.Code = v
}

// GetIso3 returns the Iso3 field value
func (o *CountryList) GetIso3() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Iso3
}

// GetIso3Ok returns a tuple with the Iso3 field value
// and a boolean to check if the value has been set.
func (o *CountryList) GetIso3Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Iso3, true
}

// SetIso3 sets field value
func (o *CountryList) SetIso3(v string) {
	o.Iso3 = v
}

// GetName returns the Name field value
func (o *CountryList) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CountryList) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CountryList) SetName(v string) {
	o.Name = v
}

// GetLongName returns the LongName field value
func (o *CountryList) GetLongName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LongName
}

// GetLongNameOk returns a tuple with the LongName field value
// and a boolean to check if the value has been set.
func (o *CountryList) GetLongNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LongName, true
}

// SetLongName sets field value
func (o *CountryList) SetLongName(v string) {
	o.LongName = v
}

// GetEeaCountry returns the EeaCountry field value
func (o *CountryList) GetEeaCountry() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EeaCountry
}

// GetEeaCountryOk returns a tuple with the EeaCountry field value
// and a boolean to check if the value has been set.
func (o *CountryList) GetEeaCountryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EeaCountry, true
}

// SetEeaCountry sets field value
func (o *CountryList) SetEeaCountry(v bool) {
	o.EeaCountry = v
}

func (o CountryList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["iso3"] = o.Iso3
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["long_name"] = o.LongName
	}
	if true {
		toSerialize["eea_country"] = o.EeaCountry
	}
	return json.Marshal(toSerialize)
}

type NullableCountryList struct {
	value *CountryList
	isSet bool
}

func (v NullableCountryList) Get() *CountryList {
	return v.value
}

func (v *NullableCountryList) Set(val *CountryList) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryList) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryList(val *CountryList) *NullableCountryList {
	return &NullableCountryList{value: val, isSet: true}
}

func (v NullableCountryList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


