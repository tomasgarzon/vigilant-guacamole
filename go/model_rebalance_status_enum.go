/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RebalanceStatusEnum the model 'RebalanceStatusEnum'
type RebalanceStatusEnum string

// List of RebalanceStatusEnum
const (
	PENDING RebalanceStatusEnum = "PENDING"
	CREATED RebalanceStatusEnum = "CREATED"
	ADVICE_REQUESTED RebalanceStatusEnum = "ADVICE_REQUESTED"
	ADVICE_COMPLETED RebalanceStatusEnum = "ADVICE_COMPLETED"
	IN_PROCESS RebalanceStatusEnum = "IN_PROCESS"
	PROCESSING RebalanceStatusEnum = "PROCESSING"
	ORDERS_GENERATED RebalanceStatusEnum = "ORDERS_GENERATED"
	ORDERS_FILLED RebalanceStatusEnum = "ORDERS_FILLED"
	SELL_TRADES_GENERATED RebalanceStatusEnum = "SELL_TRADES_GENERATED"
	BUY_TRADES_GENERATED RebalanceStatusEnum = "BUY_TRADES_GENERATED"
	POSITIONS_SOLD RebalanceStatusEnum = "POSITIONS_SOLD"
	COMPLETED RebalanceStatusEnum = "COMPLETED"
	CANCELLED RebalanceStatusEnum = "CANCELLED"
	ERROR RebalanceStatusEnum = "ERROR"
)

var allowedRebalanceStatusEnumEnumValues = []RebalanceStatusEnum{
	"PENDING",
	"CREATED",
	"ADVICE_REQUESTED",
	"ADVICE_COMPLETED",
	"IN_PROCESS",
	"PROCESSING",
	"ORDERS_GENERATED",
	"ORDERS_FILLED",
	"SELL_TRADES_GENERATED",
	"BUY_TRADES_GENERATED",
	"POSITIONS_SOLD",
	"COMPLETED",
	"CANCELLED",
	"ERROR",
}

func (v *RebalanceStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RebalanceStatusEnum(value)
	for _, existing := range allowedRebalanceStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RebalanceStatusEnum", value)
}

// NewRebalanceStatusEnumFromValue returns a pointer to a valid RebalanceStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRebalanceStatusEnumFromValue(v string) (*RebalanceStatusEnum, error) {
	ev := RebalanceStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RebalanceStatusEnum: valid values are %v", v, allowedRebalanceStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RebalanceStatusEnum) IsValid() bool {
	for _, existing := range allowedRebalanceStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RebalanceStatusEnum value
func (v RebalanceStatusEnum) Ptr() *RebalanceStatusEnum {
	return &v
}

type NullableRebalanceStatusEnum struct {
	value *RebalanceStatusEnum
	isSet bool
}

func (v NullableRebalanceStatusEnum) Get() *RebalanceStatusEnum {
	return v.value
}

func (v *NullableRebalanceStatusEnum) Set(val *RebalanceStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRebalanceStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRebalanceStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebalanceStatusEnum(val *RebalanceStatusEnum) *NullableRebalanceStatusEnum {
	return &NullableRebalanceStatusEnum{value: val, isSet: true}
}

func (v NullableRebalanceStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebalanceStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

