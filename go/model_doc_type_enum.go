/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DocTypeEnum the model 'DocTypeEnum'
type DocTypeEnum string

// List of DocTypeEnum
const (
	ID_PERSONAL DocTypeEnum = "ID_PERSONAL"
	BANK_DETAILS DocTypeEnum = "BANK_DETAILS"
	EMPLOYMENT DocTypeEnum = "EMPLOYMENT"
	MARITAL_STATUS DocTypeEnum = "MARITAL_STATUS"
	PENSION DocTypeEnum = "PENSION"
	LEGAL DocTypeEnum = "LEGAL"
	TRANSFERS DocTypeEnum = "TRANSFERS"
	MEDICAL DocTypeEnum = "MEDICAL"
	CONTRACT DocTypeEnum = "CONTRACT"
	OTHERS DocTypeEnum = "OTHERS"
)

var allowedDocTypeEnumEnumValues = []DocTypeEnum{
	"ID_PERSONAL",
	"BANK_DETAILS",
	"EMPLOYMENT",
	"MARITAL_STATUS",
	"PENSION",
	"LEGAL",
	"TRANSFERS",
	"MEDICAL",
	"CONTRACT",
	"OTHERS",
}

func (v *DocTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DocTypeEnum(value)
	for _, existing := range allowedDocTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DocTypeEnum", value)
}

// NewDocTypeEnumFromValue returns a pointer to a valid DocTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDocTypeEnumFromValue(v string) (*DocTypeEnum, error) {
	ev := DocTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DocTypeEnum: valid values are %v", v, allowedDocTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DocTypeEnum) IsValid() bool {
	for _, existing := range allowedDocTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DocTypeEnum value
func (v DocTypeEnum) Ptr() *DocTypeEnum {
	return &v
}

type NullableDocTypeEnum struct {
	value *DocTypeEnum
	isSet bool
}

func (v NullableDocTypeEnum) Get() *DocTypeEnum {
	return v.value
}

func (v *NullableDocTypeEnum) Set(val *DocTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableDocTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableDocTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocTypeEnum(val *DocTypeEnum) *NullableDocTypeEnum {
	return &NullableDocTypeEnum{value: val, isSet: true}
}

func (v NullableDocTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

