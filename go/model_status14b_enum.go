/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Status14bEnum the model 'Status14bEnum'
type Status14bEnum string

// List of Status14bEnum
const (
	DRAFT Status14bEnum = "DRAFT"
	PENDING Status14bEnum = "PENDING"
	PROCESSING Status14bEnum = "PROCESSING"
	POSITIONS_SOLD Status14bEnum = "POSITIONS_SOLD"
	REQUESTED Status14bEnum = "REQUESTED"
	COMPLETED Status14bEnum = "COMPLETED"
	ERROR Status14bEnum = "ERROR"
	CANCELLED Status14bEnum = "CANCELLED"
)

var allowedStatus14bEnumEnumValues = []Status14bEnum{
	"DRAFT",
	"PENDING",
	"PROCESSING",
	"POSITIONS_SOLD",
	"REQUESTED",
	"COMPLETED",
	"ERROR",
	"CANCELLED",
}

func (v *Status14bEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status14bEnum(value)
	for _, existing := range allowedStatus14bEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status14bEnum", value)
}

// NewStatus14bEnumFromValue returns a pointer to a valid Status14bEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatus14bEnumFromValue(v string) (*Status14bEnum, error) {
	ev := Status14bEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status14bEnum: valid values are %v", v, allowedStatus14bEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status14bEnum) IsValid() bool {
	for _, existing := range allowedStatus14bEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Status14bEnum value
func (v Status14bEnum) Ptr() *Status14bEnum {
	return &v
}

type NullableStatus14bEnum struct {
	value *Status14bEnum
	isSet bool
}

func (v NullableStatus14bEnum) Get() *Status14bEnum {
	return v.value
}

func (v *NullableStatus14bEnum) Set(val *Status14bEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus14bEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus14bEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus14bEnum(val *Status14bEnum) *NullableStatus14bEnum {
	return &NullableStatus14bEnum{value: val, isSet: true}
}

func (v NullableStatus14bEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus14bEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

