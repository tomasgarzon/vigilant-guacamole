/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CreateOrderMethodEnum the model 'CreateOrderMethodEnum'
type CreateOrderMethodEnum string

// List of CreateOrderMethodEnum
const (
	MARKET CreateOrderMethodEnum = "MARKET"
	STOP CreateOrderMethodEnum = "STOP"
	LIMIT CreateOrderMethodEnum = "LIMIT"
)

var allowedCreateOrderMethodEnumEnumValues = []CreateOrderMethodEnum{
	"MARKET",
	"STOP",
	"LIMIT",
}

func (v *CreateOrderMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CreateOrderMethodEnum(value)
	for _, existing := range allowedCreateOrderMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CreateOrderMethodEnum", value)
}

// NewCreateOrderMethodEnumFromValue returns a pointer to a valid CreateOrderMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreateOrderMethodEnumFromValue(v string) (*CreateOrderMethodEnum, error) {
	ev := CreateOrderMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CreateOrderMethodEnum: valid values are %v", v, allowedCreateOrderMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreateOrderMethodEnum) IsValid() bool {
	for _, existing := range allowedCreateOrderMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreateOrderMethodEnum value
func (v CreateOrderMethodEnum) Ptr() *CreateOrderMethodEnum {
	return &v
}

type NullableCreateOrderMethodEnum struct {
	value *CreateOrderMethodEnum
	isSet bool
}

func (v NullableCreateOrderMethodEnum) Get() *CreateOrderMethodEnum {
	return v.value
}

func (v *NullableCreateOrderMethodEnum) Set(val *CreateOrderMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrderMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrderMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrderMethodEnum(val *CreateOrderMethodEnum) *NullableCreateOrderMethodEnum {
	return &NullableCreateOrderMethodEnum{value: val, isSet: true}
}

func (v NullableCreateOrderMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrderMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

