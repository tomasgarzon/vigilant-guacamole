/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PortfolioPerformance struct for PortfolioPerformance
type PortfolioPerformance struct {
	ValuationDate string `json:"valuation_date"`
	Percentage *float64 `json:"percentage,omitempty"`
	Performance *float64 `json:"performance,omitempty"`
}

// NewPortfolioPerformance instantiates a new PortfolioPerformance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortfolioPerformance(valuationDate string) *PortfolioPerformance {
	this := PortfolioPerformance{}
	this.ValuationDate = valuationDate
	var percentage float64 = 0.0
	this.Percentage = &percentage
	var performance float64 = 0.0
	this.Performance = &performance
	return &this
}

// NewPortfolioPerformanceWithDefaults instantiates a new PortfolioPerformance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortfolioPerformanceWithDefaults() *PortfolioPerformance {
	this := PortfolioPerformance{}
	var percentage float64 = 0.0
	this.Percentage = &percentage
	var performance float64 = 0.0
	this.Performance = &performance
	return &this
}

// GetValuationDate returns the ValuationDate field value
func (o *PortfolioPerformance) GetValuationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValuationDate
}

// GetValuationDateOk returns a tuple with the ValuationDate field value
// and a boolean to check if the value has been set.
func (o *PortfolioPerformance) GetValuationDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ValuationDate, true
}

// SetValuationDate sets field value
func (o *PortfolioPerformance) SetValuationDate(v string) {
	o.ValuationDate = v
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *PortfolioPerformance) GetPercentage() float64 {
	if o == nil || o.Percentage == nil {
		var ret float64
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioPerformance) GetPercentageOk() (*float64, bool) {
	if o == nil || o.Percentage == nil {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *PortfolioPerformance) HasPercentage() bool {
	if o != nil && o.Percentage != nil {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given float64 and assigns it to the Percentage field.
func (o *PortfolioPerformance) SetPercentage(v float64) {
	o.Percentage = &v
}

// GetPerformance returns the Performance field value if set, zero value otherwise.
func (o *PortfolioPerformance) GetPerformance() float64 {
	if o == nil || o.Performance == nil {
		var ret float64
		return ret
	}
	return *o.Performance
}

// GetPerformanceOk returns a tuple with the Performance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioPerformance) GetPerformanceOk() (*float64, bool) {
	if o == nil || o.Performance == nil {
		return nil, false
	}
	return o.Performance, true
}

// HasPerformance returns a boolean if a field has been set.
func (o *PortfolioPerformance) HasPerformance() bool {
	if o != nil && o.Performance != nil {
		return true
	}

	return false
}

// SetPerformance gets a reference to the given float64 and assigns it to the Performance field.
func (o *PortfolioPerformance) SetPerformance(v float64) {
	o.Performance = &v
}

func (o PortfolioPerformance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["valuation_date"] = o.ValuationDate
	}
	if o.Percentage != nil {
		toSerialize["percentage"] = o.Percentage
	}
	if o.Performance != nil {
		toSerialize["performance"] = o.Performance
	}
	return json.Marshal(toSerialize)
}

type NullablePortfolioPerformance struct {
	value *PortfolioPerformance
	isSet bool
}

func (v NullablePortfolioPerformance) Get() *PortfolioPerformance {
	return v.value
}

func (v *NullablePortfolioPerformance) Set(val *PortfolioPerformance) {
	v.value = val
	v.isSet = true
}

func (v NullablePortfolioPerformance) IsSet() bool {
	return v.isSet
}

func (v *NullablePortfolioPerformance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortfolioPerformance(val *PortfolioPerformance) *NullablePortfolioPerformance {
	return &NullablePortfolioPerformance{value: val, isSet: true}
}

func (v NullablePortfolioPerformance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortfolioPerformance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


