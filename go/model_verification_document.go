/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VerificationDocument A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type VerificationDocument struct {
	Uuid string `json:"uuid"`
	DocumentType DocumentTypeEnum `json:"document_type"`
	DocumentFront string `json:"document_front"`
	DocumentBack string `json:"document_back"`
}

// NewVerificationDocument instantiates a new VerificationDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationDocument(uuid string, documentType DocumentTypeEnum, documentFront string, documentBack string) *VerificationDocument {
	this := VerificationDocument{}
	this.Uuid = uuid
	this.DocumentType = documentType
	this.DocumentFront = documentFront
	this.DocumentBack = documentBack
	return &this
}

// NewVerificationDocumentWithDefaults instantiates a new VerificationDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationDocumentWithDefaults() *VerificationDocument {
	this := VerificationDocument{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *VerificationDocument) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *VerificationDocument) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *VerificationDocument) SetUuid(v string) {
	o.Uuid = v
}

// GetDocumentType returns the DocumentType field value
func (o *VerificationDocument) GetDocumentType() DocumentTypeEnum {
	if o == nil {
		var ret DocumentTypeEnum
		return ret
	}

	return o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value
// and a boolean to check if the value has been set.
func (o *VerificationDocument) GetDocumentTypeOk() (*DocumentTypeEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentType, true
}

// SetDocumentType sets field value
func (o *VerificationDocument) SetDocumentType(v DocumentTypeEnum) {
	o.DocumentType = v
}

// GetDocumentFront returns the DocumentFront field value
func (o *VerificationDocument) GetDocumentFront() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentFront
}

// GetDocumentFrontOk returns a tuple with the DocumentFront field value
// and a boolean to check if the value has been set.
func (o *VerificationDocument) GetDocumentFrontOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentFront, true
}

// SetDocumentFront sets field value
func (o *VerificationDocument) SetDocumentFront(v string) {
	o.DocumentFront = v
}

// GetDocumentBack returns the DocumentBack field value
func (o *VerificationDocument) GetDocumentBack() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentBack
}

// GetDocumentBackOk returns a tuple with the DocumentBack field value
// and a boolean to check if the value has been set.
func (o *VerificationDocument) GetDocumentBackOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentBack, true
}

// SetDocumentBack sets field value
func (o *VerificationDocument) SetDocumentBack(v string) {
	o.DocumentBack = v
}

func (o VerificationDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["document_type"] = o.DocumentType
	}
	if true {
		toSerialize["document_front"] = o.DocumentFront
	}
	if true {
		toSerialize["document_back"] = o.DocumentBack
	}
	return json.Marshal(toSerialize)
}

type NullableVerificationDocument struct {
	value *VerificationDocument
	isSet bool
}

func (v NullableVerificationDocument) Get() *VerificationDocument {
	return v.value
}

func (v *NullableVerificationDocument) Set(val *VerificationDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationDocument(val *VerificationDocument) *NullableVerificationDocument {
	return &NullableVerificationDocument{value: val, isSet: true}
}

func (v NullableVerificationDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


