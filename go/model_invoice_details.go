/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// InvoiceDetails A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type InvoiceDetails struct {
	Uuid string `json:"uuid"`
	// Invoice legal number
	Number NullableString `json:"number,omitempty"`
	Status *Status260Enum `json:"status,omitempty"`
	Created time.Time `json:"created"`
	// Beginning of charge period
	DateFrom NullableString `json:"date_from,omitempty"`
	// End of charge period
	DateTo NullableString `json:"date_to,omitempty"`
	Url string `json:"url"`
	Amount float64 `json:"amount"`
	Charges []string `json:"charges"`
}

// NewInvoiceDetails instantiates a new InvoiceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceDetails(uuid string, created time.Time, url string, amount float64, charges []string) *InvoiceDetails {
	this := InvoiceDetails{}
	this.Uuid = uuid
	this.Created = created
	this.Url = url
	this.Amount = amount
	this.Charges = charges
	return &this
}

// NewInvoiceDetailsWithDefaults instantiates a new InvoiceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceDetailsWithDefaults() *InvoiceDetails {
	this := InvoiceDetails{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *InvoiceDetails) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *InvoiceDetails) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *InvoiceDetails) SetUuid(v string) {
	o.Uuid = v
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceDetails) GetNumber() string {
	if o == nil || o.Number.Get() == nil {
		var ret string
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceDetails) GetNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *InvoiceDetails) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableString and assigns it to the Number field.
func (o *InvoiceDetails) SetNumber(v string) {
	o.Number.Set(&v)
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *InvoiceDetails) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *InvoiceDetails) UnsetNumber() {
	o.Number.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InvoiceDetails) GetStatus() Status260Enum {
	if o == nil || o.Status == nil {
		var ret Status260Enum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvoiceDetails) GetStatusOk() (*Status260Enum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InvoiceDetails) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status260Enum and assigns it to the Status field.
func (o *InvoiceDetails) SetStatus(v Status260Enum) {
	o.Status = &v
}

// GetCreated returns the Created field value
func (o *InvoiceDetails) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *InvoiceDetails) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *InvoiceDetails) SetCreated(v time.Time) {
	o.Created = v
}

// GetDateFrom returns the DateFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceDetails) GetDateFrom() string {
	if o == nil || o.DateFrom.Get() == nil {
		var ret string
		return ret
	}
	return *o.DateFrom.Get()
}

// GetDateFromOk returns a tuple with the DateFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceDetails) GetDateFromOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DateFrom.Get(), o.DateFrom.IsSet()
}

// HasDateFrom returns a boolean if a field has been set.
func (o *InvoiceDetails) HasDateFrom() bool {
	if o != nil && o.DateFrom.IsSet() {
		return true
	}

	return false
}

// SetDateFrom gets a reference to the given NullableString and assigns it to the DateFrom field.
func (o *InvoiceDetails) SetDateFrom(v string) {
	o.DateFrom.Set(&v)
}
// SetDateFromNil sets the value for DateFrom to be an explicit nil
func (o *InvoiceDetails) SetDateFromNil() {
	o.DateFrom.Set(nil)
}

// UnsetDateFrom ensures that no value is present for DateFrom, not even an explicit nil
func (o *InvoiceDetails) UnsetDateFrom() {
	o.DateFrom.Unset()
}

// GetDateTo returns the DateTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvoiceDetails) GetDateTo() string {
	if o == nil || o.DateTo.Get() == nil {
		var ret string
		return ret
	}
	return *o.DateTo.Get()
}

// GetDateToOk returns a tuple with the DateTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvoiceDetails) GetDateToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DateTo.Get(), o.DateTo.IsSet()
}

// HasDateTo returns a boolean if a field has been set.
func (o *InvoiceDetails) HasDateTo() bool {
	if o != nil && o.DateTo.IsSet() {
		return true
	}

	return false
}

// SetDateTo gets a reference to the given NullableString and assigns it to the DateTo field.
func (o *InvoiceDetails) SetDateTo(v string) {
	o.DateTo.Set(&v)
}
// SetDateToNil sets the value for DateTo to be an explicit nil
func (o *InvoiceDetails) SetDateToNil() {
	o.DateTo.Set(nil)
}

// UnsetDateTo ensures that no value is present for DateTo, not even an explicit nil
func (o *InvoiceDetails) UnsetDateTo() {
	o.DateTo.Unset()
}

// GetUrl returns the Url field value
func (o *InvoiceDetails) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *InvoiceDetails) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *InvoiceDetails) SetUrl(v string) {
	o.Url = v
}

// GetAmount returns the Amount field value
func (o *InvoiceDetails) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *InvoiceDetails) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *InvoiceDetails) SetAmount(v float64) {
	o.Amount = v
}

// GetCharges returns the Charges field value
func (o *InvoiceDetails) GetCharges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value
// and a boolean to check if the value has been set.
func (o *InvoiceDetails) GetChargesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Charges, true
}

// SetCharges sets field value
func (o *InvoiceDetails) SetCharges(v []string) {
	o.Charges = v
}

func (o InvoiceDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if o.DateFrom.IsSet() {
		toSerialize["date_from"] = o.DateFrom.Get()
	}
	if o.DateTo.IsSet() {
		toSerialize["date_to"] = o.DateTo.Get()
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["charges"] = o.Charges
	}
	return json.Marshal(toSerialize)
}

type NullableInvoiceDetails struct {
	value *InvoiceDetails
	isSet bool
}

func (v NullableInvoiceDetails) Get() *InvoiceDetails {
	return v.value
}

func (v *NullableInvoiceDetails) Set(val *InvoiceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceDetails(val *InvoiceDetails) *NullableInvoiceDetails {
	return &NullableInvoiceDetails{value: val, isSet: true}
}

func (v NullableInvoiceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


