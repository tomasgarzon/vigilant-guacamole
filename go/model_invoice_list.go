/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InvoiceList A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type InvoiceList struct {
	Uuid string `json:"uuid"`
	// Invoice legal number
	Number string `json:"number"`
	Status Status260Enum `json:"status"`
	// Beginning of charge period
	DateFrom string `json:"date_from"`
	// End of charge period
	DateTo string `json:"date_to"`
	Amount float64 `json:"amount"`
	Charges []string `json:"charges"`
}

// NewInvoiceList instantiates a new InvoiceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvoiceList(uuid string, number string, status Status260Enum, dateFrom string, dateTo string, amount float64, charges []string) *InvoiceList {
	this := InvoiceList{}
	this.Uuid = uuid
	this.Number = number
	this.Status = status
	this.DateFrom = dateFrom
	this.DateTo = dateTo
	this.Amount = amount
	this.Charges = charges
	return &this
}

// NewInvoiceListWithDefaults instantiates a new InvoiceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvoiceListWithDefaults() *InvoiceList {
	this := InvoiceList{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *InvoiceList) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *InvoiceList) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *InvoiceList) SetUuid(v string) {
	o.Uuid = v
}

// GetNumber returns the Number field value
func (o *InvoiceList) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *InvoiceList) GetNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *InvoiceList) SetNumber(v string) {
	o.Number = v
}

// GetStatus returns the Status field value
func (o *InvoiceList) GetStatus() Status260Enum {
	if o == nil {
		var ret Status260Enum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InvoiceList) GetStatusOk() (*Status260Enum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InvoiceList) SetStatus(v Status260Enum) {
	o.Status = v
}

// GetDateFrom returns the DateFrom field value
func (o *InvoiceList) GetDateFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value
// and a boolean to check if the value has been set.
func (o *InvoiceList) GetDateFromOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateFrom, true
}

// SetDateFrom sets field value
func (o *InvoiceList) SetDateFrom(v string) {
	o.DateFrom = v
}

// GetDateTo returns the DateTo field value
func (o *InvoiceList) GetDateTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value
// and a boolean to check if the value has been set.
func (o *InvoiceList) GetDateToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateTo, true
}

// SetDateTo sets field value
func (o *InvoiceList) SetDateTo(v string) {
	o.DateTo = v
}

// GetAmount returns the Amount field value
func (o *InvoiceList) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *InvoiceList) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *InvoiceList) SetAmount(v float64) {
	o.Amount = v
}

// GetCharges returns the Charges field value
func (o *InvoiceList) GetCharges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Charges
}

// GetChargesOk returns a tuple with the Charges field value
// and a boolean to check if the value has been set.
func (o *InvoiceList) GetChargesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Charges, true
}

// SetCharges sets field value
func (o *InvoiceList) SetCharges(v []string) {
	o.Charges = v
}

func (o InvoiceList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["number"] = o.Number
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["date_from"] = o.DateFrom
	}
	if true {
		toSerialize["date_to"] = o.DateTo
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["charges"] = o.Charges
	}
	return json.Marshal(toSerialize)
}

type NullableInvoiceList struct {
	value *InvoiceList
	isSet bool
}

func (v NullableInvoiceList) Get() *InvoiceList {
	return v.value
}

func (v *NullableInvoiceList) Set(val *InvoiceList) {
	v.value = val
	v.isSet = true
}

func (v NullableInvoiceList) IsSet() bool {
	return v.isSet
}

func (v *NullableInvoiceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvoiceList(val *InvoiceList) *NullableInvoiceList {
	return &NullableInvoiceList{value: val, isSet: true}
}

func (v NullableInvoiceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvoiceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


