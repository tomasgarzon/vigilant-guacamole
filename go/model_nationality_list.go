/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NationalityList A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type NationalityList struct {
	Uuid string `json:"uuid"`
	Country string `json:"country"`
	DocumentType *string `json:"document_type,omitempty"`
	DocumentNumber string `json:"document_number"`
}

// NewNationalityList instantiates a new NationalityList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNationalityList(uuid string, country string, documentNumber string) *NationalityList {
	this := NationalityList{}
	this.Uuid = uuid
	this.Country = country
	this.DocumentNumber = documentNumber
	return &this
}

// NewNationalityListWithDefaults instantiates a new NationalityList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNationalityListWithDefaults() *NationalityList {
	this := NationalityList{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *NationalityList) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *NationalityList) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *NationalityList) SetUuid(v string) {
	o.Uuid = v
}

// GetCountry returns the Country field value
func (o *NationalityList) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *NationalityList) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *NationalityList) SetCountry(v string) {
	o.Country = v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *NationalityList) GetDocumentType() string {
	if o == nil || o.DocumentType == nil {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NationalityList) GetDocumentTypeOk() (*string, bool) {
	if o == nil || o.DocumentType == nil {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *NationalityList) HasDocumentType() bool {
	if o != nil && o.DocumentType != nil {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *NationalityList) SetDocumentType(v string) {
	o.DocumentType = &v
}

// GetDocumentNumber returns the DocumentNumber field value
func (o *NationalityList) GetDocumentNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentNumber
}

// GetDocumentNumberOk returns a tuple with the DocumentNumber field value
// and a boolean to check if the value has been set.
func (o *NationalityList) GetDocumentNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentNumber, true
}

// SetDocumentNumber sets field value
func (o *NationalityList) SetDocumentNumber(v string) {
	o.DocumentNumber = v
}

func (o NationalityList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if o.DocumentType != nil {
		toSerialize["document_type"] = o.DocumentType
	}
	if true {
		toSerialize["document_number"] = o.DocumentNumber
	}
	return json.Marshal(toSerialize)
}

type NullableNationalityList struct {
	value *NationalityList
	isSet bool
}

func (v NullableNationalityList) Get() *NationalityList {
	return v.value
}

func (v *NullableNationalityList) Set(val *NationalityList) {
	v.value = val
	v.isSet = true
}

func (v NullableNationalityList) IsSet() bool {
	return v.isSet
}

func (v *NullableNationalityList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNationalityList(val *NationalityList) *NullableNationalityList {
	return &NullableNationalityList{value: val, isSet: true}
}

func (v NullableNationalityList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNationalityList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


