/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CoreCategoryGroup struct for CoreCategoryGroup
type CoreCategoryGroup struct {
	Uuid string `json:"uuid"`
	Code string `json:"code"`
	RiskLevel int32 `json:"risk_level"`
	Categories []Category `json:"categories"`
}

// NewCoreCategoryGroup instantiates a new CoreCategoryGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoreCategoryGroup(uuid string, code string, riskLevel int32, categories []Category) *CoreCategoryGroup {
	this := CoreCategoryGroup{}
	this.Uuid = uuid
	this.Code = code
	this.RiskLevel = riskLevel
	this.Categories = categories
	return &this
}

// NewCoreCategoryGroupWithDefaults instantiates a new CoreCategoryGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoreCategoryGroupWithDefaults() *CoreCategoryGroup {
	this := CoreCategoryGroup{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *CoreCategoryGroup) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *CoreCategoryGroup) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *CoreCategoryGroup) SetUuid(v string) {
	o.Uuid = v
}

// GetCode returns the Code field value
func (o *CoreCategoryGroup) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *CoreCategoryGroup) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *CoreCategoryGroup) SetCode(v string) {
	o.Code = v
}

// GetRiskLevel returns the RiskLevel field value
func (o *CoreCategoryGroup) GetRiskLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RiskLevel
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value
// and a boolean to check if the value has been set.
func (o *CoreCategoryGroup) GetRiskLevelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RiskLevel, true
}

// SetRiskLevel sets field value
func (o *CoreCategoryGroup) SetRiskLevel(v int32) {
	o.RiskLevel = v
}

// GetCategories returns the Categories field value
func (o *CoreCategoryGroup) GetCategories() []Category {
	if o == nil {
		var ret []Category
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *CoreCategoryGroup) GetCategoriesOk() (*[]Category, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Categories, true
}

// SetCategories sets field value
func (o *CoreCategoryGroup) SetCategories(v []Category) {
	o.Categories = v
}

func (o CoreCategoryGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["risk_level"] = o.RiskLevel
	}
	if true {
		toSerialize["categories"] = o.Categories
	}
	return json.Marshal(toSerialize)
}

type NullableCoreCategoryGroup struct {
	value *CoreCategoryGroup
	isSet bool
}

func (v NullableCoreCategoryGroup) Get() *CoreCategoryGroup {
	return v.value
}

func (v *NullableCoreCategoryGroup) Set(val *CoreCategoryGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCoreCategoryGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCoreCategoryGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoreCategoryGroup(val *CoreCategoryGroup) *NullableCoreCategoryGroup {
	return &NullableCoreCategoryGroup{value: val, isSet: true}
}

func (v NullableCoreCategoryGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoreCategoryGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


