/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AllocationByCode struct for AllocationByCode
type AllocationByCode struct {
	Code string `json:"code"`
	Name string `json:"name"`
	Balance float64 `json:"balance"`
	Weight float64 `json:"weight"`
}

// NewAllocationByCode instantiates a new AllocationByCode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationByCode(code string, name string, balance float64, weight float64) *AllocationByCode {
	this := AllocationByCode{}
	this.Code = code
	this.Name = name
	this.Balance = balance
	this.Weight = weight
	return &this
}

// NewAllocationByCodeWithDefaults instantiates a new AllocationByCode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationByCodeWithDefaults() *AllocationByCode {
	this := AllocationByCode{}
	return &this
}

// GetCode returns the Code field value
func (o *AllocationByCode) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *AllocationByCode) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *AllocationByCode) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *AllocationByCode) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AllocationByCode) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AllocationByCode) SetName(v string) {
	o.Name = v
}

// GetBalance returns the Balance field value
func (o *AllocationByCode) GetBalance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *AllocationByCode) GetBalanceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *AllocationByCode) SetBalance(v float64) {
	o.Balance = v
}

// GetWeight returns the Weight field value
func (o *AllocationByCode) GetWeight() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *AllocationByCode) GetWeightOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *AllocationByCode) SetWeight(v float64) {
	o.Weight = v
}

func (o AllocationByCode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["balance"] = o.Balance
	}
	if true {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableAllocationByCode struct {
	value *AllocationByCode
	isSet bool
}

func (v NullableAllocationByCode) Get() *AllocationByCode {
	return v.value
}

func (v *NullableAllocationByCode) Set(val *AllocationByCode) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationByCode) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationByCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationByCode(val *AllocationByCode) *NullableAllocationByCode {
	return &NullableAllocationByCode{value: val, isSet: true}
}

func (v NullableAllocationByCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationByCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


