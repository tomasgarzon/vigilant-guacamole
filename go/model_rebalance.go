/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Rebalance A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type Rebalance struct {
	Uuid string `json:"uuid"`
	Status RebalanceStatusEnum `json:"status"`
	// Cancelled reason
	Reason string `json:"reason"`
	BrokerOrders []string `json:"broker_orders"`
}

// NewRebalance instantiates a new Rebalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRebalance(uuid string, status RebalanceStatusEnum, reason string, brokerOrders []string) *Rebalance {
	this := Rebalance{}
	this.Uuid = uuid
	this.Status = status
	this.Reason = reason
	this.BrokerOrders = brokerOrders
	return &this
}

// NewRebalanceWithDefaults instantiates a new Rebalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRebalanceWithDefaults() *Rebalance {
	this := Rebalance{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *Rebalance) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Rebalance) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Rebalance) SetUuid(v string) {
	o.Uuid = v
}

// GetStatus returns the Status field value
func (o *Rebalance) GetStatus() RebalanceStatusEnum {
	if o == nil {
		var ret RebalanceStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Rebalance) GetStatusOk() (*RebalanceStatusEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Rebalance) SetStatus(v RebalanceStatusEnum) {
	o.Status = v
}

// GetReason returns the Reason field value
func (o *Rebalance) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *Rebalance) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *Rebalance) SetReason(v string) {
	o.Reason = v
}

// GetBrokerOrders returns the BrokerOrders field value
func (o *Rebalance) GetBrokerOrders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BrokerOrders
}

// GetBrokerOrdersOk returns a tuple with the BrokerOrders field value
// and a boolean to check if the value has been set.
func (o *Rebalance) GetBrokerOrdersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BrokerOrders, true
}

// SetBrokerOrders sets field value
func (o *Rebalance) SetBrokerOrders(v []string) {
	o.BrokerOrders = v
}

func (o Rebalance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["broker_orders"] = o.BrokerOrders
	}
	return json.Marshal(toSerialize)
}

type NullableRebalance struct {
	value *Rebalance
	isSet bool
}

func (v NullableRebalance) Get() *Rebalance {
	return v.value
}

func (v *NullableRebalance) Set(val *Rebalance) {
	v.value = val
	v.isSet = true
}

func (v NullableRebalance) IsSet() bool {
	return v.isSet
}

func (v *NullableRebalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebalance(val *Rebalance) *NullableRebalance {
	return &NullableRebalance{value: val, isSet: true}
}

func (v NullableRebalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


