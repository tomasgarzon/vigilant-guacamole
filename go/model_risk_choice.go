/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// RiskChoice struct for RiskChoice
type RiskChoice struct {
	Code string `json:"code"`
	Order int32 `json:"order"`
	Description string `json:"description"`
	Created time.Time `json:"created"`
}

// NewRiskChoice instantiates a new RiskChoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskChoice(code string, order int32, description string, created time.Time) *RiskChoice {
	this := RiskChoice{}
	this.Code = code
	this.Order = order
	this.Description = description
	this.Created = created
	return &this
}

// NewRiskChoiceWithDefaults instantiates a new RiskChoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskChoiceWithDefaults() *RiskChoice {
	this := RiskChoice{}
	return &this
}

// GetCode returns the Code field value
func (o *RiskChoice) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *RiskChoice) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *RiskChoice) SetCode(v string) {
	o.Code = v
}

// GetOrder returns the Order field value
func (o *RiskChoice) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *RiskChoice) GetOrderOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *RiskChoice) SetOrder(v int32) {
	o.Order = v
}

// GetDescription returns the Description field value
func (o *RiskChoice) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *RiskChoice) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *RiskChoice) SetDescription(v string) {
	o.Description = v
}

// GetCreated returns the Created field value
func (o *RiskChoice) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *RiskChoice) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *RiskChoice) SetCreated(v time.Time) {
	o.Created = v
}

func (o RiskChoice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["order"] = o.Order
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["created"] = o.Created
	}
	return json.Marshal(toSerialize)
}

type NullableRiskChoice struct {
	value *RiskChoice
	isSet bool
}

func (v NullableRiskChoice) Get() *RiskChoice {
	return v.value
}

func (v *NullableRiskChoice) Set(val *RiskChoice) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskChoice(val *RiskChoice) *NullableRiskChoice {
	return &NullableRiskChoice{value: val, isSet: true}
}

func (v NullableRiskChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


