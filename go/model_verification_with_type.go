/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// VerificationWithType struct for VerificationWithType
type VerificationWithType struct {
	Uuid string `json:"uuid"`
	VerifyType VerifyTypeEnum `json:"verify_type"`
	Status *StatusBd7Enum `json:"status,omitempty"`
	Result *OneOfResultEnumBlankEnum `json:"result,omitempty"`
	Created time.Time `json:"created"`
	Updated time.Time `json:"updated"`
	VerificationDocuments []VerificationDocumentCreate `json:"verification_documents"`
}

// NewVerificationWithType instantiates a new VerificationWithType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationWithType(uuid string, verifyType VerifyTypeEnum, created time.Time, updated time.Time, verificationDocuments []VerificationDocumentCreate) *VerificationWithType {
	this := VerificationWithType{}
	this.Uuid = uuid
	this.VerifyType = verifyType
	this.Created = created
	this.Updated = updated
	this.VerificationDocuments = verificationDocuments
	return &this
}

// NewVerificationWithTypeWithDefaults instantiates a new VerificationWithType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationWithTypeWithDefaults() *VerificationWithType {
	this := VerificationWithType{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *VerificationWithType) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *VerificationWithType) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *VerificationWithType) SetUuid(v string) {
	o.Uuid = v
}

// GetVerifyType returns the VerifyType field value
func (o *VerificationWithType) GetVerifyType() VerifyTypeEnum {
	if o == nil {
		var ret VerifyTypeEnum
		return ret
	}

	return o.VerifyType
}

// GetVerifyTypeOk returns a tuple with the VerifyType field value
// and a boolean to check if the value has been set.
func (o *VerificationWithType) GetVerifyTypeOk() (*VerifyTypeEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VerifyType, true
}

// SetVerifyType sets field value
func (o *VerificationWithType) SetVerifyType(v VerifyTypeEnum) {
	o.VerifyType = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VerificationWithType) GetStatus() StatusBd7Enum {
	if o == nil || o.Status == nil {
		var ret StatusBd7Enum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationWithType) GetStatusOk() (*StatusBd7Enum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VerificationWithType) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given StatusBd7Enum and assigns it to the Status field.
func (o *VerificationWithType) SetStatus(v StatusBd7Enum) {
	o.Status = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *VerificationWithType) GetResult() OneOfResultEnumBlankEnum {
	if o == nil || o.Result == nil {
		var ret OneOfResultEnumBlankEnum
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerificationWithType) GetResultOk() (*OneOfResultEnumBlankEnum, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *VerificationWithType) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given OneOfResultEnumBlankEnum and assigns it to the Result field.
func (o *VerificationWithType) SetResult(v OneOfResultEnumBlankEnum) {
	o.Result = &v
}

// GetCreated returns the Created field value
func (o *VerificationWithType) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *VerificationWithType) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *VerificationWithType) SetCreated(v time.Time) {
	o.Created = v
}

// GetUpdated returns the Updated field value
func (o *VerificationWithType) GetUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *VerificationWithType) GetUpdatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *VerificationWithType) SetUpdated(v time.Time) {
	o.Updated = v
}

// GetVerificationDocuments returns the VerificationDocuments field value
// If the value is explicit nil, the zero value for []VerificationDocumentCreate will be returned
func (o *VerificationWithType) GetVerificationDocuments() []VerificationDocumentCreate {
	if o == nil {
		var ret []VerificationDocumentCreate
		return ret
	}

	return o.VerificationDocuments
}

// GetVerificationDocumentsOk returns a tuple with the VerificationDocuments field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VerificationWithType) GetVerificationDocumentsOk() (*[]VerificationDocumentCreate, bool) {
	if o == nil || o.VerificationDocuments == nil {
		return nil, false
	}
	return &o.VerificationDocuments, true
}

// SetVerificationDocuments sets field value
func (o *VerificationWithType) SetVerificationDocuments(v []VerificationDocumentCreate) {
	o.VerificationDocuments = v
}

func (o VerificationWithType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["verify_type"] = o.VerifyType
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	if o.VerificationDocuments != nil {
		toSerialize["verification_documents"] = o.VerificationDocuments
	}
	return json.Marshal(toSerialize)
}

type NullableVerificationWithType struct {
	value *VerificationWithType
	isSet bool
}

func (v NullableVerificationWithType) Get() *VerificationWithType {
	return v.value
}

func (v *NullableVerificationWithType) Set(val *VerificationWithType) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationWithType) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationWithType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationWithType(val *VerificationWithType) *NullableVerificationWithType {
	return &NullableVerificationWithType{value: val, isSet: true}
}

func (v NullableVerificationWithType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationWithType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


