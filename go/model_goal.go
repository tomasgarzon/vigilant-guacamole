/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Goal struct for Goal
type Goal struct {
	Uuid string `json:"uuid"`
	Name string `json:"name"`
	Portfolio NullableString `json:"portfolio,omitempty"`
	// Desired amount needed to fulfill the goal
	GoalAmount float64 `json:"goal_amount"`
	// Due date to reach the goal.
	Deadline string `json:"deadline"`
	// Initial deposit amount to start from. No sense to start by 0
	InitialAmount float64 `json:"initial_amount"`
	RecurringAmount NullableFloat64 `json:"recurring_amount,omitempty"`
	RiskLevel int32 `json:"risk_level"`
	Created time.Time `json:"created"`
}

// NewGoal instantiates a new Goal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoal(uuid string, name string, goalAmount float64, deadline string, initialAmount float64, riskLevel int32, created time.Time) *Goal {
	this := Goal{}
	this.Uuid = uuid
	this.Name = name
	this.GoalAmount = goalAmount
	this.Deadline = deadline
	this.InitialAmount = initialAmount
	this.RiskLevel = riskLevel
	this.Created = created
	return &this
}

// NewGoalWithDefaults instantiates a new Goal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoalWithDefaults() *Goal {
	this := Goal{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *Goal) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Goal) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Goal) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *Goal) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Goal) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Goal) SetName(v string) {
	o.Name = v
}

// GetPortfolio returns the Portfolio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetPortfolio() string {
	if o == nil || o.Portfolio.Get() == nil {
		var ret string
		return ret
	}
	return *o.Portfolio.Get()
}

// GetPortfolioOk returns a tuple with the Portfolio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetPortfolioOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Portfolio.Get(), o.Portfolio.IsSet()
}

// HasPortfolio returns a boolean if a field has been set.
func (o *Goal) HasPortfolio() bool {
	if o != nil && o.Portfolio.IsSet() {
		return true
	}

	return false
}

// SetPortfolio gets a reference to the given NullableString and assigns it to the Portfolio field.
func (o *Goal) SetPortfolio(v string) {
	o.Portfolio.Set(&v)
}
// SetPortfolioNil sets the value for Portfolio to be an explicit nil
func (o *Goal) SetPortfolioNil() {
	o.Portfolio.Set(nil)
}

// UnsetPortfolio ensures that no value is present for Portfolio, not even an explicit nil
func (o *Goal) UnsetPortfolio() {
	o.Portfolio.Unset()
}

// GetGoalAmount returns the GoalAmount field value
func (o *Goal) GetGoalAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.GoalAmount
}

// GetGoalAmountOk returns a tuple with the GoalAmount field value
// and a boolean to check if the value has been set.
func (o *Goal) GetGoalAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GoalAmount, true
}

// SetGoalAmount sets field value
func (o *Goal) SetGoalAmount(v float64) {
	o.GoalAmount = v
}

// GetDeadline returns the Deadline field value
func (o *Goal) GetDeadline() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Deadline
}

// GetDeadlineOk returns a tuple with the Deadline field value
// and a boolean to check if the value has been set.
func (o *Goal) GetDeadlineOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Deadline, true
}

// SetDeadline sets field value
func (o *Goal) SetDeadline(v string) {
	o.Deadline = v
}

// GetInitialAmount returns the InitialAmount field value
func (o *Goal) GetInitialAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.InitialAmount
}

// GetInitialAmountOk returns a tuple with the InitialAmount field value
// and a boolean to check if the value has been set.
func (o *Goal) GetInitialAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InitialAmount, true
}

// SetInitialAmount sets field value
func (o *Goal) SetInitialAmount(v float64) {
	o.InitialAmount = v
}

// GetRecurringAmount returns the RecurringAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Goal) GetRecurringAmount() float64 {
	if o == nil || o.RecurringAmount.Get() == nil {
		var ret float64
		return ret
	}
	return *o.RecurringAmount.Get()
}

// GetRecurringAmountOk returns a tuple with the RecurringAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Goal) GetRecurringAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecurringAmount.Get(), o.RecurringAmount.IsSet()
}

// HasRecurringAmount returns a boolean if a field has been set.
func (o *Goal) HasRecurringAmount() bool {
	if o != nil && o.RecurringAmount.IsSet() {
		return true
	}

	return false
}

// SetRecurringAmount gets a reference to the given NullableFloat64 and assigns it to the RecurringAmount field.
func (o *Goal) SetRecurringAmount(v float64) {
	o.RecurringAmount.Set(&v)
}
// SetRecurringAmountNil sets the value for RecurringAmount to be an explicit nil
func (o *Goal) SetRecurringAmountNil() {
	o.RecurringAmount.Set(nil)
}

// UnsetRecurringAmount ensures that no value is present for RecurringAmount, not even an explicit nil
func (o *Goal) UnsetRecurringAmount() {
	o.RecurringAmount.Unset()
}

// GetRiskLevel returns the RiskLevel field value
func (o *Goal) GetRiskLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RiskLevel
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value
// and a boolean to check if the value has been set.
func (o *Goal) GetRiskLevelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RiskLevel, true
}

// SetRiskLevel sets field value
func (o *Goal) SetRiskLevel(v int32) {
	o.RiskLevel = v
}

// GetCreated returns the Created field value
func (o *Goal) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Goal) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Goal) SetCreated(v time.Time) {
	o.Created = v
}

func (o Goal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Portfolio.IsSet() {
		toSerialize["portfolio"] = o.Portfolio.Get()
	}
	if true {
		toSerialize["goal_amount"] = o.GoalAmount
	}
	if true {
		toSerialize["deadline"] = o.Deadline
	}
	if true {
		toSerialize["initial_amount"] = o.InitialAmount
	}
	if o.RecurringAmount.IsSet() {
		toSerialize["recurring_amount"] = o.RecurringAmount.Get()
	}
	if true {
		toSerialize["risk_level"] = o.RiskLevel
	}
	if true {
		toSerialize["created"] = o.Created
	}
	return json.Marshal(toSerialize)
}

type NullableGoal struct {
	value *Goal
	isSet bool
}

func (v NullableGoal) Get() *Goal {
	return v.value
}

func (v *NullableGoal) Set(val *Goal) {
	v.value = val
	v.isSet = true
}

func (v NullableGoal) IsSet() bool {
	return v.isSet
}

func (v *NullableGoal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoal(val *Goal) *NullableGoal {
	return &NullableGoal{value: val, isSet: true}
}

func (v NullableGoal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


