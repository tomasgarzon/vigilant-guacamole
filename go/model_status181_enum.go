/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Status181Enum the model 'Status181Enum'
type Status181Enum string

// List of Status181Enum
const (
	GENERATING Status181Enum = "GENERATING"
	ERROR Status181Enum = "ERROR"
	COMPLETED Status181Enum = "COMPLETED"
)

var allowedStatus181EnumEnumValues = []Status181Enum{
	"GENERATING",
	"ERROR",
	"COMPLETED",
}

func (v *Status181Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status181Enum(value)
	for _, existing := range allowedStatus181EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status181Enum", value)
}

// NewStatus181EnumFromValue returns a pointer to a valid Status181Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatus181EnumFromValue(v string) (*Status181Enum, error) {
	ev := Status181Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status181Enum: valid values are %v", v, allowedStatus181EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status181Enum) IsValid() bool {
	for _, existing := range allowedStatus181EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Status181Enum value
func (v Status181Enum) Ptr() *Status181Enum {
	return &v
}

type NullableStatus181Enum struct {
	value *Status181Enum
	isSet bool
}

func (v NullableStatus181Enum) Get() *Status181Enum {
	return v.value
}

func (v *NullableStatus181Enum) Set(val *Status181Enum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus181Enum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus181Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus181Enum(val *Status181Enum) *NullableStatus181Enum {
	return &NullableStatus181Enum{value: val, isSet: true}
}

func (v NullableStatus181Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus181Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

