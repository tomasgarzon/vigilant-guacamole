/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Statement struct for Statement
type Statement struct {
	Uuid string `json:"uuid"`
	DateFrom string `json:"date_from"`
	DateTo string `json:"date_to"`
	Created time.Time `json:"created"`
	Status Status181Enum `json:"status"`
}

// NewStatement instantiates a new Statement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatement(uuid string, dateFrom string, dateTo string, created time.Time, status Status181Enum) *Statement {
	this := Statement{}
	this.Uuid = uuid
	this.DateFrom = dateFrom
	this.DateTo = dateTo
	this.Created = created
	this.Status = status
	return &this
}

// NewStatementWithDefaults instantiates a new Statement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementWithDefaults() *Statement {
	this := Statement{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *Statement) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Statement) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Statement) SetUuid(v string) {
	o.Uuid = v
}

// GetDateFrom returns the DateFrom field value
func (o *Statement) GetDateFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateFrom
}

// GetDateFromOk returns a tuple with the DateFrom field value
// and a boolean to check if the value has been set.
func (o *Statement) GetDateFromOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateFrom, true
}

// SetDateFrom sets field value
func (o *Statement) SetDateFrom(v string) {
	o.DateFrom = v
}

// GetDateTo returns the DateTo field value
func (o *Statement) GetDateTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateTo
}

// GetDateToOk returns a tuple with the DateTo field value
// and a boolean to check if the value has been set.
func (o *Statement) GetDateToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateTo, true
}

// SetDateTo sets field value
func (o *Statement) SetDateTo(v string) {
	o.DateTo = v
}

// GetCreated returns the Created field value
func (o *Statement) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Statement) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Statement) SetCreated(v time.Time) {
	o.Created = v
}

// GetStatus returns the Status field value
func (o *Statement) GetStatus() Status181Enum {
	if o == nil {
		var ret Status181Enum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Statement) GetStatusOk() (*Status181Enum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Statement) SetStatus(v Status181Enum) {
	o.Status = v
}

func (o Statement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["date_from"] = o.DateFrom
	}
	if true {
		toSerialize["date_to"] = o.DateTo
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableStatement struct {
	value *Statement
	isSet bool
}

func (v NullableStatement) Get() *Statement {
	return v.value
}

func (v *NullableStatement) Set(val *Statement) {
	v.value = val
	v.isSet = true
}

func (v NullableStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatement(val *Statement) *NullableStatement {
	return &NullableStatement{value: val, isSet: true}
}

func (v NullableStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


