/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// RiskAssessmentApiService RiskAssessmentApi service
type RiskAssessmentApiService service

type ApiClientRiskAssessmentCreateRequest struct {
	ctx _context.Context
	ApiService *RiskAssessmentApiService
	clientUuid string
	assessment *Assessment
}

func (r ApiClientRiskAssessmentCreateRequest) Assessment(assessment Assessment) ApiClientRiskAssessmentCreateRequest {
	r.assessment = &assessment
	return r
}

func (r ApiClientRiskAssessmentCreateRequest) Execute() (Assessment, *_nethttp.Response, error) {
	return r.ApiService.ClientRiskAssessmentCreateExecute(r)
}

/*
ClientRiskAssessmentCreate Method for ClientRiskAssessmentCreate

Create a risk assessment for a client

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientUuid
 @return ApiClientRiskAssessmentCreateRequest
*/
func (a *RiskAssessmentApiService) ClientRiskAssessmentCreate(ctx _context.Context, clientUuid string) ApiClientRiskAssessmentCreateRequest {
	return ApiClientRiskAssessmentCreateRequest{
		ApiService: a,
		ctx: ctx,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return Assessment
func (a *RiskAssessmentApiService) ClientRiskAssessmentCreateExecute(r ApiClientRiskAssessmentCreateRequest) (Assessment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Assessment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskAssessmentApiService.ClientRiskAssessmentCreate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/clients/{client_uuid}/risk-assessments/"
	localVarPath = strings.Replace(localVarPath, "{"+"client_uuid"+"}", _neturl.PathEscape(parameterToString(r.clientUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.assessment == nil {
		return localVarReturnValue, nil, reportError("assessment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assessment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClientRiskAssessmentDeleteRequest struct {
	ctx _context.Context
	ApiService *RiskAssessmentApiService
	clientUuid string
	uuid string
}


func (r ApiClientRiskAssessmentDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ClientRiskAssessmentDeleteExecute(r)
}

/*
ClientRiskAssessmentDelete Method for ClientRiskAssessmentDelete

Delete a client risk assessment

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientUuid
 @param uuid
 @return ApiClientRiskAssessmentDeleteRequest
*/
func (a *RiskAssessmentApiService) ClientRiskAssessmentDelete(ctx _context.Context, clientUuid string, uuid string) ApiClientRiskAssessmentDeleteRequest {
	return ApiClientRiskAssessmentDeleteRequest{
		ApiService: a,
		ctx: ctx,
		clientUuid: clientUuid,
		uuid: uuid,
	}
}

// Execute executes the request
func (a *RiskAssessmentApiService) ClientRiskAssessmentDeleteExecute(r ApiClientRiskAssessmentDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskAssessmentApiService.ClientRiskAssessmentDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"client_uuid"+"}", _neturl.PathEscape(parameterToString(r.clientUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiClientRiskAssessmentListRequest struct {
	ctx _context.Context
	ApiService *RiskAssessmentApiService
	clientUuid string
	limit *int32
	offset *int32
	status *[]string
}

// Number of results to return per page.
func (r ApiClientRiskAssessmentListRequest) Limit(limit int32) ApiClientRiskAssessmentListRequest {
	r.limit = &limit
	return r
}
// The initial index from which to return the results.
func (r ApiClientRiskAssessmentListRequest) Offset(offset int32) ApiClientRiskAssessmentListRequest {
	r.offset = &offset
	return r
}
func (r ApiClientRiskAssessmentListRequest) Status(status []string) ApiClientRiskAssessmentListRequest {
	r.status = &status
	return r
}

func (r ApiClientRiskAssessmentListRequest) Execute() (PaginatedAssessmentList, *_nethttp.Response, error) {
	return r.ApiService.ClientRiskAssessmentListExecute(r)
}

/*
ClientRiskAssessmentList Method for ClientRiskAssessmentList

List Risk Assessment for a client

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientUuid
 @return ApiClientRiskAssessmentListRequest
*/
func (a *RiskAssessmentApiService) ClientRiskAssessmentList(ctx _context.Context, clientUuid string) ApiClientRiskAssessmentListRequest {
	return ApiClientRiskAssessmentListRequest{
		ApiService: a,
		ctx: ctx,
		clientUuid: clientUuid,
	}
}

// Execute executes the request
//  @return PaginatedAssessmentList
func (a *RiskAssessmentApiService) ClientRiskAssessmentListExecute(r ApiClientRiskAssessmentListRequest) (PaginatedAssessmentList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PaginatedAssessmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskAssessmentApiService.ClientRiskAssessmentList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/clients/{client_uuid}/risk-assessments/"
	localVarPath = strings.Replace(localVarPath, "{"+"client_uuid"+"}", _neturl.PathEscape(parameterToString(r.clientUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClientRiskAssessmentPartialUpdateRequest struct {
	ctx _context.Context
	ApiService *RiskAssessmentApiService
	clientUuid string
	uuid string
	patchedAssessment *PatchedAssessment
}

func (r ApiClientRiskAssessmentPartialUpdateRequest) PatchedAssessment(patchedAssessment PatchedAssessment) ApiClientRiskAssessmentPartialUpdateRequest {
	r.patchedAssessment = &patchedAssessment
	return r
}

func (r ApiClientRiskAssessmentPartialUpdateRequest) Execute() (Assessment, *_nethttp.Response, error) {
	return r.ApiService.ClientRiskAssessmentPartialUpdateExecute(r)
}

/*
ClientRiskAssessmentPartialUpdate Method for ClientRiskAssessmentPartialUpdate

Partial Update a client risk assessment

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientUuid
 @param uuid
 @return ApiClientRiskAssessmentPartialUpdateRequest
*/
func (a *RiskAssessmentApiService) ClientRiskAssessmentPartialUpdate(ctx _context.Context, clientUuid string, uuid string) ApiClientRiskAssessmentPartialUpdateRequest {
	return ApiClientRiskAssessmentPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		clientUuid: clientUuid,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return Assessment
func (a *RiskAssessmentApiService) ClientRiskAssessmentPartialUpdateExecute(r ApiClientRiskAssessmentPartialUpdateRequest) (Assessment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Assessment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskAssessmentApiService.ClientRiskAssessmentPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"client_uuid"+"}", _neturl.PathEscape(parameterToString(r.clientUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedAssessment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiClientRiskAssessmentRetrieveRequest struct {
	ctx _context.Context
	ApiService *RiskAssessmentApiService
	clientUuid string
	uuid string
}


func (r ApiClientRiskAssessmentRetrieveRequest) Execute() (Assessment, *_nethttp.Response, error) {
	return r.ApiService.ClientRiskAssessmentRetrieveExecute(r)
}

/*
ClientRiskAssessmentRetrieve Method for ClientRiskAssessmentRetrieve

Retrieve a client risk assessment

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clientUuid
 @param uuid
 @return ApiClientRiskAssessmentRetrieveRequest
*/
func (a *RiskAssessmentApiService) ClientRiskAssessmentRetrieve(ctx _context.Context, clientUuid string, uuid string) ApiClientRiskAssessmentRetrieveRequest {
	return ApiClientRiskAssessmentRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		clientUuid: clientUuid,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return Assessment
func (a *RiskAssessmentApiService) ClientRiskAssessmentRetrieveExecute(r ApiClientRiskAssessmentRetrieveRequest) (Assessment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Assessment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RiskAssessmentApiService.ClientRiskAssessmentRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"client_uuid"+"}", _neturl.PathEscape(parameterToString(r.clientUuid, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
