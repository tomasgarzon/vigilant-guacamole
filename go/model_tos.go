/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Tos struct for Tos
type Tos struct {
	Uuid string `json:"uuid"`
	Version string `json:"version"`
	Content string `json:"content"`
	Published *string `json:"published,omitempty"`
	PreviousTosUuid string `json:"previous_tos_uuid"`
	NextTosUuid string `json:"next_tos_uuid"`
}

// NewTos instantiates a new Tos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTos(uuid string, version string, content string, previousTosUuid string, nextTosUuid string) *Tos {
	this := Tos{}
	this.Uuid = uuid
	this.Version = version
	this.Content = content
	this.PreviousTosUuid = previousTosUuid
	this.NextTosUuid = nextTosUuid
	return &this
}

// NewTosWithDefaults instantiates a new Tos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTosWithDefaults() *Tos {
	this := Tos{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *Tos) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Tos) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Tos) SetUuid(v string) {
	o.Uuid = v
}

// GetVersion returns the Version field value
func (o *Tos) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Tos) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Tos) SetVersion(v string) {
	o.Version = v
}

// GetContent returns the Content field value
func (o *Tos) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Tos) GetContentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Tos) SetContent(v string) {
	o.Content = v
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *Tos) GetPublished() string {
	if o == nil || o.Published == nil {
		var ret string
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tos) GetPublishedOk() (*string, bool) {
	if o == nil || o.Published == nil {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *Tos) HasPublished() bool {
	if o != nil && o.Published != nil {
		return true
	}

	return false
}

// SetPublished gets a reference to the given string and assigns it to the Published field.
func (o *Tos) SetPublished(v string) {
	o.Published = &v
}

// GetPreviousTosUuid returns the PreviousTosUuid field value
func (o *Tos) GetPreviousTosUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviousTosUuid
}

// GetPreviousTosUuidOk returns a tuple with the PreviousTosUuid field value
// and a boolean to check if the value has been set.
func (o *Tos) GetPreviousTosUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PreviousTosUuid, true
}

// SetPreviousTosUuid sets field value
func (o *Tos) SetPreviousTosUuid(v string) {
	o.PreviousTosUuid = v
}

// GetNextTosUuid returns the NextTosUuid field value
func (o *Tos) GetNextTosUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextTosUuid
}

// GetNextTosUuidOk returns a tuple with the NextTosUuid field value
// and a boolean to check if the value has been set.
func (o *Tos) GetNextTosUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NextTosUuid, true
}

// SetNextTosUuid sets field value
func (o *Tos) SetNextTosUuid(v string) {
	o.NextTosUuid = v
}

func (o Tos) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["content"] = o.Content
	}
	if o.Published != nil {
		toSerialize["published"] = o.Published
	}
	if true {
		toSerialize["previous_tos_uuid"] = o.PreviousTosUuid
	}
	if true {
		toSerialize["next_tos_uuid"] = o.NextTosUuid
	}
	return json.Marshal(toSerialize)
}

type NullableTos struct {
	value *Tos
	isSet bool
}

func (v NullableTos) Get() *Tos {
	return v.value
}

func (v *NullableTos) Set(val *Tos) {
	v.value = val
	v.isSet = true
}

func (v NullableTos) IsSet() bool {
	return v.isSet
}

func (v *NullableTos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTos(val *Tos) *NullableTos {
	return &NullableTos{value: val, isSet: true}
}

func (v NullableTos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


