/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FeeTypeEnum the model 'FeeTypeEnum'
type FeeTypeEnum string

// List of FeeTypeEnum
const (
	PORTAL_SERVICE FeeTypeEnum = "portal_service"
	SELLER_FEE FeeTypeEnum = "seller_fee"
)

var allowedFeeTypeEnumEnumValues = []FeeTypeEnum{
	"portal_service",
	"seller_fee",
}

func (v *FeeTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeeTypeEnum(value)
	for _, existing := range allowedFeeTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeeTypeEnum", value)
}

// NewFeeTypeEnumFromValue returns a pointer to a valid FeeTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeeTypeEnumFromValue(v string) (*FeeTypeEnum, error) {
	ev := FeeTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeeTypeEnum: valid values are %v", v, allowedFeeTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeeTypeEnum) IsValid() bool {
	for _, existing := range allowedFeeTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeeTypeEnum value
func (v FeeTypeEnum) Ptr() *FeeTypeEnum {
	return &v
}

type NullableFeeTypeEnum struct {
	value *FeeTypeEnum
	isSet bool
}

func (v NullableFeeTypeEnum) Get() *FeeTypeEnum {
	return v.value
}

func (v *NullableFeeTypeEnum) Set(val *FeeTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFeeTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFeeTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeeTypeEnum(val *FeeTypeEnum) *NullableFeeTypeEnum {
	return &NullableFeeTypeEnum{value: val, isSet: true}
}

func (v NullableFeeTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeeTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

