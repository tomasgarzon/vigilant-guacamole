/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// RelationShipManagerApiService RelationShipManagerApi service
type RelationShipManagerApiService service

type ApiApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveRequest) Execute() (AllocationByAsset, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve Method for ApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return AllocationByAsset
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveRequest) (AllocationByAsset, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AllocationByAsset
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/allocations-by-asset/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveRequest) Execute() (AssetConcentrationRisk, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve Method for ApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return AssetConcentrationRisk
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveRequest) (AssetConcentrationRisk, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AssetConcentrationRisk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/asset-concentration-risk/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsAumEvolutionRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsAumEvolutionRetrieveRequest) Execute() (AUMEvoluation, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsAumEvolutionRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsAumEvolutionRetrieve Method for ApiV2RelationshipManagerAnalyticsAumEvolutionRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsAumEvolutionRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsAumEvolutionRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsAumEvolutionRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return AUMEvoluation
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAumEvolutionRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsAumEvolutionRetrieveRequest) (AUMEvoluation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AUMEvoluation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsAumEvolutionRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-evolution/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveRequest) Execute() (AUMPortfolioRisk, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve Method for ApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return AUMPortfolioRisk
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveRequest) (AUMPortfolioRisk, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AUMPortfolioRisk
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-portfolio-risk/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsAumRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsAumRetrieveRequest) Execute() (RelationshipManager, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsAumRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsAumRetrieve Method for ApiV2RelationshipManagerAnalyticsAumRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsAumRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAumRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsAumRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsAumRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return RelationshipManager
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsAumRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsAumRetrieveRequest) (RelationshipManager, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RelationshipManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsAumRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsClientByRiskRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsClientByRiskRetrieveRequest) Execute() (RelationshipManager, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsClientByRiskRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsClientByRiskRetrieve Method for ApiV2RelationshipManagerAnalyticsClientByRiskRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsClientByRiskRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsClientByRiskRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsClientByRiskRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsClientByRiskRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return RelationshipManager
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsClientByRiskRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsClientByRiskRetrieveRequest) (RelationshipManager, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RelationshipManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsClientByRiskRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-risk/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsClientByStatusRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsClientByStatusRetrieveRequest) Execute() (RelationshipManager, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsClientByStatusRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsClientByStatusRetrieve Method for ApiV2RelationshipManagerAnalyticsClientByStatusRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsClientByStatusRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsClientByStatusRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsClientByStatusRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsClientByStatusRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return RelationshipManager
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsClientByStatusRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsClientByStatusRetrieveRequest) (RelationshipManager, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RelationshipManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsClientByStatusRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-status/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsClientRankingRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsClientRankingRetrieveRequest) Execute() (ClientRanking, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsClientRankingRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsClientRankingRetrieve Method for ApiV2RelationshipManagerAnalyticsClientRankingRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsClientRankingRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsClientRankingRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsClientRankingRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsClientRankingRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return ClientRanking
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsClientRankingRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsClientRankingRetrieveRequest) (ClientRanking, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ClientRanking
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsClientRankingRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-ranking/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveRequest) Execute() (RelationshipManager, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve Method for ApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return RelationshipManager
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveRequest) (RelationshipManager, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RelationshipManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/inflows-outflows/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveRequest) Execute() (RelationshipManager, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve Method for ApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return RelationshipManager
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveRequest) (RelationshipManager, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RelationshipManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/portfolio-risk-performance/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	relationshipManagerUuid string
}


func (r ApiApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveRequest) Execute() (RelationshipManager, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve Method for ApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param relationshipManagerUuid
 @return ApiApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(ctx _context.Context, relationshipManagerUuid string) ApiApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveRequest {
	return ApiApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		relationshipManagerUuid: relationshipManagerUuid,
	}
}

// Execute executes the request
//  @return RelationshipManager
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveExecute(r ApiApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveRequest) (RelationshipManager, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RelationshipManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/total-active-clients/"
	localVarPath = strings.Replace(localVarPath, "{"+"relationship_manager_uuid"+"}", _neturl.PathEscape(parameterToString(r.relationshipManagerUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerMeRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
}


func (r ApiApiV2RelationshipManagerMeRetrieveRequest) Execute() (RelationshipManager, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerMeRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerMeRetrieve Method for ApiV2RelationshipManagerMeRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2RelationshipManagerMeRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerMeRetrieve(ctx _context.Context) ApiApiV2RelationshipManagerMeRetrieveRequest {
	return ApiApiV2RelationshipManagerMeRetrieveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RelationshipManager
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerMeRetrieveExecute(r ApiApiV2RelationshipManagerMeRetrieveRequest) (RelationshipManager, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RelationshipManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerMeRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/me/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2RelationshipManagerRetrieveRequest struct {
	ctx _context.Context
	ApiService *RelationShipManagerApiService
	uuid string
}


func (r ApiApiV2RelationshipManagerRetrieveRequest) Execute() (RelationshipManager, *_nethttp.Response, error) {
	return r.ApiService.ApiV2RelationshipManagerRetrieveExecute(r)
}

/*
ApiV2RelationshipManagerRetrieve Method for ApiV2RelationshipManagerRetrieve

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid
 @return ApiApiV2RelationshipManagerRetrieveRequest
*/
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerRetrieve(ctx _context.Context, uuid string) ApiApiV2RelationshipManagerRetrieveRequest {
	return ApiApiV2RelationshipManagerRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return RelationshipManager
func (a *RelationShipManagerApiService) ApiV2RelationshipManagerRetrieveExecute(r ApiApiV2RelationshipManagerRetrieveRequest) (RelationshipManager, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RelationshipManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RelationShipManagerApiService.ApiV2RelationshipManagerRetrieve")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/relationship-manager/{uuid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", _neturl.PathEscape(parameterToString(r.uuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
