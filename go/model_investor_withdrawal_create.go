/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// InvestorWithdrawalCreate struct for InvestorWithdrawalCreate
type InvestorWithdrawalCreate struct {
	Uuid string `json:"uuid"`
	Amount float64 `json:"amount"`
	Provider string `json:"provider"`
	Status Status14bEnum `json:"status"`
	// Cancelled reason
	Reason string `json:"reason"`
	Completed time.Time `json:"completed"`
	// Withdrawal reason
	Purpose NullableString `json:"purpose,omitempty"`
	WithdrawalType string `json:"withdrawal_type"`
	// Additional withdrawal attributes for the specific portal
	ExtraData map[string]interface{} `json:"extra_data,omitempty"`
}

// NewInvestorWithdrawalCreate instantiates a new InvestorWithdrawalCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestorWithdrawalCreate(uuid string, amount float64, provider string, status Status14bEnum, reason string, completed time.Time, withdrawalType string) *InvestorWithdrawalCreate {
	this := InvestorWithdrawalCreate{}
	this.Uuid = uuid
	this.Amount = amount
	this.Provider = provider
	this.Status = status
	this.Reason = reason
	this.Completed = completed
	this.WithdrawalType = withdrawalType
	return &this
}

// NewInvestorWithdrawalCreateWithDefaults instantiates a new InvestorWithdrawalCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestorWithdrawalCreateWithDefaults() *InvestorWithdrawalCreate {
	this := InvestorWithdrawalCreate{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *InvestorWithdrawalCreate) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *InvestorWithdrawalCreate) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *InvestorWithdrawalCreate) SetUuid(v string) {
	o.Uuid = v
}

// GetAmount returns the Amount field value
func (o *InvestorWithdrawalCreate) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *InvestorWithdrawalCreate) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *InvestorWithdrawalCreate) SetAmount(v float64) {
	o.Amount = v
}

// GetProvider returns the Provider field value
func (o *InvestorWithdrawalCreate) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *InvestorWithdrawalCreate) GetProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *InvestorWithdrawalCreate) SetProvider(v string) {
	o.Provider = v
}

// GetStatus returns the Status field value
func (o *InvestorWithdrawalCreate) GetStatus() Status14bEnum {
	if o == nil {
		var ret Status14bEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InvestorWithdrawalCreate) GetStatusOk() (*Status14bEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InvestorWithdrawalCreate) SetStatus(v Status14bEnum) {
	o.Status = v
}

// GetReason returns the Reason field value
func (o *InvestorWithdrawalCreate) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *InvestorWithdrawalCreate) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *InvestorWithdrawalCreate) SetReason(v string) {
	o.Reason = v
}

// GetCompleted returns the Completed field value
func (o *InvestorWithdrawalCreate) GetCompleted() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *InvestorWithdrawalCreate) GetCompletedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *InvestorWithdrawalCreate) SetCompleted(v time.Time) {
	o.Completed = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvestorWithdrawalCreate) GetPurpose() string {
	if o == nil || o.Purpose.Get() == nil {
		var ret string
		return ret
	}
	return *o.Purpose.Get()
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvestorWithdrawalCreate) GetPurposeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Purpose.Get(), o.Purpose.IsSet()
}

// HasPurpose returns a boolean if a field has been set.
func (o *InvestorWithdrawalCreate) HasPurpose() bool {
	if o != nil && o.Purpose.IsSet() {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given NullableString and assigns it to the Purpose field.
func (o *InvestorWithdrawalCreate) SetPurpose(v string) {
	o.Purpose.Set(&v)
}
// SetPurposeNil sets the value for Purpose to be an explicit nil
func (o *InvestorWithdrawalCreate) SetPurposeNil() {
	o.Purpose.Set(nil)
}

// UnsetPurpose ensures that no value is present for Purpose, not even an explicit nil
func (o *InvestorWithdrawalCreate) UnsetPurpose() {
	o.Purpose.Unset()
}

// GetWithdrawalType returns the WithdrawalType field value
func (o *InvestorWithdrawalCreate) GetWithdrawalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WithdrawalType
}

// GetWithdrawalTypeOk returns a tuple with the WithdrawalType field value
// and a boolean to check if the value has been set.
func (o *InvestorWithdrawalCreate) GetWithdrawalTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WithdrawalType, true
}

// SetWithdrawalType sets field value
func (o *InvestorWithdrawalCreate) SetWithdrawalType(v string) {
	o.WithdrawalType = v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InvestorWithdrawalCreate) GetExtraData() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InvestorWithdrawalCreate) GetExtraDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.ExtraData == nil {
		return nil, false
	}
	return &o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *InvestorWithdrawalCreate) HasExtraData() bool {
	if o != nil && o.ExtraData != nil {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given map[string]interface{} and assigns it to the ExtraData field.
func (o *InvestorWithdrawalCreate) SetExtraData(v map[string]interface{}) {
	o.ExtraData = v
}

func (o InvestorWithdrawalCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["completed"] = o.Completed
	}
	if o.Purpose.IsSet() {
		toSerialize["purpose"] = o.Purpose.Get()
	}
	if true {
		toSerialize["withdrawal_type"] = o.WithdrawalType
	}
	if o.ExtraData != nil {
		toSerialize["extra_data"] = o.ExtraData
	}
	return json.Marshal(toSerialize)
}

type NullableInvestorWithdrawalCreate struct {
	value *InvestorWithdrawalCreate
	isSet bool
}

func (v NullableInvestorWithdrawalCreate) Get() *InvestorWithdrawalCreate {
	return v.value
}

func (v *NullableInvestorWithdrawalCreate) Set(val *InvestorWithdrawalCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestorWithdrawalCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestorWithdrawalCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestorWithdrawalCreate(val *InvestorWithdrawalCreate) *NullableInvestorWithdrawalCreate {
	return &NullableInvestorWithdrawalCreate{value: val, isSet: true}
}

func (v NullableInvestorWithdrawalCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestorWithdrawalCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


