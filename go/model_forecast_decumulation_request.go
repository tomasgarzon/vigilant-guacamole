/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ForecastDecumulationRequest struct for ForecastDecumulationRequest
type ForecastDecumulationRequest struct {
	InitialAmount float64 `json:"initial_amount"`
	RecurringAmount float64 `json:"recurring_amount"`
	RiskLevel int32 `json:"risk_level"`
	WithdrawalAmount float64 `json:"withdrawal_amount"`
	RetirementAge int32 `json:"retirement_age"`
	LifeExpectancy *int32 `json:"life_expectancy,omitempty"`
}

// NewForecastDecumulationRequest instantiates a new ForecastDecumulationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForecastDecumulationRequest(initialAmount float64, recurringAmount float64, riskLevel int32, withdrawalAmount float64, retirementAge int32) *ForecastDecumulationRequest {
	this := ForecastDecumulationRequest{}
	this.InitialAmount = initialAmount
	this.RecurringAmount = recurringAmount
	this.RiskLevel = riskLevel
	this.WithdrawalAmount = withdrawalAmount
	this.RetirementAge = retirementAge
	return &this
}

// NewForecastDecumulationRequestWithDefaults instantiates a new ForecastDecumulationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForecastDecumulationRequestWithDefaults() *ForecastDecumulationRequest {
	this := ForecastDecumulationRequest{}
	return &this
}

// GetInitialAmount returns the InitialAmount field value
func (o *ForecastDecumulationRequest) GetInitialAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.InitialAmount
}

// GetInitialAmountOk returns a tuple with the InitialAmount field value
// and a boolean to check if the value has been set.
func (o *ForecastDecumulationRequest) GetInitialAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InitialAmount, true
}

// SetInitialAmount sets field value
func (o *ForecastDecumulationRequest) SetInitialAmount(v float64) {
	o.InitialAmount = v
}

// GetRecurringAmount returns the RecurringAmount field value
func (o *ForecastDecumulationRequest) GetRecurringAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.RecurringAmount
}

// GetRecurringAmountOk returns a tuple with the RecurringAmount field value
// and a boolean to check if the value has been set.
func (o *ForecastDecumulationRequest) GetRecurringAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RecurringAmount, true
}

// SetRecurringAmount sets field value
func (o *ForecastDecumulationRequest) SetRecurringAmount(v float64) {
	o.RecurringAmount = v
}

// GetRiskLevel returns the RiskLevel field value
func (o *ForecastDecumulationRequest) GetRiskLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RiskLevel
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value
// and a boolean to check if the value has been set.
func (o *ForecastDecumulationRequest) GetRiskLevelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RiskLevel, true
}

// SetRiskLevel sets field value
func (o *ForecastDecumulationRequest) SetRiskLevel(v int32) {
	o.RiskLevel = v
}

// GetWithdrawalAmount returns the WithdrawalAmount field value
func (o *ForecastDecumulationRequest) GetWithdrawalAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.WithdrawalAmount
}

// GetWithdrawalAmountOk returns a tuple with the WithdrawalAmount field value
// and a boolean to check if the value has been set.
func (o *ForecastDecumulationRequest) GetWithdrawalAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WithdrawalAmount, true
}

// SetWithdrawalAmount sets field value
func (o *ForecastDecumulationRequest) SetWithdrawalAmount(v float64) {
	o.WithdrawalAmount = v
}

// GetRetirementAge returns the RetirementAge field value
func (o *ForecastDecumulationRequest) GetRetirementAge() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RetirementAge
}

// GetRetirementAgeOk returns a tuple with the RetirementAge field value
// and a boolean to check if the value has been set.
func (o *ForecastDecumulationRequest) GetRetirementAgeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RetirementAge, true
}

// SetRetirementAge sets field value
func (o *ForecastDecumulationRequest) SetRetirementAge(v int32) {
	o.RetirementAge = v
}

// GetLifeExpectancy returns the LifeExpectancy field value if set, zero value otherwise.
func (o *ForecastDecumulationRequest) GetLifeExpectancy() int32 {
	if o == nil || o.LifeExpectancy == nil {
		var ret int32
		return ret
	}
	return *o.LifeExpectancy
}

// GetLifeExpectancyOk returns a tuple with the LifeExpectancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForecastDecumulationRequest) GetLifeExpectancyOk() (*int32, bool) {
	if o == nil || o.LifeExpectancy == nil {
		return nil, false
	}
	return o.LifeExpectancy, true
}

// HasLifeExpectancy returns a boolean if a field has been set.
func (o *ForecastDecumulationRequest) HasLifeExpectancy() bool {
	if o != nil && o.LifeExpectancy != nil {
		return true
	}

	return false
}

// SetLifeExpectancy gets a reference to the given int32 and assigns it to the LifeExpectancy field.
func (o *ForecastDecumulationRequest) SetLifeExpectancy(v int32) {
	o.LifeExpectancy = &v
}

func (o ForecastDecumulationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["initial_amount"] = o.InitialAmount
	}
	if true {
		toSerialize["recurring_amount"] = o.RecurringAmount
	}
	if true {
		toSerialize["risk_level"] = o.RiskLevel
	}
	if true {
		toSerialize["withdrawal_amount"] = o.WithdrawalAmount
	}
	if true {
		toSerialize["retirement_age"] = o.RetirementAge
	}
	if o.LifeExpectancy != nil {
		toSerialize["life_expectancy"] = o.LifeExpectancy
	}
	return json.Marshal(toSerialize)
}

type NullableForecastDecumulationRequest struct {
	value *ForecastDecumulationRequest
	isSet bool
}

func (v NullableForecastDecumulationRequest) Get() *ForecastDecumulationRequest {
	return v.value
}

func (v *NullableForecastDecumulationRequest) Set(val *ForecastDecumulationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableForecastDecumulationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableForecastDecumulationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForecastDecumulationRequest(val *ForecastDecumulationRequest) *NullableForecastDecumulationRequest {
	return &NullableForecastDecumulationRequest{value: val, isSet: true}
}

func (v NullableForecastDecumulationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForecastDecumulationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


