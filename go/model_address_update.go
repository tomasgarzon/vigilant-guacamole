/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AddressUpdate struct for AddressUpdate
type AddressUpdate struct {
	Uuid string `json:"uuid"`
	Line1 string `json:"line1"`
	Line2 NullableString `json:"line2,omitempty"`
	Postcode string `json:"postcode"`
	Locality string `json:"locality"`
	Country string `json:"country"`
	Region NullableString `json:"region,omitempty"`
}

// NewAddressUpdate instantiates a new AddressUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressUpdate(uuid string, line1 string, postcode string, locality string, country string) *AddressUpdate {
	this := AddressUpdate{}
	this.Uuid = uuid
	this.Line1 = line1
	this.Postcode = postcode
	this.Locality = locality
	this.Country = country
	return &this
}

// NewAddressUpdateWithDefaults instantiates a new AddressUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressUpdateWithDefaults() *AddressUpdate {
	this := AddressUpdate{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *AddressUpdate) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *AddressUpdate) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *AddressUpdate) SetUuid(v string) {
	o.Uuid = v
}

// GetLine1 returns the Line1 field value
func (o *AddressUpdate) GetLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value
// and a boolean to check if the value has been set.
func (o *AddressUpdate) GetLine1Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Line1, true
}

// SetLine1 sets field value
func (o *AddressUpdate) SetLine1(v string) {
	o.Line1 = v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressUpdate) GetLine2() string {
	if o == nil || o.Line2.Get() == nil {
		var ret string
		return ret
	}
	return *o.Line2.Get()
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressUpdate) GetLine2Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Line2.Get(), o.Line2.IsSet()
}

// HasLine2 returns a boolean if a field has been set.
func (o *AddressUpdate) HasLine2() bool {
	if o != nil && o.Line2.IsSet() {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given NullableString and assigns it to the Line2 field.
func (o *AddressUpdate) SetLine2(v string) {
	o.Line2.Set(&v)
}
// SetLine2Nil sets the value for Line2 to be an explicit nil
func (o *AddressUpdate) SetLine2Nil() {
	o.Line2.Set(nil)
}

// UnsetLine2 ensures that no value is present for Line2, not even an explicit nil
func (o *AddressUpdate) UnsetLine2() {
	o.Line2.Unset()
}

// GetPostcode returns the Postcode field value
func (o *AddressUpdate) GetPostcode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Postcode
}

// GetPostcodeOk returns a tuple with the Postcode field value
// and a boolean to check if the value has been set.
func (o *AddressUpdate) GetPostcodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Postcode, true
}

// SetPostcode sets field value
func (o *AddressUpdate) SetPostcode(v string) {
	o.Postcode = v
}

// GetLocality returns the Locality field value
func (o *AddressUpdate) GetLocality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value
// and a boolean to check if the value has been set.
func (o *AddressUpdate) GetLocalityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Locality, true
}

// SetLocality sets field value
func (o *AddressUpdate) SetLocality(v string) {
	o.Locality = v
}

// GetCountry returns the Country field value
func (o *AddressUpdate) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *AddressUpdate) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *AddressUpdate) SetCountry(v string) {
	o.Country = v
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddressUpdate) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddressUpdate) GetRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *AddressUpdate) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableString and assigns it to the Region field.
func (o *AddressUpdate) SetRegion(v string) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *AddressUpdate) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *AddressUpdate) UnsetRegion() {
	o.Region.Unset()
}

func (o AddressUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["line1"] = o.Line1
	}
	if o.Line2.IsSet() {
		toSerialize["line2"] = o.Line2.Get()
	}
	if true {
		toSerialize["postcode"] = o.Postcode
	}
	if true {
		toSerialize["locality"] = o.Locality
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAddressUpdate struct {
	value *AddressUpdate
	isSet bool
}

func (v NullableAddressUpdate) Get() *AddressUpdate {
	return v.value
}

func (v *NullableAddressUpdate) Set(val *AddressUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressUpdate(val *AddressUpdate) *NullableAddressUpdate {
	return &NullableAddressUpdate{value: val, isSet: true}
}

func (v NullableAddressUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


