/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Attachment struct for Attachment
type Attachment struct {
	AttachmentExtension string `json:"attachment_extension"`
	AttachmentFilename string `json:"attachment_filename"`
	Uuid string `json:"uuid"`
}

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment(attachmentExtension string, attachmentFilename string, uuid string) *Attachment {
	this := Attachment{}
	this.AttachmentExtension = attachmentExtension
	this.AttachmentFilename = attachmentFilename
	this.Uuid = uuid
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetAttachmentExtension returns the AttachmentExtension field value
func (o *Attachment) GetAttachmentExtension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttachmentExtension
}

// GetAttachmentExtensionOk returns a tuple with the AttachmentExtension field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetAttachmentExtensionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttachmentExtension, true
}

// SetAttachmentExtension sets field value
func (o *Attachment) SetAttachmentExtension(v string) {
	o.AttachmentExtension = v
}

// GetAttachmentFilename returns the AttachmentFilename field value
func (o *Attachment) GetAttachmentFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttachmentFilename
}

// GetAttachmentFilenameOk returns a tuple with the AttachmentFilename field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetAttachmentFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttachmentFilename, true
}

// SetAttachmentFilename sets field value
func (o *Attachment) SetAttachmentFilename(v string) {
	o.AttachmentFilename = v
}

// GetUuid returns the Uuid field value
func (o *Attachment) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Attachment) SetUuid(v string) {
	o.Uuid = v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attachment_extension"] = o.AttachmentExtension
	}
	if true {
		toSerialize["attachment_filename"] = o.AttachmentFilename
	}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


