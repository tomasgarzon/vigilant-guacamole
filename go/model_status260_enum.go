/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Status260Enum the model 'Status260Enum'
type Status260Enum string

// List of Status260Enum
const (
	PENDING Status260Enum = "PENDING"
	CHARGED Status260Enum = "CHARGED"
)

var allowedStatus260EnumEnumValues = []Status260Enum{
	"PENDING",
	"CHARGED",
}

func (v *Status260Enum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status260Enum(value)
	for _, existing := range allowedStatus260EnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status260Enum", value)
}

// NewStatus260EnumFromValue returns a pointer to a valid Status260Enum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatus260EnumFromValue(v string) (*Status260Enum, error) {
	ev := Status260Enum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status260Enum: valid values are %v", v, allowedStatus260EnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status260Enum) IsValid() bool {
	for _, existing := range allowedStatus260EnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Status260Enum value
func (v Status260Enum) Ptr() *Status260Enum {
	return &v
}

type NullableStatus260Enum struct {
	value *Status260Enum
	isSet bool
}

func (v NullableStatus260Enum) Get() *Status260Enum {
	return v.value
}

func (v *NullableStatus260Enum) Set(val *Status260Enum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus260Enum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus260Enum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus260Enum(val *Status260Enum) *NullableStatus260Enum {
	return &NullableStatus260Enum{value: val, isSet: true}
}

func (v NullableStatus260Enum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus260Enum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

