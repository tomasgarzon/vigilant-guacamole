/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AllocationDetail A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type AllocationDetail struct {
	ValuationDate string `json:"valuation_date"`
	Balance NullableFloat64 `json:"balance,omitempty"`
	Invested NullableFloat64 `json:"invested,omitempty"`
	Earnings NullableFloat64 `json:"earnings,omitempty"`
	CashActive float64 `json:"cash_active"`
	TradeTotal NullableFloat64 `json:"trade_total,omitempty"`
	Performance float64 `json:"performance"`
	Positions []string `json:"positions"`
}

// NewAllocationDetail instantiates a new AllocationDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationDetail(valuationDate string, cashActive float64, performance float64, positions []string) *AllocationDetail {
	this := AllocationDetail{}
	this.ValuationDate = valuationDate
	this.CashActive = cashActive
	this.Performance = performance
	this.Positions = positions
	return &this
}

// NewAllocationDetailWithDefaults instantiates a new AllocationDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationDetailWithDefaults() *AllocationDetail {
	this := AllocationDetail{}
	return &this
}

// GetValuationDate returns the ValuationDate field value
func (o *AllocationDetail) GetValuationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValuationDate
}

// GetValuationDateOk returns a tuple with the ValuationDate field value
// and a boolean to check if the value has been set.
func (o *AllocationDetail) GetValuationDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ValuationDate, true
}

// SetValuationDate sets field value
func (o *AllocationDetail) SetValuationDate(v string) {
	o.ValuationDate = v
}

// GetBalance returns the Balance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllocationDetail) GetBalance() float64 {
	if o == nil || o.Balance.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Balance.Get()
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllocationDetail) GetBalanceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Balance.Get(), o.Balance.IsSet()
}

// HasBalance returns a boolean if a field has been set.
func (o *AllocationDetail) HasBalance() bool {
	if o != nil && o.Balance.IsSet() {
		return true
	}

	return false
}

// SetBalance gets a reference to the given NullableFloat64 and assigns it to the Balance field.
func (o *AllocationDetail) SetBalance(v float64) {
	o.Balance.Set(&v)
}
// SetBalanceNil sets the value for Balance to be an explicit nil
func (o *AllocationDetail) SetBalanceNil() {
	o.Balance.Set(nil)
}

// UnsetBalance ensures that no value is present for Balance, not even an explicit nil
func (o *AllocationDetail) UnsetBalance() {
	o.Balance.Unset()
}

// GetInvested returns the Invested field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllocationDetail) GetInvested() float64 {
	if o == nil || o.Invested.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Invested.Get()
}

// GetInvestedOk returns a tuple with the Invested field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllocationDetail) GetInvestedOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Invested.Get(), o.Invested.IsSet()
}

// HasInvested returns a boolean if a field has been set.
func (o *AllocationDetail) HasInvested() bool {
	if o != nil && o.Invested.IsSet() {
		return true
	}

	return false
}

// SetInvested gets a reference to the given NullableFloat64 and assigns it to the Invested field.
func (o *AllocationDetail) SetInvested(v float64) {
	o.Invested.Set(&v)
}
// SetInvestedNil sets the value for Invested to be an explicit nil
func (o *AllocationDetail) SetInvestedNil() {
	o.Invested.Set(nil)
}

// UnsetInvested ensures that no value is present for Invested, not even an explicit nil
func (o *AllocationDetail) UnsetInvested() {
	o.Invested.Unset()
}

// GetEarnings returns the Earnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllocationDetail) GetEarnings() float64 {
	if o == nil || o.Earnings.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Earnings.Get()
}

// GetEarningsOk returns a tuple with the Earnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllocationDetail) GetEarningsOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Earnings.Get(), o.Earnings.IsSet()
}

// HasEarnings returns a boolean if a field has been set.
func (o *AllocationDetail) HasEarnings() bool {
	if o != nil && o.Earnings.IsSet() {
		return true
	}

	return false
}

// SetEarnings gets a reference to the given NullableFloat64 and assigns it to the Earnings field.
func (o *AllocationDetail) SetEarnings(v float64) {
	o.Earnings.Set(&v)
}
// SetEarningsNil sets the value for Earnings to be an explicit nil
func (o *AllocationDetail) SetEarningsNil() {
	o.Earnings.Set(nil)
}

// UnsetEarnings ensures that no value is present for Earnings, not even an explicit nil
func (o *AllocationDetail) UnsetEarnings() {
	o.Earnings.Unset()
}

// GetCashActive returns the CashActive field value
func (o *AllocationDetail) GetCashActive() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CashActive
}

// GetCashActiveOk returns a tuple with the CashActive field value
// and a boolean to check if the value has been set.
func (o *AllocationDetail) GetCashActiveOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CashActive, true
}

// SetCashActive sets field value
func (o *AllocationDetail) SetCashActive(v float64) {
	o.CashActive = v
}

// GetTradeTotal returns the TradeTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AllocationDetail) GetTradeTotal() float64 {
	if o == nil || o.TradeTotal.Get() == nil {
		var ret float64
		return ret
	}
	return *o.TradeTotal.Get()
}

// GetTradeTotalOk returns a tuple with the TradeTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AllocationDetail) GetTradeTotalOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TradeTotal.Get(), o.TradeTotal.IsSet()
}

// HasTradeTotal returns a boolean if a field has been set.
func (o *AllocationDetail) HasTradeTotal() bool {
	if o != nil && o.TradeTotal.IsSet() {
		return true
	}

	return false
}

// SetTradeTotal gets a reference to the given NullableFloat64 and assigns it to the TradeTotal field.
func (o *AllocationDetail) SetTradeTotal(v float64) {
	o.TradeTotal.Set(&v)
}
// SetTradeTotalNil sets the value for TradeTotal to be an explicit nil
func (o *AllocationDetail) SetTradeTotalNil() {
	o.TradeTotal.Set(nil)
}

// UnsetTradeTotal ensures that no value is present for TradeTotal, not even an explicit nil
func (o *AllocationDetail) UnsetTradeTotal() {
	o.TradeTotal.Unset()
}

// GetPerformance returns the Performance field value
func (o *AllocationDetail) GetPerformance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Performance
}

// GetPerformanceOk returns a tuple with the Performance field value
// and a boolean to check if the value has been set.
func (o *AllocationDetail) GetPerformanceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Performance, true
}

// SetPerformance sets field value
func (o *AllocationDetail) SetPerformance(v float64) {
	o.Performance = v
}

// GetPositions returns the Positions field value
func (o *AllocationDetail) GetPositions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Positions
}

// GetPositionsOk returns a tuple with the Positions field value
// and a boolean to check if the value has been set.
func (o *AllocationDetail) GetPositionsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Positions, true
}

// SetPositions sets field value
func (o *AllocationDetail) SetPositions(v []string) {
	o.Positions = v
}

func (o AllocationDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["valuation_date"] = o.ValuationDate
	}
	if o.Balance.IsSet() {
		toSerialize["balance"] = o.Balance.Get()
	}
	if o.Invested.IsSet() {
		toSerialize["invested"] = o.Invested.Get()
	}
	if o.Earnings.IsSet() {
		toSerialize["earnings"] = o.Earnings.Get()
	}
	if true {
		toSerialize["cash_active"] = o.CashActive
	}
	if o.TradeTotal.IsSet() {
		toSerialize["trade_total"] = o.TradeTotal.Get()
	}
	if true {
		toSerialize["performance"] = o.Performance
	}
	if true {
		toSerialize["positions"] = o.Positions
	}
	return json.Marshal(toSerialize)
}

type NullableAllocationDetail struct {
	value *AllocationDetail
	isSet bool
}

func (v NullableAllocationDetail) Get() *AllocationDetail {
	return v.value
}

func (v *NullableAllocationDetail) Set(val *AllocationDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationDetail(val *AllocationDetail) *NullableAllocationDetail {
	return &NullableAllocationDetail{value: val, isSet: true}
}

func (v NullableAllocationDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


