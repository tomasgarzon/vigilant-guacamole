/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Status2efEnum the model 'Status2efEnum'
type Status2efEnum string

// List of Status2efEnum
const (
	PENDING Status2efEnum = "PENDING"
	ACTIVE Status2efEnum = "ACTIVE"
	DELETING Status2efEnum = "DELETING"
	DELETED Status2efEnum = "DELETED"
)

var allowedStatus2efEnumEnumValues = []Status2efEnum{
	"PENDING",
	"ACTIVE",
	"DELETING",
	"DELETED",
}

func (v *Status2efEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Status2efEnum(value)
	for _, existing := range allowedStatus2efEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Status2efEnum", value)
}

// NewStatus2efEnumFromValue returns a pointer to a valid Status2efEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatus2efEnumFromValue(v string) (*Status2efEnum, error) {
	ev := Status2efEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Status2efEnum: valid values are %v", v, allowedStatus2efEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status2efEnum) IsValid() bool {
	for _, existing := range allowedStatus2efEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Status2efEnum value
func (v Status2efEnum) Ptr() *Status2efEnum {
	return &v
}

type NullableStatus2efEnum struct {
	value *Status2efEnum
	isSet bool
}

func (v NullableStatus2efEnum) Get() *Status2efEnum {
	return v.value
}

func (v *NullableStatus2efEnum) Set(val *Status2efEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus2efEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus2efEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus2efEnum(val *Status2efEnum) *NullableStatus2efEnum {
	return &NullableStatus2efEnum{value: val, isSet: true}
}

func (v NullableStatus2efEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus2efEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

