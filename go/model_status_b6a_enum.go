/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StatusB6aEnum the model 'StatusB6aEnum'
type StatusB6aEnum string

// List of StatusB6aEnum
const (
	PENDING StatusB6aEnum = "PENDING"
	REQUESTED StatusB6aEnum = "REQUESTED"
	PROCESSING StatusB6aEnum = "PROCESSING"
	COMPLETED StatusB6aEnum = "COMPLETED"
	ERROR StatusB6aEnum = "ERROR"
	CANCELLED StatusB6aEnum = "CANCELLED"
)

var allowedStatusB6aEnumEnumValues = []StatusB6aEnum{
	"PENDING",
	"REQUESTED",
	"PROCESSING",
	"COMPLETED",
	"ERROR",
	"CANCELLED",
}

func (v *StatusB6aEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusB6aEnum(value)
	for _, existing := range allowedStatusB6aEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusB6aEnum", value)
}

// NewStatusB6aEnumFromValue returns a pointer to a valid StatusB6aEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusB6aEnumFromValue(v string) (*StatusB6aEnum, error) {
	ev := StatusB6aEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusB6aEnum: valid values are %v", v, allowedStatusB6aEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusB6aEnum) IsValid() bool {
	for _, existing := range allowedStatusB6aEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusB6aEnum value
func (v StatusB6aEnum) Ptr() *StatusB6aEnum {
	return &v
}

type NullableStatusB6aEnum struct {
	value *StatusB6aEnum
	isSet bool
}

func (v NullableStatusB6aEnum) Get() *StatusB6aEnum {
	return v.value
}

func (v *NullableStatusB6aEnum) Set(val *StatusB6aEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusB6aEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusB6aEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusB6aEnum(val *StatusB6aEnum) *NullableStatusB6aEnum {
	return &NullableStatusB6aEnum{value: val, isSet: true}
}

func (v NullableStatusB6aEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusB6aEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

