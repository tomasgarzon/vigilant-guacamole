/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ResultEnum the model 'ResultEnum'
type ResultEnum string

// List of ResultEnum
const (
	ACCEPTED ResultEnum = "ACCEPTED"
	REJECTED ResultEnum = "REJECTED"
	DOUBT ResultEnum = "DOUBT"
)

var allowedResultEnumEnumValues = []ResultEnum{
	"ACCEPTED",
	"REJECTED",
	"DOUBT",
}

func (v *ResultEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResultEnum(value)
	for _, existing := range allowedResultEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResultEnum", value)
}

// NewResultEnumFromValue returns a pointer to a valid ResultEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResultEnumFromValue(v string) (*ResultEnum, error) {
	ev := ResultEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResultEnum: valid values are %v", v, allowedResultEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResultEnum) IsValid() bool {
	for _, existing := range allowedResultEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResultEnum value
func (v ResultEnum) Ptr() *ResultEnum {
	return &v
}

type NullableResultEnum struct {
	value *ResultEnum
	isSet bool
}

func (v NullableResultEnum) Get() *ResultEnum {
	return v.value
}

func (v *NullableResultEnum) Set(val *ResultEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableResultEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableResultEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultEnum(val *ResultEnum) *NullableResultEnum {
	return &NullableResultEnum{value: val, isSet: true}
}

func (v NullableResultEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

