/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NationalityCreate A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type NationalityCreate struct {
	Country string `json:"country"`
	DocumentNumber NullableString `json:"document_number,omitempty"`
	DocumentType *string `json:"document_type,omitempty"`
}

// NewNationalityCreate instantiates a new NationalityCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNationalityCreate(country string) *NationalityCreate {
	this := NationalityCreate{}
	this.Country = country
	return &this
}

// NewNationalityCreateWithDefaults instantiates a new NationalityCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNationalityCreateWithDefaults() *NationalityCreate {
	this := NationalityCreate{}
	return &this
}

// GetCountry returns the Country field value
func (o *NationalityCreate) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *NationalityCreate) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *NationalityCreate) SetCountry(v string) {
	o.Country = v
}

// GetDocumentNumber returns the DocumentNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NationalityCreate) GetDocumentNumber() string {
	if o == nil || o.DocumentNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentNumber.Get()
}

// GetDocumentNumberOk returns a tuple with the DocumentNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NationalityCreate) GetDocumentNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentNumber.Get(), o.DocumentNumber.IsSet()
}

// HasDocumentNumber returns a boolean if a field has been set.
func (o *NationalityCreate) HasDocumentNumber() bool {
	if o != nil && o.DocumentNumber.IsSet() {
		return true
	}

	return false
}

// SetDocumentNumber gets a reference to the given NullableString and assigns it to the DocumentNumber field.
func (o *NationalityCreate) SetDocumentNumber(v string) {
	o.DocumentNumber.Set(&v)
}
// SetDocumentNumberNil sets the value for DocumentNumber to be an explicit nil
func (o *NationalityCreate) SetDocumentNumberNil() {
	o.DocumentNumber.Set(nil)
}

// UnsetDocumentNumber ensures that no value is present for DocumentNumber, not even an explicit nil
func (o *NationalityCreate) UnsetDocumentNumber() {
	o.DocumentNumber.Unset()
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise.
func (o *NationalityCreate) GetDocumentType() string {
	if o == nil || o.DocumentType == nil {
		var ret string
		return ret
	}
	return *o.DocumentType
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NationalityCreate) GetDocumentTypeOk() (*string, bool) {
	if o == nil || o.DocumentType == nil {
		return nil, false
	}
	return o.DocumentType, true
}

// HasDocumentType returns a boolean if a field has been set.
func (o *NationalityCreate) HasDocumentType() bool {
	if o != nil && o.DocumentType != nil {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given string and assigns it to the DocumentType field.
func (o *NationalityCreate) SetDocumentType(v string) {
	o.DocumentType = &v
}

func (o NationalityCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["country"] = o.Country
	}
	if o.DocumentNumber.IsSet() {
		toSerialize["document_number"] = o.DocumentNumber.Get()
	}
	if o.DocumentType != nil {
		toSerialize["document_type"] = o.DocumentType
	}
	return json.Marshal(toSerialize)
}

type NullableNationalityCreate struct {
	value *NationalityCreate
	isSet bool
}

func (v NullableNationalityCreate) Get() *NationalityCreate {
	return v.value
}

func (v *NullableNationalityCreate) Set(val *NationalityCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableNationalityCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableNationalityCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNationalityCreate(val *NationalityCreate) *NullableNationalityCreate {
	return &NullableNationalityCreate{value: val, isSet: true}
}

func (v NullableNationalityCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNationalityCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


