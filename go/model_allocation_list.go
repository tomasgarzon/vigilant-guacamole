/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AllocationList struct for AllocationList
type AllocationList struct {
	ValuationDate string `json:"valuation_date"`
	Balance float64 `json:"balance"`
	Invested float64 `json:"invested"`
	Earnings float64 `json:"earnings"`
	CashActive float64 `json:"cash_active"`
	TradeTotal float64 `json:"trade_total"`
	Performance float64 `json:"performance"`
}

// NewAllocationList instantiates a new AllocationList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocationList(valuationDate string, balance float64, invested float64, earnings float64, cashActive float64, tradeTotal float64, performance float64) *AllocationList {
	this := AllocationList{}
	this.ValuationDate = valuationDate
	this.Balance = balance
	this.Invested = invested
	this.Earnings = earnings
	this.CashActive = cashActive
	this.TradeTotal = tradeTotal
	this.Performance = performance
	return &this
}

// NewAllocationListWithDefaults instantiates a new AllocationList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocationListWithDefaults() *AllocationList {
	this := AllocationList{}
	return &this
}

// GetValuationDate returns the ValuationDate field value
func (o *AllocationList) GetValuationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValuationDate
}

// GetValuationDateOk returns a tuple with the ValuationDate field value
// and a boolean to check if the value has been set.
func (o *AllocationList) GetValuationDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ValuationDate, true
}

// SetValuationDate sets field value
func (o *AllocationList) SetValuationDate(v string) {
	o.ValuationDate = v
}

// GetBalance returns the Balance field value
func (o *AllocationList) GetBalance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value
// and a boolean to check if the value has been set.
func (o *AllocationList) GetBalanceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Balance, true
}

// SetBalance sets field value
func (o *AllocationList) SetBalance(v float64) {
	o.Balance = v
}

// GetInvested returns the Invested field value
func (o *AllocationList) GetInvested() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Invested
}

// GetInvestedOk returns a tuple with the Invested field value
// and a boolean to check if the value has been set.
func (o *AllocationList) GetInvestedOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Invested, true
}

// SetInvested sets field value
func (o *AllocationList) SetInvested(v float64) {
	o.Invested = v
}

// GetEarnings returns the Earnings field value
func (o *AllocationList) GetEarnings() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Earnings
}

// GetEarningsOk returns a tuple with the Earnings field value
// and a boolean to check if the value has been set.
func (o *AllocationList) GetEarningsOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Earnings, true
}

// SetEarnings sets field value
func (o *AllocationList) SetEarnings(v float64) {
	o.Earnings = v
}

// GetCashActive returns the CashActive field value
func (o *AllocationList) GetCashActive() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.CashActive
}

// GetCashActiveOk returns a tuple with the CashActive field value
// and a boolean to check if the value has been set.
func (o *AllocationList) GetCashActiveOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CashActive, true
}

// SetCashActive sets field value
func (o *AllocationList) SetCashActive(v float64) {
	o.CashActive = v
}

// GetTradeTotal returns the TradeTotal field value
func (o *AllocationList) GetTradeTotal() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TradeTotal
}

// GetTradeTotalOk returns a tuple with the TradeTotal field value
// and a boolean to check if the value has been set.
func (o *AllocationList) GetTradeTotalOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TradeTotal, true
}

// SetTradeTotal sets field value
func (o *AllocationList) SetTradeTotal(v float64) {
	o.TradeTotal = v
}

// GetPerformance returns the Performance field value
func (o *AllocationList) GetPerformance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Performance
}

// GetPerformanceOk returns a tuple with the Performance field value
// and a boolean to check if the value has been set.
func (o *AllocationList) GetPerformanceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Performance, true
}

// SetPerformance sets field value
func (o *AllocationList) SetPerformance(v float64) {
	o.Performance = v
}

func (o AllocationList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["valuation_date"] = o.ValuationDate
	}
	if true {
		toSerialize["balance"] = o.Balance
	}
	if true {
		toSerialize["invested"] = o.Invested
	}
	if true {
		toSerialize["earnings"] = o.Earnings
	}
	if true {
		toSerialize["cash_active"] = o.CashActive
	}
	if true {
		toSerialize["trade_total"] = o.TradeTotal
	}
	if true {
		toSerialize["performance"] = o.Performance
	}
	return json.Marshal(toSerialize)
}

type NullableAllocationList struct {
	value *AllocationList
	isSet bool
}

func (v NullableAllocationList) Get() *AllocationList {
	return v.value
}

func (v *NullableAllocationList) Set(val *AllocationList) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocationList) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocationList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocationList(val *AllocationList) *NullableAllocationList {
	return &NullableAllocationList{value: val, isSet: true}
}

func (v NullableAllocationList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocationList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


