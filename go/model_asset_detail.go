/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AssetDetail A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type AssetDetail struct {
	Uuid string `json:"uuid"`
	Name string `json:"name"`
	Isin string `json:"isin"`
	Ticker string `json:"ticker"`
	Status *Status6f6Enum `json:"status,omitempty"`
	Market string `json:"market"`
	Currency string `json:"currency"`
	ExtraData map[string]interface{} `json:"extra_data,omitempty"`
	Categories []AssetCategory `json:"categories"`
	AssetType *AssetTypeEnum `json:"asset_type,omitempty"`
	// This field determines the administrative and operational costs associated to certain types of assets like ETFs or mutual funds.
	ExpenseRatio *float32 `json:"expense_ratio,omitempty"`
}

// NewAssetDetail instantiates a new AssetDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetDetail(uuid string, name string, isin string, ticker string, market string, currency string, categories []AssetCategory) *AssetDetail {
	this := AssetDetail{}
	this.Uuid = uuid
	this.Name = name
	this.Isin = isin
	this.Ticker = ticker
	this.Market = market
	this.Currency = currency
	this.Categories = categories
	return &this
}

// NewAssetDetailWithDefaults instantiates a new AssetDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetDetailWithDefaults() *AssetDetail {
	this := AssetDetail{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *AssetDetail) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *AssetDetail) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *AssetDetail) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AssetDetail) SetName(v string) {
	o.Name = v
}

// GetIsin returns the Isin field value
func (o *AssetDetail) GetIsin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Isin
}

// GetIsinOk returns a tuple with the Isin field value
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetIsinOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Isin, true
}

// SetIsin sets field value
func (o *AssetDetail) SetIsin(v string) {
	o.Isin = v
}

// GetTicker returns the Ticker field value
func (o *AssetDetail) GetTicker() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetTickerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ticker, true
}

// SetTicker sets field value
func (o *AssetDetail) SetTicker(v string) {
	o.Ticker = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AssetDetail) GetStatus() Status6f6Enum {
	if o == nil || o.Status == nil {
		var ret Status6f6Enum
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetStatusOk() (*Status6f6Enum, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AssetDetail) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status6f6Enum and assigns it to the Status field.
func (o *AssetDetail) SetStatus(v Status6f6Enum) {
	o.Status = &v
}

// GetMarket returns the Market field value
func (o *AssetDetail) GetMarket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Market
}

// GetMarketOk returns a tuple with the Market field value
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetMarketOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Market, true
}

// SetMarket sets field value
func (o *AssetDetail) SetMarket(v string) {
	o.Market = v
}

// GetCurrency returns the Currency field value
func (o *AssetDetail) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *AssetDetail) SetCurrency(v string) {
	o.Currency = v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetDetail) GetExtraData() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetDetail) GetExtraDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.ExtraData == nil {
		return nil, false
	}
	return &o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *AssetDetail) HasExtraData() bool {
	if o != nil && o.ExtraData != nil {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given map[string]interface{} and assigns it to the ExtraData field.
func (o *AssetDetail) SetExtraData(v map[string]interface{}) {
	o.ExtraData = v
}

// GetCategories returns the Categories field value
func (o *AssetDetail) GetCategories() []AssetCategory {
	if o == nil {
		var ret []AssetCategory
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetCategoriesOk() (*[]AssetCategory, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Categories, true
}

// SetCategories sets field value
func (o *AssetDetail) SetCategories(v []AssetCategory) {
	o.Categories = v
}

// GetAssetType returns the AssetType field value if set, zero value otherwise.
func (o *AssetDetail) GetAssetType() AssetTypeEnum {
	if o == nil || o.AssetType == nil {
		var ret AssetTypeEnum
		return ret
	}
	return *o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetAssetTypeOk() (*AssetTypeEnum, bool) {
	if o == nil || o.AssetType == nil {
		return nil, false
	}
	return o.AssetType, true
}

// HasAssetType returns a boolean if a field has been set.
func (o *AssetDetail) HasAssetType() bool {
	if o != nil && o.AssetType != nil {
		return true
	}

	return false
}

// SetAssetType gets a reference to the given AssetTypeEnum and assigns it to the AssetType field.
func (o *AssetDetail) SetAssetType(v AssetTypeEnum) {
	o.AssetType = &v
}

// GetExpenseRatio returns the ExpenseRatio field value if set, zero value otherwise.
func (o *AssetDetail) GetExpenseRatio() float32 {
	if o == nil || o.ExpenseRatio == nil {
		var ret float32
		return ret
	}
	return *o.ExpenseRatio
}

// GetExpenseRatioOk returns a tuple with the ExpenseRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetDetail) GetExpenseRatioOk() (*float32, bool) {
	if o == nil || o.ExpenseRatio == nil {
		return nil, false
	}
	return o.ExpenseRatio, true
}

// HasExpenseRatio returns a boolean if a field has been set.
func (o *AssetDetail) HasExpenseRatio() bool {
	if o != nil && o.ExpenseRatio != nil {
		return true
	}

	return false
}

// SetExpenseRatio gets a reference to the given float32 and assigns it to the ExpenseRatio field.
func (o *AssetDetail) SetExpenseRatio(v float32) {
	o.ExpenseRatio = &v
}

func (o AssetDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["isin"] = o.Isin
	}
	if true {
		toSerialize["ticker"] = o.Ticker
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["market"] = o.Market
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if o.ExtraData != nil {
		toSerialize["extra_data"] = o.ExtraData
	}
	if true {
		toSerialize["categories"] = o.Categories
	}
	if o.AssetType != nil {
		toSerialize["asset_type"] = o.AssetType
	}
	if o.ExpenseRatio != nil {
		toSerialize["expense_ratio"] = o.ExpenseRatio
	}
	return json.Marshal(toSerialize)
}

type NullableAssetDetail struct {
	value *AssetDetail
	isSet bool
}

func (v NullableAssetDetail) Get() *AssetDetail {
	return v.value
}

func (v *NullableAssetDetail) Set(val *AssetDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetDetail(val *AssetDetail) *NullableAssetDetail {
	return &NullableAssetDetail{value: val, isSet: true}
}

func (v NullableAssetDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


