/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NullEnum the model 'NullEnum'
type NullEnum string

// List of NullEnum
const (
	NULL NullEnum = "null"
)

var allowedNullEnumEnumValues = []NullEnum{
	"null",
}

func (v *NullEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NullEnum(value)
	for _, existing := range allowedNullEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NullEnum", value)
}

// NewNullEnumFromValue returns a pointer to a valid NullEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNullEnumFromValue(v string) (*NullEnum, error) {
	ev := NullEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NullEnum: valid values are %v", v, allowedNullEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NullEnum) IsValid() bool {
	for _, existing := range allowedNullEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NullEnum value
func (v NullEnum) Ptr() *NullEnum {
	return &v
}

type NullableNullEnum struct {
	value *NullEnum
	isSet bool
}

func (v NullableNullEnum) Get() *NullEnum {
	return v.value
}

func (v *NullableNullEnum) Set(val *NullEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableNullEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableNullEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullEnum(val *NullEnum) *NullableNullEnum {
	return &NullableNullEnum{value: val, isSet: true}
}

func (v NullableNullEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

