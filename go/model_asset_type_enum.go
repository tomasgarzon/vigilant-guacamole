/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssetTypeEnum the model 'AssetTypeEnum'
type AssetTypeEnum string

// List of AssetTypeEnum
const (
	ETF AssetTypeEnum = "ETF"
	MUTUAL_FUND AssetTypeEnum = "MUTUAL_FUND"
	STOCK AssetTypeEnum = "STOCK"
)

var allowedAssetTypeEnumEnumValues = []AssetTypeEnum{
	"ETF",
	"MUTUAL_FUND",
	"STOCK",
}

func (v *AssetTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetTypeEnum(value)
	for _, existing := range allowedAssetTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetTypeEnum", value)
}

// NewAssetTypeEnumFromValue returns a pointer to a valid AssetTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetTypeEnumFromValue(v string) (*AssetTypeEnum, error) {
	ev := AssetTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetTypeEnum: valid values are %v", v, allowedAssetTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetTypeEnum) IsValid() bool {
	for _, existing := range allowedAssetTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetTypeEnum value
func (v AssetTypeEnum) Ptr() *AssetTypeEnum {
	return &v
}

type NullableAssetTypeEnum struct {
	value *AssetTypeEnum
	isSet bool
}

func (v NullableAssetTypeEnum) Get() *AssetTypeEnum {
	return v.value
}

func (v *NullableAssetTypeEnum) Set(val *AssetTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetTypeEnum(val *AssetTypeEnum) *NullableAssetTypeEnum {
	return &NullableAssetTypeEnum{value: val, isSet: true}
}

func (v NullableAssetTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

