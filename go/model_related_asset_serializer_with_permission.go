/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RelatedAssetSerializerWithPermission Allow get asset by multiple params or UUID
type RelatedAssetSerializerWithPermission struct {
	Uuid string `json:"uuid"`
	Market *string `json:"market,omitempty"`
	Isin string `json:"isin"`
	Currency *string `json:"currency,omitempty"`
	Ticker string `json:"ticker"`
	Name string `json:"name"`
	ExtraData map[string]interface{} `json:"extra_data,omitempty"`
}

// NewRelatedAssetSerializerWithPermission instantiates a new RelatedAssetSerializerWithPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedAssetSerializerWithPermission(uuid string, isin string, ticker string, name string) *RelatedAssetSerializerWithPermission {
	this := RelatedAssetSerializerWithPermission{}
	this.Uuid = uuid
	this.Isin = isin
	this.Ticker = ticker
	this.Name = name
	return &this
}

// NewRelatedAssetSerializerWithPermissionWithDefaults instantiates a new RelatedAssetSerializerWithPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedAssetSerializerWithPermissionWithDefaults() *RelatedAssetSerializerWithPermission {
	this := RelatedAssetSerializerWithPermission{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *RelatedAssetSerializerWithPermission) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *RelatedAssetSerializerWithPermission) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *RelatedAssetSerializerWithPermission) SetUuid(v string) {
	o.Uuid = v
}

// GetMarket returns the Market field value if set, zero value otherwise.
func (o *RelatedAssetSerializerWithPermission) GetMarket() string {
	if o == nil || o.Market == nil {
		var ret string
		return ret
	}
	return *o.Market
}

// GetMarketOk returns a tuple with the Market field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedAssetSerializerWithPermission) GetMarketOk() (*string, bool) {
	if o == nil || o.Market == nil {
		return nil, false
	}
	return o.Market, true
}

// HasMarket returns a boolean if a field has been set.
func (o *RelatedAssetSerializerWithPermission) HasMarket() bool {
	if o != nil && o.Market != nil {
		return true
	}

	return false
}

// SetMarket gets a reference to the given string and assigns it to the Market field.
func (o *RelatedAssetSerializerWithPermission) SetMarket(v string) {
	o.Market = &v
}

// GetIsin returns the Isin field value
func (o *RelatedAssetSerializerWithPermission) GetIsin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Isin
}

// GetIsinOk returns a tuple with the Isin field value
// and a boolean to check if the value has been set.
func (o *RelatedAssetSerializerWithPermission) GetIsinOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Isin, true
}

// SetIsin sets field value
func (o *RelatedAssetSerializerWithPermission) SetIsin(v string) {
	o.Isin = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *RelatedAssetSerializerWithPermission) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedAssetSerializerWithPermission) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *RelatedAssetSerializerWithPermission) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *RelatedAssetSerializerWithPermission) SetCurrency(v string) {
	o.Currency = &v
}

// GetTicker returns the Ticker field value
func (o *RelatedAssetSerializerWithPermission) GetTicker() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value
// and a boolean to check if the value has been set.
func (o *RelatedAssetSerializerWithPermission) GetTickerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ticker, true
}

// SetTicker sets field value
func (o *RelatedAssetSerializerWithPermission) SetTicker(v string) {
	o.Ticker = v
}

// GetName returns the Name field value
func (o *RelatedAssetSerializerWithPermission) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RelatedAssetSerializerWithPermission) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RelatedAssetSerializerWithPermission) SetName(v string) {
	o.Name = v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RelatedAssetSerializerWithPermission) GetExtraData() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RelatedAssetSerializerWithPermission) GetExtraDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.ExtraData == nil {
		return nil, false
	}
	return &o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *RelatedAssetSerializerWithPermission) HasExtraData() bool {
	if o != nil && o.ExtraData != nil {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given map[string]interface{} and assigns it to the ExtraData field.
func (o *RelatedAssetSerializerWithPermission) SetExtraData(v map[string]interface{}) {
	o.ExtraData = v
}

func (o RelatedAssetSerializerWithPermission) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Market != nil {
		toSerialize["market"] = o.Market
	}
	if true {
		toSerialize["isin"] = o.Isin
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["ticker"] = o.Ticker
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ExtraData != nil {
		toSerialize["extra_data"] = o.ExtraData
	}
	return json.Marshal(toSerialize)
}

type NullableRelatedAssetSerializerWithPermission struct {
	value *RelatedAssetSerializerWithPermission
	isSet bool
}

func (v NullableRelatedAssetSerializerWithPermission) Get() *RelatedAssetSerializerWithPermission {
	return v.value
}

func (v *NullableRelatedAssetSerializerWithPermission) Set(val *RelatedAssetSerializerWithPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedAssetSerializerWithPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedAssetSerializerWithPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedAssetSerializerWithPermission(val *RelatedAssetSerializerWithPermission) *NullableRelatedAssetSerializerWithPermission {
	return &NullableRelatedAssetSerializerWithPermission{value: val, isSet: true}
}

func (v NullableRelatedAssetSerializerWithPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedAssetSerializerWithPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


