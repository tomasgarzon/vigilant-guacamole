/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateOrder A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
type CreateOrder struct {
	Shares int32 `json:"shares"`
	Asset RelatedAssetSerializerWithAssetCategories `json:"asset"`
	Portfolio *string `json:"portfolio,omitempty"`
	OrderType OrderTypeEnum `json:"order_type"`
	Method CreateOrderMethodEnum `json:"method"`
	LimitPrice NullableFloat64 `json:"limit_price,omitempty"`
	StopPrice NullableFloat64 `json:"stop_price,omitempty"`
	Duration NullableOneOfDurationEnumNullEnum `json:"duration,omitempty"`
}

// NewCreateOrder instantiates a new CreateOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrder(shares int32, asset RelatedAssetSerializerWithAssetCategories, orderType OrderTypeEnum, method CreateOrderMethodEnum) *CreateOrder {
	this := CreateOrder{}
	this.Shares = shares
	this.Asset = asset
	this.OrderType = orderType
	this.Method = method
	return &this
}

// NewCreateOrderWithDefaults instantiates a new CreateOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrderWithDefaults() *CreateOrder {
	this := CreateOrder{}
	return &this
}

// GetShares returns the Shares field value
func (o *CreateOrder) GetShares() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value
// and a boolean to check if the value has been set.
func (o *CreateOrder) GetSharesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Shares, true
}

// SetShares sets field value
func (o *CreateOrder) SetShares(v int32) {
	o.Shares = v
}

// GetAsset returns the Asset field value
func (o *CreateOrder) GetAsset() RelatedAssetSerializerWithAssetCategories {
	if o == nil {
		var ret RelatedAssetSerializerWithAssetCategories
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *CreateOrder) GetAssetOk() (*RelatedAssetSerializerWithAssetCategories, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *CreateOrder) SetAsset(v RelatedAssetSerializerWithAssetCategories) {
	o.Asset = v
}

// GetPortfolio returns the Portfolio field value if set, zero value otherwise.
func (o *CreateOrder) GetPortfolio() string {
	if o == nil || o.Portfolio == nil {
		var ret string
		return ret
	}
	return *o.Portfolio
}

// GetPortfolioOk returns a tuple with the Portfolio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrder) GetPortfolioOk() (*string, bool) {
	if o == nil || o.Portfolio == nil {
		return nil, false
	}
	return o.Portfolio, true
}

// HasPortfolio returns a boolean if a field has been set.
func (o *CreateOrder) HasPortfolio() bool {
	if o != nil && o.Portfolio != nil {
		return true
	}

	return false
}

// SetPortfolio gets a reference to the given string and assigns it to the Portfolio field.
func (o *CreateOrder) SetPortfolio(v string) {
	o.Portfolio = &v
}

// GetOrderType returns the OrderType field value
func (o *CreateOrder) GetOrderType() OrderTypeEnum {
	if o == nil {
		var ret OrderTypeEnum
		return ret
	}

	return o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value
// and a boolean to check if the value has been set.
func (o *CreateOrder) GetOrderTypeOk() (*OrderTypeEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrderType, true
}

// SetOrderType sets field value
func (o *CreateOrder) SetOrderType(v OrderTypeEnum) {
	o.OrderType = v
}

// GetMethod returns the Method field value
func (o *CreateOrder) GetMethod() CreateOrderMethodEnum {
	if o == nil {
		var ret CreateOrderMethodEnum
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *CreateOrder) GetMethodOk() (*CreateOrderMethodEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *CreateOrder) SetMethod(v CreateOrderMethodEnum) {
	o.Method = v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOrder) GetLimitPrice() float64 {
	if o == nil || o.LimitPrice.Get() == nil {
		var ret float64
		return ret
	}
	return *o.LimitPrice.Get()
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOrder) GetLimitPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LimitPrice.Get(), o.LimitPrice.IsSet()
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *CreateOrder) HasLimitPrice() bool {
	if o != nil && o.LimitPrice.IsSet() {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given NullableFloat64 and assigns it to the LimitPrice field.
func (o *CreateOrder) SetLimitPrice(v float64) {
	o.LimitPrice.Set(&v)
}
// SetLimitPriceNil sets the value for LimitPrice to be an explicit nil
func (o *CreateOrder) SetLimitPriceNil() {
	o.LimitPrice.Set(nil)
}

// UnsetLimitPrice ensures that no value is present for LimitPrice, not even an explicit nil
func (o *CreateOrder) UnsetLimitPrice() {
	o.LimitPrice.Unset()
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOrder) GetStopPrice() float64 {
	if o == nil || o.StopPrice.Get() == nil {
		var ret float64
		return ret
	}
	return *o.StopPrice.Get()
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOrder) GetStopPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StopPrice.Get(), o.StopPrice.IsSet()
}

// HasStopPrice returns a boolean if a field has been set.
func (o *CreateOrder) HasStopPrice() bool {
	if o != nil && o.StopPrice.IsSet() {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given NullableFloat64 and assigns it to the StopPrice field.
func (o *CreateOrder) SetStopPrice(v float64) {
	o.StopPrice.Set(&v)
}
// SetStopPriceNil sets the value for StopPrice to be an explicit nil
func (o *CreateOrder) SetStopPriceNil() {
	o.StopPrice.Set(nil)
}

// UnsetStopPrice ensures that no value is present for StopPrice, not even an explicit nil
func (o *CreateOrder) UnsetStopPrice() {
	o.StopPrice.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOrder) GetDuration() OneOfDurationEnumNullEnum {
	if o == nil || o.Duration.Get() == nil {
		var ret OneOfDurationEnumNullEnum
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOrder) GetDurationOk() (*OneOfDurationEnumNullEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *CreateOrder) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableOneOfDurationEnumNullEnum and assigns it to the Duration field.
func (o *CreateOrder) SetDuration(v OneOfDurationEnumNullEnum) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *CreateOrder) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *CreateOrder) UnsetDuration() {
	o.Duration.Unset()
}

func (o CreateOrder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["shares"] = o.Shares
	}
	if true {
		toSerialize["asset"] = o.Asset
	}
	if o.Portfolio != nil {
		toSerialize["portfolio"] = o.Portfolio
	}
	if true {
		toSerialize["order_type"] = o.OrderType
	}
	if true {
		toSerialize["method"] = o.Method
	}
	if o.LimitPrice.IsSet() {
		toSerialize["limit_price"] = o.LimitPrice.Get()
	}
	if o.StopPrice.IsSet() {
		toSerialize["stop_price"] = o.StopPrice.Get()
	}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateOrder struct {
	value *CreateOrder
	isSet bool
}

func (v NullableCreateOrder) Get() *CreateOrder {
	return v.value
}

func (v *NullableCreateOrder) Set(val *CreateOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrder(val *CreateOrder) *NullableCreateOrder {
	return &NullableCreateOrder{value: val, isSet: true}
}

func (v NullableCreateOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


