/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderTypeEnum the model 'OrderTypeEnum'
type OrderTypeEnum string

// List of OrderTypeEnum
const (
	BUY OrderTypeEnum = "BUY"
	SELL OrderTypeEnum = "SELL"
	VERIFICATION OrderTypeEnum = "VERIFICATION"
)

var allowedOrderTypeEnumEnumValues = []OrderTypeEnum{
	"BUY",
	"SELL",
	"VERIFICATION",
}

func (v *OrderTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderTypeEnum(value)
	for _, existing := range allowedOrderTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderTypeEnum", value)
}

// NewOrderTypeEnumFromValue returns a pointer to a valid OrderTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderTypeEnumFromValue(v string) (*OrderTypeEnum, error) {
	ev := OrderTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderTypeEnum: valid values are %v", v, allowedOrderTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderTypeEnum) IsValid() bool {
	for _, existing := range allowedOrderTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderTypeEnum value
func (v OrderTypeEnum) Ptr() *OrderTypeEnum {
	return &v
}

type NullableOrderTypeEnum struct {
	value *OrderTypeEnum
	isSet bool
}

func (v NullableOrderTypeEnum) Get() *OrderTypeEnum {
	return v.value
}

func (v *NullableOrderTypeEnum) Set(val *OrderTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderTypeEnum(val *OrderTypeEnum) *NullableOrderTypeEnum {
	return &NullableOrderTypeEnum{value: val, isSet: true}
}

func (v NullableOrderTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

