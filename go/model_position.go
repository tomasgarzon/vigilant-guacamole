/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Position struct for Position
type Position struct {
	Asset RelatedAssetSerializerWithAssetCategories `json:"asset"`
	Shares float64 `json:"shares"`
	Price float64 `json:"price"`
	Value float64 `json:"value"`
	Weight float64 `json:"weight"`
	FxRateAccount float64 `json:"fx_rate_account"`
	AssetCurrencyValue float64 `json:"asset_currency_value"`
}

// NewPosition instantiates a new Position object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPosition(asset RelatedAssetSerializerWithAssetCategories, shares float64, price float64, value float64, weight float64, fxRateAccount float64, assetCurrencyValue float64) *Position {
	this := Position{}
	this.Asset = asset
	this.Shares = shares
	this.Price = price
	this.Value = value
	this.Weight = weight
	this.FxRateAccount = fxRateAccount
	this.AssetCurrencyValue = assetCurrencyValue
	return &this
}

// NewPositionWithDefaults instantiates a new Position object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionWithDefaults() *Position {
	this := Position{}
	return &this
}

// GetAsset returns the Asset field value
func (o *Position) GetAsset() RelatedAssetSerializerWithAssetCategories {
	if o == nil {
		var ret RelatedAssetSerializerWithAssetCategories
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *Position) GetAssetOk() (*RelatedAssetSerializerWithAssetCategories, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *Position) SetAsset(v RelatedAssetSerializerWithAssetCategories) {
	o.Asset = v
}

// GetShares returns the Shares field value
func (o *Position) GetShares() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value
// and a boolean to check if the value has been set.
func (o *Position) GetSharesOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Shares, true
}

// SetShares sets field value
func (o *Position) SetShares(v float64) {
	o.Shares = v
}

// GetPrice returns the Price field value
func (o *Position) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Position) GetPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Position) SetPrice(v float64) {
	o.Price = v
}

// GetValue returns the Value field value
func (o *Position) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Position) GetValueOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Position) SetValue(v float64) {
	o.Value = v
}

// GetWeight returns the Weight field value
func (o *Position) GetWeight() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *Position) GetWeightOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *Position) SetWeight(v float64) {
	o.Weight = v
}

// GetFxRateAccount returns the FxRateAccount field value
func (o *Position) GetFxRateAccount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.FxRateAccount
}

// GetFxRateAccountOk returns a tuple with the FxRateAccount field value
// and a boolean to check if the value has been set.
func (o *Position) GetFxRateAccountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FxRateAccount, true
}

// SetFxRateAccount sets field value
func (o *Position) SetFxRateAccount(v float64) {
	o.FxRateAccount = v
}

// GetAssetCurrencyValue returns the AssetCurrencyValue field value
func (o *Position) GetAssetCurrencyValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AssetCurrencyValue
}

// GetAssetCurrencyValueOk returns a tuple with the AssetCurrencyValue field value
// and a boolean to check if the value has been set.
func (o *Position) GetAssetCurrencyValueOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AssetCurrencyValue, true
}

// SetAssetCurrencyValue sets field value
func (o *Position) SetAssetCurrencyValue(v float64) {
	o.AssetCurrencyValue = v
}

func (o Position) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["asset"] = o.Asset
	}
	if true {
		toSerialize["shares"] = o.Shares
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["weight"] = o.Weight
	}
	if true {
		toSerialize["fx_rate_account"] = o.FxRateAccount
	}
	if true {
		toSerialize["asset_currency_value"] = o.AssetCurrencyValue
	}
	return json.Marshal(toSerialize)
}

type NullablePosition struct {
	value *Position
	isSet bool
}

func (v NullablePosition) Get() *Position {
	return v.value
}

func (v *NullablePosition) Set(val *Position) {
	v.value = val
	v.isSet = true
}

func (v NullablePosition) IsSet() bool {
	return v.isSet
}

func (v *NullablePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePosition(val *Position) *NullablePosition {
	return &NullablePosition{value: val, isSet: true}
}

func (v NullablePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


