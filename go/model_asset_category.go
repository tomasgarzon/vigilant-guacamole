/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AssetCategory struct for AssetCategory
type AssetCategory struct {
	Uuid string `json:"uuid"`
	Name string `json:"name"`
	Code string `json:"code"`
	Order int32 `json:"order"`
	Type string `json:"type"`
}

// NewAssetCategory instantiates a new AssetCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetCategory(uuid string, name string, code string, order int32, type_ string) *AssetCategory {
	this := AssetCategory{}
	this.Uuid = uuid
	this.Name = name
	this.Code = code
	this.Order = order
	this.Type = type_
	return &this
}

// NewAssetCategoryWithDefaults instantiates a new AssetCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetCategoryWithDefaults() *AssetCategory {
	this := AssetCategory{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *AssetCategory) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *AssetCategory) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *AssetCategory) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *AssetCategory) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AssetCategory) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AssetCategory) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value
func (o *AssetCategory) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *AssetCategory) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *AssetCategory) SetCode(v string) {
	o.Code = v
}

// GetOrder returns the Order field value
func (o *AssetCategory) GetOrder() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Order
}

// GetOrderOk returns a tuple with the Order field value
// and a boolean to check if the value has been set.
func (o *AssetCategory) GetOrderOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Order, true
}

// SetOrder sets field value
func (o *AssetCategory) SetOrder(v int32) {
	o.Order = v
}

// GetType returns the Type field value
func (o *AssetCategory) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AssetCategory) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AssetCategory) SetType(v string) {
	o.Type = v
}

func (o AssetCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["order"] = o.Order
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAssetCategory struct {
	value *AssetCategory
	isSet bool
}

func (v NullableAssetCategory) Get() *AssetCategory {
	return v.value
}

func (v *NullableAssetCategory) Set(val *AssetCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetCategory(val *AssetCategory) *NullableAssetCategory {
	return &NullableAssetCategory{value: val, isSet: true}
}

func (v NullableAssetCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


