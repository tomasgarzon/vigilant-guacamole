/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TitleEnum the model 'TitleEnum'
type TitleEnum string

// List of TitleEnum
const (
	MR TitleEnum = "MR"
	MS TitleEnum = "MS"
	MX TitleEnum = "MX"
)

var allowedTitleEnumEnumValues = []TitleEnum{
	"MR",
	"MS",
	"MX",
}

func (v *TitleEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TitleEnum(value)
	for _, existing := range allowedTitleEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TitleEnum", value)
}

// NewTitleEnumFromValue returns a pointer to a valid TitleEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTitleEnumFromValue(v string) (*TitleEnum, error) {
	ev := TitleEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TitleEnum: valid values are %v", v, allowedTitleEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TitleEnum) IsValid() bool {
	for _, existing := range allowedTitleEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TitleEnum value
func (v TitleEnum) Ptr() *TitleEnum {
	return &v
}

type NullableTitleEnum struct {
	value *TitleEnum
	isSet bool
}

func (v NullableTitleEnum) Get() *TitleEnum {
	return v.value
}

func (v *NullableTitleEnum) Set(val *TitleEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTitleEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTitleEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTitleEnum(val *TitleEnum) *NullableTitleEnum {
	return &NullableTitleEnum{value: val, isSet: true}
}

func (v NullableTitleEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTitleEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

