/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// WithdrawalDetail struct for WithdrawalDetail
type WithdrawalDetail struct {
	Uuid string `json:"uuid"`
	Portfolio string `json:"portfolio"`
	Amount float64 `json:"amount"`
	Provider string `json:"provider"`
	Status Status14bEnum `json:"status"`
	// Cancelled reason
	Reason *string `json:"reason,omitempty"`
	Completed NullableTime `json:"completed,omitempty"`
	// Withdrawal reason
	Purpose NullableString `json:"purpose,omitempty"`
	Created time.Time `json:"created"`
	WithdrawalType string `json:"withdrawal_type"`
	// Additional withdrawal attributes for the specific portal
	ExtraData map[string]interface{} `json:"extra_data,omitempty"`
}

// NewWithdrawalDetail instantiates a new WithdrawalDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWithdrawalDetail(uuid string, portfolio string, amount float64, provider string, status Status14bEnum, created time.Time, withdrawalType string) *WithdrawalDetail {
	this := WithdrawalDetail{}
	this.Uuid = uuid
	this.Portfolio = portfolio
	this.Amount = amount
	this.Provider = provider
	this.Status = status
	this.Created = created
	this.WithdrawalType = withdrawalType
	return &this
}

// NewWithdrawalDetailWithDefaults instantiates a new WithdrawalDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWithdrawalDetailWithDefaults() *WithdrawalDetail {
	this := WithdrawalDetail{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *WithdrawalDetail) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *WithdrawalDetail) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *WithdrawalDetail) SetUuid(v string) {
	o.Uuid = v
}

// GetPortfolio returns the Portfolio field value
func (o *WithdrawalDetail) GetPortfolio() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Portfolio
}

// GetPortfolioOk returns a tuple with the Portfolio field value
// and a boolean to check if the value has been set.
func (o *WithdrawalDetail) GetPortfolioOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Portfolio, true
}

// SetPortfolio sets field value
func (o *WithdrawalDetail) SetPortfolio(v string) {
	o.Portfolio = v
}

// GetAmount returns the Amount field value
func (o *WithdrawalDetail) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *WithdrawalDetail) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *WithdrawalDetail) SetAmount(v float64) {
	o.Amount = v
}

// GetProvider returns the Provider field value
func (o *WithdrawalDetail) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *WithdrawalDetail) GetProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *WithdrawalDetail) SetProvider(v string) {
	o.Provider = v
}

// GetStatus returns the Status field value
func (o *WithdrawalDetail) GetStatus() Status14bEnum {
	if o == nil {
		var ret Status14bEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WithdrawalDetail) GetStatusOk() (*Status14bEnum, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WithdrawalDetail) SetStatus(v Status14bEnum) {
	o.Status = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *WithdrawalDetail) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WithdrawalDetail) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *WithdrawalDetail) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *WithdrawalDetail) SetReason(v string) {
	o.Reason = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WithdrawalDetail) GetCompleted() time.Time {
	if o == nil || o.Completed.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Completed.Get()
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WithdrawalDetail) GetCompletedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Completed.Get(), o.Completed.IsSet()
}

// HasCompleted returns a boolean if a field has been set.
func (o *WithdrawalDetail) HasCompleted() bool {
	if o != nil && o.Completed.IsSet() {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given NullableTime and assigns it to the Completed field.
func (o *WithdrawalDetail) SetCompleted(v time.Time) {
	o.Completed.Set(&v)
}
// SetCompletedNil sets the value for Completed to be an explicit nil
func (o *WithdrawalDetail) SetCompletedNil() {
	o.Completed.Set(nil)
}

// UnsetCompleted ensures that no value is present for Completed, not even an explicit nil
func (o *WithdrawalDetail) UnsetCompleted() {
	o.Completed.Unset()
}

// GetPurpose returns the Purpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WithdrawalDetail) GetPurpose() string {
	if o == nil || o.Purpose.Get() == nil {
		var ret string
		return ret
	}
	return *o.Purpose.Get()
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WithdrawalDetail) GetPurposeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Purpose.Get(), o.Purpose.IsSet()
}

// HasPurpose returns a boolean if a field has been set.
func (o *WithdrawalDetail) HasPurpose() bool {
	if o != nil && o.Purpose.IsSet() {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given NullableString and assigns it to the Purpose field.
func (o *WithdrawalDetail) SetPurpose(v string) {
	o.Purpose.Set(&v)
}
// SetPurposeNil sets the value for Purpose to be an explicit nil
func (o *WithdrawalDetail) SetPurposeNil() {
	o.Purpose.Set(nil)
}

// UnsetPurpose ensures that no value is present for Purpose, not even an explicit nil
func (o *WithdrawalDetail) UnsetPurpose() {
	o.Purpose.Unset()
}

// GetCreated returns the Created field value
func (o *WithdrawalDetail) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *WithdrawalDetail) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *WithdrawalDetail) SetCreated(v time.Time) {
	o.Created = v
}

// GetWithdrawalType returns the WithdrawalType field value
func (o *WithdrawalDetail) GetWithdrawalType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WithdrawalType
}

// GetWithdrawalTypeOk returns a tuple with the WithdrawalType field value
// and a boolean to check if the value has been set.
func (o *WithdrawalDetail) GetWithdrawalTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WithdrawalType, true
}

// SetWithdrawalType sets field value
func (o *WithdrawalDetail) SetWithdrawalType(v string) {
	o.WithdrawalType = v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WithdrawalDetail) GetExtraData() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WithdrawalDetail) GetExtraDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.ExtraData == nil {
		return nil, false
	}
	return &o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *WithdrawalDetail) HasExtraData() bool {
	if o != nil && o.ExtraData != nil {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given map[string]interface{} and assigns it to the ExtraData field.
func (o *WithdrawalDetail) SetExtraData(v map[string]interface{}) {
	o.ExtraData = v
}

func (o WithdrawalDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["portfolio"] = o.Portfolio
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Completed.IsSet() {
		toSerialize["completed"] = o.Completed.Get()
	}
	if o.Purpose.IsSet() {
		toSerialize["purpose"] = o.Purpose.Get()
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["withdrawal_type"] = o.WithdrawalType
	}
	if o.ExtraData != nil {
		toSerialize["extra_data"] = o.ExtraData
	}
	return json.Marshal(toSerialize)
}

type NullableWithdrawalDetail struct {
	value *WithdrawalDetail
	isSet bool
}

func (v NullableWithdrawalDetail) Get() *WithdrawalDetail {
	return v.value
}

func (v *NullableWithdrawalDetail) Set(val *WithdrawalDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableWithdrawalDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableWithdrawalDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWithdrawalDetail(val *WithdrawalDetail) *NullableWithdrawalDetail {
	return &NullableWithdrawalDetail{value: val, isSet: true}
}

func (v NullableWithdrawalDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWithdrawalDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


