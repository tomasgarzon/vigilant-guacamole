/*
Nucoro API

No description

API version: 4.175.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AssessmentStatusEnum the model 'AssessmentStatusEnum'
type AssessmentStatusEnum string

// List of AssessmentStatusEnum
const (
	PENDING AssessmentStatusEnum = "PENDING"
	COMPLETED AssessmentStatusEnum = "COMPLETED"
	OUTDATED AssessmentStatusEnum = "OUTDATED"
)

var allowedAssessmentStatusEnumEnumValues = []AssessmentStatusEnum{
	"PENDING",
	"COMPLETED",
	"OUTDATED",
}

func (v *AssessmentStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssessmentStatusEnum(value)
	for _, existing := range allowedAssessmentStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssessmentStatusEnum", value)
}

// NewAssessmentStatusEnumFromValue returns a pointer to a valid AssessmentStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssessmentStatusEnumFromValue(v string) (*AssessmentStatusEnum, error) {
	ev := AssessmentStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssessmentStatusEnum: valid values are %v", v, allowedAssessmentStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssessmentStatusEnum) IsValid() bool {
	for _, existing := range allowedAssessmentStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssessmentStatusEnum value
func (v AssessmentStatusEnum) Ptr() *AssessmentStatusEnum {
	return &v
}

type NullableAssessmentStatusEnum struct {
	value *AssessmentStatusEnum
	isSet bool
}

func (v NullableAssessmentStatusEnum) Get() *AssessmentStatusEnum {
	return v.value
}

func (v *NullableAssessmentStatusEnum) Set(val *AssessmentStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAssessmentStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAssessmentStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssessmentStatusEnum(val *AssessmentStatusEnum) *NullableAssessmentStatusEnum {
	return &NullableAssessmentStatusEnum{value: val, isSet: true}
}

func (v NullableAssessmentStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssessmentStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

