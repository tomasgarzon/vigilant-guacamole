//
// ApplicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ApplicationAPI {

    /**
     * enum for parameter target
     */
    public enum Target_apiV2ClientsActivitiesList: String, CaseIterable {
        case empty = ""
        case cashcorporateaction = "cashcorporateaction"
        case charge = "charge"
        case deposit = "deposit"
        case portfolio = "portfolio"
        case rebalance = "rebalance"
        case sharescorporateaction = "sharescorporateaction"
        case withdrawal = "withdrawal"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter target: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsActivitiesList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, target: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedFeedActivityListList?, _ error: Error?) -> Void)) {
        apiV2ClientsActivitiesListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset, target: target).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/activities/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter target: (query)  (optional)
     - returns: RequestBuilder<PaginatedFeedActivityListList> 
     */
    open class func apiV2ClientsActivitiesListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, target: [String]? = nil) -> RequestBuilder<PaginatedFeedActivityListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/activities/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "target": target?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedFeedActivityListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsActivitiesRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: FeedActivityList?, _ error: Error?) -> Void)) {
        apiV2ClientsActivitiesRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/activities/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<FeedActivityList> 
     */
    open class func apiV2ClientsActivitiesRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<FeedActivityList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/activities/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FeedActivityList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsAdviceEnginesList(clientUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsAdviceEnginesListWithRequestBuilder(clientUuid: clientUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/advice-engines/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsAdviceEnginesListWithRequestBuilder(clientUuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/advice-engines/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsAdviceEnginesRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsAdviceEnginesRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/advice-engines/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsAdviceEnginesRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/advice-engines/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter investorFee: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesCreate(clientUuid: UUID, investorFee: InvestorFee, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorFee?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesCreateWithRequestBuilder(clientUuid: clientUuid, investorFee: investorFee).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/billing/fees/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter investorFee: (body)  
     - returns: RequestBuilder<InvestorFee> 
     */
    open class func apiV2ClientsBillingFeesCreateWithRequestBuilder(clientUuid: UUID, investorFee: InvestorFee) -> RequestBuilder<InvestorFee> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investorFee)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorFee>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesDestroy(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesDestroyWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/billing/fees/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsBillingFeesDestroyWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvestorFeeList?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/billing/fees/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedInvestorFeeList> 
     */
    open class func apiV2ClientsBillingFeesListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedInvestorFeeList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvestorFeeList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedInvestorFee: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesPartialUpdate(clientUuid: UUID, uuid: UUID, patchedInvestorFee: PatchedInvestorFee? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorFee?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesPartialUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, patchedInvestorFee: patchedInvestorFee).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/billing/fees/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedInvestorFee: (body)  (optional)
     - returns: RequestBuilder<InvestorFee> 
     */
    open class func apiV2ClientsBillingFeesPartialUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, patchedInvestorFee: PatchedInvestorFee? = nil) -> RequestBuilder<InvestorFee> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedInvestorFee)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorFee>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorFee?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/billing/fees/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<InvestorFee> 
     */
    open class func apiV2ClientsBillingFeesRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<InvestorFee> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorFee>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter investorFee: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingFeesUpdate(clientUuid: UUID, uuid: UUID, investorFee: InvestorFee, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvestorFee?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingFeesUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, investorFee: investorFee).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/billing/fees/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter investorFee: (body)  
     - returns: RequestBuilder<InvestorFee> 
     */
    open class func apiV2ClientsBillingFeesUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, investorFee: InvestorFee) -> RequestBuilder<InvestorFee> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/fees/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: investorFee)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvestorFee>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsBillingInvoicesList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingInvoicesList(clientUuid: UUID, format: Format_apiV2ClientsBillingInvoicesList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedInvoiceListList?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingInvoicesListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/billing/invoices/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedInvoiceListList> 
     */
    open class func apiV2ClientsBillingInvoicesListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ClientsBillingInvoicesList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedInvoiceListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/invoices/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedInvoiceListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsBillingInvoicesRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsBillingInvoicesRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsBillingInvoicesRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: InvoiceList?, _ error: Error?) -> Void)) {
        apiV2ClientsBillingInvoicesRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/billing/invoices/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<InvoiceList> 
     */
    open class func apiV2ClientsBillingInvoicesRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsBillingInvoicesRetrieve? = nil) -> RequestBuilder<InvoiceList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/billing/invoices/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvoiceList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsReportStatementsList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReportStatementsList(clientUuid: UUID, format: Format_apiV2ClientsReportStatementsList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedStatementList?, _ error: Error?) -> Void)) {
        apiV2ClientsReportStatementsListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/report/statements/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedStatementList> 
     */
    open class func apiV2ClientsReportStatementsListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ClientsReportStatementsList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedStatementList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/report/statements/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStatementList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsReportStatementsRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReportStatementsRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsReportStatementsRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Statement?, _ error: Error?) -> Void)) {
        apiV2ClientsReportStatementsRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/report/statements/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<Statement> 
     */
    open class func apiV2ClientsReportStatementsRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsReportStatementsRetrieve? = nil) -> RequestBuilder<Statement> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/report/statements/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Statement>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsReportTaxReportsList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReportTaxReportsList(clientUuid: UUID, format: Format_apiV2ClientsReportTaxReportsList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedTaxReportList?, _ error: Error?) -> Void)) {
        apiV2ClientsReportTaxReportsListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/report/tax-reports/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedTaxReportList> 
     */
    open class func apiV2ClientsReportTaxReportsListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ClientsReportTaxReportsList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedTaxReportList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/report/tax-reports/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTaxReportList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ClientsReportTaxReportsRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsReportTaxReportsRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsReportTaxReportsRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: TaxReport?, _ error: Error?) -> Void)) {
        apiV2ClientsReportTaxReportsRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/report/tax-reports/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<TaxReport> 
     */
    open class func apiV2ClientsReportTaxReportsRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ClientsReportTaxReportsRetrieve? = nil) -> RequestBuilder<TaxReport> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/report/tax-reports/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaxReport>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter watchlist: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsCreate(clientUuid: UUID, watchlist: Watchlist, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Watchlist?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsCreateWithRequestBuilder(clientUuid: clientUuid, watchlist: watchlist).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/watchlists/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter watchlist: (body)  
     - returns: RequestBuilder<Watchlist> 
     */
    open class func apiV2ClientsWatchlistsCreateWithRequestBuilder(clientUuid: UUID, watchlist: Watchlist) -> RequestBuilder<Watchlist> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlist)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Watchlist>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsDestroy(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsDestroyWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/watchlists/{uuid}/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func apiV2ClientsWatchlistsDestroyWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedWatchlistList?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/watchlists/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedWatchlistList> 
     */
    open class func apiV2ClientsWatchlistsListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedWatchlistList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedWatchlistList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Watchlist?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/watchlists/{uuid}/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Watchlist> 
     */
    open class func apiV2ClientsWatchlistsRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Watchlist> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Watchlist>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter watchlist: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ClientsWatchlistsUpdate(clientUuid: UUID, uuid: UUID, watchlist: Watchlist, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Watchlist?, _ error: Error?) -> Void)) {
        apiV2ClientsWatchlistsUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, watchlist: watchlist).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/watchlists/{uuid}/
     - Applies filters without declaring them explicitly. How? Creating those filters on the fly.  # How it works. - Declare 'filterable_fields' in the view.     E.g. filterable_fields = ['status', 'name']     __all__ is allowed. It applies filters for all model attributes.  - COMMON_FILTERS: common filters configuration.     - key: field name. E.g. status.     - filter_class. filter class for the field.     - args. Args for the filter_class __init__.  These args are taken from the queryset model         E.g. 'args': {'choices': 'STATUS_CHOICES'} means Filter(choices=queryset.model.STATUS_CHOICES)   # How to use it: class PortfolioListCreateView(CommonFilterMixin, InvestorAPIViewMixin, ListCreateAPIView):     filterable_fields = ['status', 'name']  # Filters priority. 1- Explicit filter declared in the filterset_class 2- Filters declared in COMMON_FILTERS 3- Filterset.FILTER_DEFAULTS
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter watchlist: (body)  
     - returns: RequestBuilder<Watchlist> 
     */
    open class func apiV2ClientsWatchlistsUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, watchlist: Watchlist) -> RequestBuilder<Watchlist> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/watchlists/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: watchlist)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Watchlist>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AllocationByAsset?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/allocations-by-asset/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<AllocationByAsset> 
     */
    open class func apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<AllocationByAsset> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/allocations-by-asset/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AllocationByAsset>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AssetConcentrationRisk?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/asset-concentration-risk/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<AssetConcentrationRisk> 
     */
    open class func apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<AssetConcentrationRisk> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/asset-concentration-risk/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AssetConcentrationRisk>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AUMEvoluation?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-evolution/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<AUMEvoluation> 
     */
    open class func apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<AUMEvoluation> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-evolution/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AUMEvoluation>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AUMPortfolioRisk?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-portfolio-risk/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<AUMPortfolioRisk> 
     */
    open class func apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<AUMPortfolioRisk> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-portfolio-risk/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AUMPortfolioRisk>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsAumRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsAumRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsAumRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsClientByRiskRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsClientByRiskRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-risk/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsClientByRiskRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-risk/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsClientByStatusRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsClientByStatusRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-status/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsClientByStatusRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-status/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsClientRankingRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ClientRanking?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsClientRankingRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-ranking/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<ClientRanking> 
     */
    open class func apiV2RelationshipManagerAnalyticsClientRankingRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<ClientRanking> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-ranking/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientRanking>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/inflows-outflows/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/inflows-outflows/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/portfolio-risk-performance/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/portfolio-risk-performance/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter relationshipManagerUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(relationshipManagerUuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveWithRequestBuilder(relationshipManagerUuid: relationshipManagerUuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{relationship_manager_uuid}/analytics/total-active-clients/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter relationshipManagerUuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveWithRequestBuilder(relationshipManagerUuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/total-active-clients/"
        let relationshipManagerUuidPreEscape = "\(APIHelper.mapValueToPathItem(relationshipManagerUuid))"
        let relationshipManagerUuidPostEscape = relationshipManagerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{relationship_manager_uuid}", with: relationshipManagerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerMeRetrieve(apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerMeRetrieveWithRequestBuilder().execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/me/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerMeRetrieveWithRequestBuilder() -> RequestBuilder<RelationshipManager> {
        let localVariablePath = "/api/v2/relationship-manager/me/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2RelationshipManagerRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: RelationshipManager?, _ error: Error?) -> Void)) {
        apiV2RelationshipManagerRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/relationship-manager/{uuid}/
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<RelationshipManager> 
     */
    open class func apiV2RelationshipManagerRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<RelationshipManager> {
        var localVariablePath = "/api/v2/relationship-manager/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RelationshipManager>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ReportStatementsList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ReportStatementsList(clientUuid: UUID, format: Format_apiV2ReportStatementsList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedStatementList?, _ error: Error?) -> Void)) {
        apiV2ReportStatementsListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/report/statements/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedStatementList> 
     */
    open class func apiV2ReportStatementsListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ReportStatementsList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedStatementList> {
        var localVariablePath = "/api/v2/report/statements/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedStatementList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ReportStatementsRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ReportStatementsRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ReportStatementsRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Statement?, _ error: Error?) -> Void)) {
        apiV2ReportStatementsRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/report/statements/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<Statement> 
     */
    open class func apiV2ReportStatementsRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ReportStatementsRetrieve? = nil) -> RequestBuilder<Statement> {
        var localVariablePath = "/api/v2/report/statements/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Statement>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ReportTaxReportList: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ReportTaxReportList(clientUuid: UUID, format: Format_apiV2ReportTaxReportList? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedTaxReportList?, _ error: Error?) -> Void)) {
        apiV2ReportTaxReportListWithRequestBuilder(clientUuid: clientUuid, format: format, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/report/tax-report/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter format: (query)  (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedTaxReportList> 
     */
    open class func apiV2ReportTaxReportListWithRequestBuilder(clientUuid: UUID, format: Format_apiV2ReportTaxReportList? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedTaxReportList> {
        var localVariablePath = "/api/v2/report/tax-report/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTaxReportList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter format
     */
    public enum Format_apiV2ReportTaxReportRetrieve: String, CaseIterable {
        case base64 = "base64"
        case json = "json"
        case pdf = "pdf"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiV2ReportTaxReportRetrieve(clientUuid: UUID, uuid: UUID, format: Format_apiV2ReportTaxReportRetrieve? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: TaxReport?, _ error: Error?) -> Void)) {
        apiV2ReportTaxReportRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, format: format).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/report/tax-report/{uuid}/
     - This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter format: (query)  (optional)
     - returns: RequestBuilder<TaxReport> 
     */
    open class func apiV2ReportTaxReportRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, format: Format_apiV2ReportTaxReportRetrieve? = nil) -> RequestBuilder<TaxReport> {
        var localVariablePath = "/api/v2/report/tax-report/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaxReport>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter addressCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientAddressCreate(clientUuid: UUID, addressCreate: AddressCreate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AddressCreate?, _ error: Error?) -> Void)) {
        clientAddressCreateWithRequestBuilder(clientUuid: clientUuid, addressCreate: addressCreate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/addresses/
     - Create an address for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter addressCreate: (body)  
     - returns: RequestBuilder<AddressCreate> 
     */
    open class func clientAddressCreateWithRequestBuilder(clientUuid: UUID, addressCreate: AddressCreate) -> RequestBuilder<AddressCreate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/addresses/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addressCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientAddressDelete(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        clientAddressDeleteWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/addresses/{uuid}/
     - Delete a client address
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientAddressDeleteWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/addresses/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedAddressUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientAddressPartialUpdate(clientUuid: UUID, uuid: UUID, patchedAddressUpdate: PatchedAddressUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AddressUpdate?, _ error: Error?) -> Void)) {
        clientAddressPartialUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, patchedAddressUpdate: patchedAddressUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/addresses/{uuid}/
     - Partial Update a client address
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedAddressUpdate: (body)  (optional)
     - returns: RequestBuilder<AddressUpdate> 
     */
    open class func clientAddressPartialUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, patchedAddressUpdate: PatchedAddressUpdate? = nil) -> RequestBuilder<AddressUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/addresses/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAddressUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientAddressRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AddressList?, _ error: Error?) -> Void)) {
        clientAddressRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/addresses/{uuid}/
     - Retrieve a client address
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<AddressList> 
     */
    open class func clientAddressRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<AddressList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/addresses/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter addressUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientAddressUpdate(clientUuid: UUID, uuid: UUID, addressUpdate: AddressUpdate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: AddressUpdate?, _ error: Error?) -> Void)) {
        clientAddressUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, addressUpdate: addressUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/addresses/{uuid}/
     - Update a client address
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter addressUpdate: (body)  
     - returns: RequestBuilder<AddressUpdate> 
     */
    open class func clientAddressUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, addressUpdate: AddressUpdate) -> RequestBuilder<AddressUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/addresses/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addressUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddressUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientAddressesList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedAddressListList?, _ error: Error?) -> Void)) {
        clientAddressesListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/addresses/
     - List address for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedAddressListList> 
     */
    open class func clientAddressesListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedAddressListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/addresses/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAddressListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter bankAccountCreateUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientBankAccountCreate(clientUuid: UUID, bankAccountCreateUpdate: BankAccountCreateUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: BankAccountCreateUpdate?, _ error: Error?) -> Void)) {
        clientBankAccountCreateWithRequestBuilder(clientUuid: clientUuid, bankAccountCreateUpdate: bankAccountCreateUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/bank-accounts/
     - Create a bank account for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter bankAccountCreateUpdate: (body)  (optional)
     - returns: RequestBuilder<BankAccountCreateUpdate> 
     */
    open class func clientBankAccountCreateWithRequestBuilder(clientUuid: UUID, bankAccountCreateUpdate: BankAccountCreateUpdate? = nil) -> RequestBuilder<BankAccountCreateUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/bank-accounts/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankAccountCreateUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankAccountCreateUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientBankAccountDelete(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        clientBankAccountDeleteWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/bank-accounts/{uuid}/
     - Delete a client bank account
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientBankAccountDeleteWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedBankAccountCreateUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientBankAccountPartialUpdate(clientUuid: UUID, uuid: UUID, patchedBankAccountCreateUpdate: PatchedBankAccountCreateUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: BankAccountCreateUpdate?, _ error: Error?) -> Void)) {
        clientBankAccountPartialUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, patchedBankAccountCreateUpdate: patchedBankAccountCreateUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/bank-accounts/{uuid}/
     - Partial Update a client bank account
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedBankAccountCreateUpdate: (body)  (optional)
     - returns: RequestBuilder<BankAccountCreateUpdate> 
     */
    open class func clientBankAccountPartialUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, patchedBankAccountCreateUpdate: PatchedBankAccountCreateUpdate? = nil) -> RequestBuilder<BankAccountCreateUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedBankAccountCreateUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankAccountCreateUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientBankAccountRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: BankAccountList?, _ error: Error?) -> Void)) {
        clientBankAccountRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/bank-accounts/{uuid}/
     - Retrieve a client bank account
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<BankAccountList> 
     */
    open class func clientBankAccountRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<BankAccountList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankAccountList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter bankAccountCreateUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientBankAccountUpdate(clientUuid: UUID, uuid: UUID, bankAccountCreateUpdate: BankAccountCreateUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: BankAccountCreateUpdate?, _ error: Error?) -> Void)) {
        clientBankAccountUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, bankAccountCreateUpdate: bankAccountCreateUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/bank-accounts/{uuid}/
     - Update a client bank account
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter bankAccountCreateUpdate: (body)  (optional)
     - returns: RequestBuilder<BankAccountCreateUpdate> 
     */
    open class func clientBankAccountUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, bankAccountCreateUpdate: BankAccountCreateUpdate? = nil) -> RequestBuilder<BankAccountCreateUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/bank-accounts/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: bankAccountCreateUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BankAccountCreateUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientBankAccountsList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedBankAccountListList?, _ error: Error?) -> Void)) {
        clientBankAccountsListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/bank-accounts/
     - List Bank Account for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedBankAccountListList> 
     */
    open class func clientBankAccountsListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedBankAccountListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/bank-accounts/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedBankAccountListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter clientDetail: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientCompleteOnboarding(clientUuid: UUID, uuid: UUID, clientDetail: ClientDetail, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ClientDetail?, _ error: Error?) -> Void)) {
        clientCompleteOnboardingWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, clientDetail: clientDetail).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{uuid}/onboarding/complete/
     - Complete onboarding for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter clientDetail: (body)  
     - returns: RequestBuilder<ClientDetail> 
     */
    open class func clientCompleteOnboardingWithRequestBuilder(clientUuid: UUID, uuid: UUID, clientDetail: ClientDetail) -> RequestBuilder<ClientDetail> {
        var localVariablePath = "/api/v2/clients/{uuid}/onboarding/complete/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clientDetail)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientCreate(clientCreate: ClientCreate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ClientCreate?, _ error: Error?) -> Void)) {
        clientCreateWithRequestBuilder(clientCreate: clientCreate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/
     - Create a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientCreate: (body)  
     - returns: RequestBuilder<ClientCreate> 
     */
    open class func clientCreateWithRequestBuilder(clientCreate: ClientCreate) -> RequestBuilder<ClientCreate> {
        let localVariablePath = "/api/v2/clients/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clientCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (form)  
     - parameter name: (form)  
     - parameter docType: (form)  
     - parameter path: (form)  
     - parameter description: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientDocumentCreate(clientUuid: UUID, uuid: UUID, name: String, docType: DocTypeEnum, path: String, description: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Document?, _ error: Error?) -> Void)) {
        clientDocumentCreateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, name: name, docType: docType, path: path, description: description).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/documents/
     - Create a document for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (form)  
     - parameter name: (form)  
     - parameter docType: (form)  
     - parameter path: (form)  
     - parameter description: (form)  (optional)
     - returns: RequestBuilder<Document> 
     */
    open class func clientDocumentCreateWithRequestBuilder(clientUuid: UUID, uuid: UUID, name: String, docType: DocTypeEnum, path: String, description: String? = nil) -> RequestBuilder<Document> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/documents/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid.encodeToJSON(),
            "name": name.encodeToJSON(),
            "doc_type": docType.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "path": path.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Document>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientDocumentDelete(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        clientDocumentDeleteWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/documents/{uuid}/
     - Delete a client document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientDocumentDeleteWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/documents/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter docType
     */
    public enum DocType_clientDocumentList: String, CaseIterable {
        case bankDetails = "BANK_DETAILS"
        case contract = "CONTRACT"
        case employment = "EMPLOYMENT"
        case idPersonal = "ID_PERSONAL"
        case legal = "LEGAL"
        case maritalStatus = "MARITAL_STATUS"
        case medical = "MEDICAL"
        case others = "OTHERS"
        case pension = "PENSION"
        case transfers = "TRANSFERS"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter client: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter docType: (query)  (optional)
     - parameter extraData: (query) Additional document attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter name: (query)  (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientDocumentList(clientUuid: UUID, client: Int? = nil, description: String? = nil, docType: [String]? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, name: String? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedDocumentList?, _ error: Error?) -> Void)) {
        clientDocumentListWithRequestBuilder(clientUuid: clientUuid, client: client, description: description, docType: docType, extraData: extraData, limit: limit, name: name, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/documents/
     - List Document for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter client: (query)  (optional)
     - parameter description: (query)  (optional)
     - parameter docType: (query)  (optional)
     - parameter extraData: (query) Additional document attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter name: (query)  (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedDocumentList> 
     */
    open class func clientDocumentListWithRequestBuilder(clientUuid: UUID, client: Int? = nil, description: String? = nil, docType: [String]? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, name: String? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedDocumentList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/documents/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client": client?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "doc_type": docType?.encodeToJSON(),
            "extra_data": extraData?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedDocumentList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientDocumentRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Document?, _ error: Error?) -> Void)) {
        clientDocumentRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/documents/{uuid}/
     - Retrieve a client document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Document> 
     */
    open class func clientDocumentRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Document> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/documents/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Document>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter ordering
     */
    public enum Ordering_clientList: String, CaseIterable {
        case activated = "-activated"
        case created = "-created"
        case firstName = "-first_name"
        case lastName = "-last_name"
        case riskLevel = "-risk_level"
        case status = "-status"
        case activated = "activated"
        case created = "created"
        case firstName = "first_name"
        case lastName = "last_name"
        case riskLevel = "risk_level"
        case status = "status"
    }

    /**
     * enum for parameter status
     */
    public enum Status_clientList: String, CaseIterable {
        case active = "ACTIVE"
        case custodianPending = "CUSTODIAN_PENDING"
        case inactive = "INACTIVE"
        case kycPending = "KYC_PENDING"
        case onboarding = "ONBOARDING"
        case pending = "PENDING"
    }

    /**

     - parameter externalCustodianId: (query)  (optional)
     - parameter extraData: (query) Additional client attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter search: (query) A search term. (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientList(externalCustodianId: String? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, offset: Int? = nil, ordering: [String]? = nil, search: String? = nil, status: Status_clientList? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedClientDetailList?, _ error: Error?) -> Void)) {
        clientListWithRequestBuilder(externalCustodianId: externalCustodianId, extraData: extraData, limit: limit, offset: offset, ordering: ordering, search: search, status: status).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/
     - List client for a Relationship manager
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter externalCustodianId: (query)  (optional)
     - parameter extraData: (query) Additional client attributes for the specific portal (optional)
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter ordering: (query) Ordering (optional)
     - parameter search: (query) A search term. (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<PaginatedClientDetailList> 
     */
    open class func clientListWithRequestBuilder(externalCustodianId: String? = nil, extraData: [String: AnyCodable]? = nil, limit: Int? = nil, offset: Int? = nil, ordering: [String]? = nil, search: String? = nil, status: Status_clientList? = nil) -> RequestBuilder<PaginatedClientDetailList> {
        let localVariablePath = "/api/v2/clients/"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "external_custodian_id": externalCustodianId?.encodeToJSON(),
            "extra_data": extraData?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "ordering": ordering?.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "status": status?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedClientDetailList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter nationalityCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientNationalityCreate(clientUuid: UUID, nationalityCreate: NationalityCreate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: NationalityCreate?, _ error: Error?) -> Void)) {
        clientNationalityCreateWithRequestBuilder(clientUuid: clientUuid, nationalityCreate: nationalityCreate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/nationalities/
     - Create nationality for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter nationalityCreate: (body)  
     - returns: RequestBuilder<NationalityCreate> 
     */
    open class func clientNationalityCreateWithRequestBuilder(clientUuid: UUID, nationalityCreate: NationalityCreate) -> RequestBuilder<NationalityCreate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/nationalities/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: nationalityCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NationalityCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientNationlitiesList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedNationalityListList?, _ error: Error?) -> Void)) {
        clientNationlitiesListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/nationalities/
     - List nationlities for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedNationalityListList> 
     */
    open class func clientNationlitiesListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedNationalityListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/nationalities/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedNationalityListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientNationlityDelete(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        clientNationlityDeleteWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/nationalities/{uuid}/
     - Delete a client nationality
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientNationlityDeleteWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedNationalityUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientNationlityPartialUpdate(clientUuid: UUID, uuid: UUID, patchedNationalityUpdate: PatchedNationalityUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: NationalityUpdate?, _ error: Error?) -> Void)) {
        clientNationlityPartialUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, patchedNationalityUpdate: patchedNationalityUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/nationalities/{uuid}/
     - Partial Update a client nationality
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedNationalityUpdate: (body)  (optional)
     - returns: RequestBuilder<NationalityUpdate> 
     */
    open class func clientNationlityPartialUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, patchedNationalityUpdate: PatchedNationalityUpdate? = nil) -> RequestBuilder<NationalityUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedNationalityUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NationalityUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientNationlityRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: NationalityList?, _ error: Error?) -> Void)) {
        clientNationlityRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/nationalities/{uuid}/
     - Retrieve a client nationality
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<NationalityList> 
     */
    open class func clientNationlityRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<NationalityList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NationalityList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter nationalityUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientNationlityUpdate(clientUuid: UUID, uuid: UUID, nationalityUpdate: NationalityUpdate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: NationalityUpdate?, _ error: Error?) -> Void)) {
        clientNationlityUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, nationalityUpdate: nationalityUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/nationalities/{uuid}/
     - Update a client nationality
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter nationalityUpdate: (body)  
     - returns: RequestBuilder<NationalityUpdate> 
     */
    open class func clientNationlityUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, nationalityUpdate: NationalityUpdate) -> RequestBuilder<NationalityUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/nationalities/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: nationalityUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NationalityUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter patchedApplicationClientUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientPartialUpdate(uuid: UUID, patchedApplicationClientUpdate: PatchedApplicationClientUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ApplicationClientUpdate?, _ error: Error?) -> Void)) {
        clientPartialUpdateWithRequestBuilder(uuid: uuid, patchedApplicationClientUpdate: patchedApplicationClientUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{uuid}/
     - Partial Update a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - parameter patchedApplicationClientUpdate: (body)  (optional)
     - returns: RequestBuilder<ApplicationClientUpdate> 
     */
    open class func clientPartialUpdateWithRequestBuilder(uuid: UUID, patchedApplicationClientUpdate: PatchedApplicationClientUpdate? = nil) -> RequestBuilder<ApplicationClientUpdate> {
        var localVariablePath = "/api/v2/clients/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedApplicationClientUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationClientUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientRetrieve(uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ClientDetail?, _ error: Error?) -> Void)) {
        clientRetrieveWithRequestBuilder(uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{uuid}/
     - Retrieve a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - returns: RequestBuilder<ClientDetail> 
     */
    open class func clientRetrieveWithRequestBuilder(uuid: UUID) -> RequestBuilder<ClientDetail> {
        var localVariablePath = "/api/v2/clients/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientDetail>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter assessment: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientRiskAssessmentCreate(clientUuid: UUID, assessment: Assessment, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Assessment?, _ error: Error?) -> Void)) {
        clientRiskAssessmentCreateWithRequestBuilder(clientUuid: clientUuid, assessment: assessment).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/risk-assessments/
     - Create a risk assessment for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter assessment: (body)  
     - returns: RequestBuilder<Assessment> 
     */
    open class func clientRiskAssessmentCreateWithRequestBuilder(clientUuid: UUID, assessment: Assessment) -> RequestBuilder<Assessment> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/risk-assessments/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: assessment)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Assessment>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientRiskAssessmentDelete(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        clientRiskAssessmentDeleteWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/risk-assessments/{uuid}/
     - Delete a client risk assessment
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientRiskAssessmentDeleteWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter status
     */
    public enum Status_clientRiskAssessmentList: String, CaseIterable {
        case completed = "COMPLETED"
        case outdated = "OUTDATED"
        case pending = "PENDING"
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientRiskAssessmentList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, status: [String]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedAssessmentList?, _ error: Error?) -> Void)) {
        clientRiskAssessmentListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset, status: status).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/risk-assessments/
     - List Risk Assessment for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<PaginatedAssessmentList> 
     */
    open class func clientRiskAssessmentListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, status: [String]? = nil) -> RequestBuilder<PaginatedAssessmentList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/risk-assessments/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "status": status?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedAssessmentList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedAssessment: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientRiskAssessmentPartialUpdate(clientUuid: UUID, uuid: UUID, patchedAssessment: PatchedAssessment? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Assessment?, _ error: Error?) -> Void)) {
        clientRiskAssessmentPartialUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, patchedAssessment: patchedAssessment).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/risk-assessments/{uuid}/
     - Partial Update a client risk assessment
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedAssessment: (body)  (optional)
     - returns: RequestBuilder<Assessment> 
     */
    open class func clientRiskAssessmentPartialUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, patchedAssessment: PatchedAssessment? = nil) -> RequestBuilder<Assessment> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedAssessment)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Assessment>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientRiskAssessmentRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Assessment?, _ error: Error?) -> Void)) {
        clientRiskAssessmentRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/risk-assessments/{uuid}/
     - Retrieve a client risk assessment
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Assessment> 
     */
    open class func clientRiskAssessmentRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Assessment> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/risk-assessments/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Assessment>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientTWRRPerformance(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ClientPerformance?, _ error: Error?) -> Void)) {
        clientTWRRPerformanceWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{uuid}/performance/twrr/
     - Calculate TWRR Performance for client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<ClientPerformance> 
     */
    open class func clientTWRRPerformanceWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<ClientPerformance> {
        var localVariablePath = "/api/v2/clients/{uuid}/performance/twrr/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClientPerformance>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter taxInformationCreateUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientTaxInformationCreate(clientUuid: UUID, taxInformationCreateUpdate: TaxInformationCreateUpdate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: TaxInformationCreateUpdate?, _ error: Error?) -> Void)) {
        clientTaxInformationCreateWithRequestBuilder(clientUuid: clientUuid, taxInformationCreateUpdate: taxInformationCreateUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/tax-informations/
     - Create a tax inforation for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter taxInformationCreateUpdate: (body)  
     - returns: RequestBuilder<TaxInformationCreateUpdate> 
     */
    open class func clientTaxInformationCreateWithRequestBuilder(clientUuid: UUID, taxInformationCreateUpdate: TaxInformationCreateUpdate) -> RequestBuilder<TaxInformationCreateUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/tax-informations/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: taxInformationCreateUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaxInformationCreateUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientTaxInformationDelete(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        clientTaxInformationDeleteWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/tax-informations/{uuid}/
     - Delete a client tax inforation
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientTaxInformationDeleteWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientTaxInformationList(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedTaxInformationListList?, _ error: Error?) -> Void)) {
        clientTaxInformationListWithRequestBuilder(clientUuid: clientUuid, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/tax-informations/
     - List tax information for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedTaxInformationListList> 
     */
    open class func clientTaxInformationListWithRequestBuilder(clientUuid: UUID, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedTaxInformationListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/tax-informations/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedTaxInformationListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedTaxInformationCreateUpdate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientTaxInformationPartialUpdate(clientUuid: UUID, uuid: UUID, patchedTaxInformationCreateUpdate: PatchedTaxInformationCreateUpdate? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: TaxInformationCreateUpdate?, _ error: Error?) -> Void)) {
        clientTaxInformationPartialUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, patchedTaxInformationCreateUpdate: patchedTaxInformationCreateUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/tax-informations/{uuid}/
     - Partial Update a client tax inforation
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter patchedTaxInformationCreateUpdate: (body)  (optional)
     - returns: RequestBuilder<TaxInformationCreateUpdate> 
     */
    open class func clientTaxInformationPartialUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, patchedTaxInformationCreateUpdate: PatchedTaxInformationCreateUpdate? = nil) -> RequestBuilder<TaxInformationCreateUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedTaxInformationCreateUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaxInformationCreateUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientTaxInformationRetrieve(clientUuid: UUID, uuid: UUID, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: TaxInformationList?, _ error: Error?) -> Void)) {
        clientTaxInformationRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/tax-informations/{uuid}/
     - Retrieve a client tax inforation
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - returns: RequestBuilder<TaxInformationList> 
     */
    open class func clientTaxInformationRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID) -> RequestBuilder<TaxInformationList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaxInformationList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter taxInformationCreateUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientTaxInformationUpdate(clientUuid: UUID, uuid: UUID, taxInformationCreateUpdate: TaxInformationCreateUpdate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: TaxInformationCreateUpdate?, _ error: Error?) -> Void)) {
        clientTaxInformationUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, taxInformationCreateUpdate: taxInformationCreateUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/tax-informations/{uuid}/
     - Update a client tax inforation
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter taxInformationCreateUpdate: (body)  
     - returns: RequestBuilder<TaxInformationCreateUpdate> 
     */
    open class func clientTaxInformationUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, taxInformationCreateUpdate: TaxInformationCreateUpdate) -> RequestBuilder<TaxInformationCreateUpdate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/tax-informations/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: taxInformationCreateUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TaxInformationCreateUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter uuid: (path)  
     - parameter applicationClientUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientUpdate(uuid: UUID, applicationClientUpdate: ApplicationClientUpdate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ApplicationClientUpdate?, _ error: Error?) -> Void)) {
        clientUpdateWithRequestBuilder(uuid: uuid, applicationClientUpdate: applicationClientUpdate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{uuid}/
     - Update a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter uuid: (path)  
     - parameter applicationClientUpdate: (body)  
     - returns: RequestBuilder<ApplicationClientUpdate> 
     */
    open class func clientUpdateWithRequestBuilder(uuid: UUID, applicationClientUpdate: ApplicationClientUpdate) -> RequestBuilder<ApplicationClientUpdate> {
        var localVariablePath = "/api/v2/clients/{uuid}/"
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: applicationClientUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApplicationClientUpdate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter verificationCreate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationCreate(clientUuid: UUID, verifyTypeCode: String, verificationCreate: VerificationCreate, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationCreate?, _ error: Error?) -> Void)) {
        clientVerificationCreateWithRequestBuilder(clientUuid: clientUuid, verifyTypeCode: verifyTypeCode, verificationCreate: verificationCreate).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/
     - Create a verification for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter verificationCreate: (body)  
     - returns: RequestBuilder<VerificationCreate> 
     */
    open class func clientVerificationCreateWithRequestBuilder(clientUuid: UUID, verifyTypeCode: String, verificationCreate: VerificationCreate) -> RequestBuilder<VerificationCreate> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verificationCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationCreate>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid: (form)  
     - parameter verifyType: (form)  
     - parameter created: (form)  
     - parameter updated: (form)  
     - parameter verificationDocuments: (form)  
     - parameter status: (form)  (optional)
     - parameter result: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentCreate(clientUuid: UUID, verifyTypeCode: String, uuid: UUID, verifyType: VerifyTypeEnum, created: Date, updated: Date, verificationDocuments: [VerificationDocumentCreate], status: StatusBd7Enum? = nil, result: VerificationWithTypeResultOneOf? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationWithType?, _ error: Error?) -> Void)) {
        clientVerificationDocumentCreateWithRequestBuilder(clientUuid: clientUuid, verifyTypeCode: verifyTypeCode, uuid: uuid, verifyType: verifyType, created: created, updated: updated, verificationDocuments: verificationDocuments, status: status, result: result).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/
     - Create a verification Document for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid: (form)  
     - parameter verifyType: (form)  
     - parameter created: (form)  
     - parameter updated: (form)  
     - parameter verificationDocuments: (form)  
     - parameter status: (form)  (optional)
     - parameter result: (form)  (optional)
     - returns: RequestBuilder<VerificationWithType> 
     */
    open class func clientVerificationDocumentCreateWithRequestBuilder(clientUuid: UUID, verifyTypeCode: String, uuid: UUID, verifyType: VerifyTypeEnum, created: Date, updated: Date, verificationDocuments: [VerificationDocumentCreate], status: StatusBd7Enum? = nil, result: VerificationWithTypeResultOneOf? = nil) -> RequestBuilder<VerificationWithType> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid.encodeToJSON(),
            "verify_type": verifyType.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "result": result?.encodeToJSON(),
            "created": created.encodeToJSON(),
            "updated": updated.encodeToJSON(),
            "verification_documents": verificationDocuments.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationWithType>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentDelete(clientUuid: UUID, uuid: UUID, verifyTypeCode: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        clientVerificationDocumentDeleteWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, verifyTypeCode: verifyTypeCode).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/
     - Delete a client verificatoin document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func clientVerificationDocumentDeleteWithRequestBuilder(clientUuid: UUID, uuid: UUID, verifyTypeCode: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentList(clientUuid: UUID, verifyTypeCode: String, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedVerificationDocumentList?, _ error: Error?) -> Void)) {
        clientVerificationDocumentListWithRequestBuilder(clientUuid: clientUuid, verifyTypeCode: verifyTypeCode, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/
     - List Verification Document for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedVerificationDocumentList> 
     */
    open class func clientVerificationDocumentListWithRequestBuilder(clientUuid: UUID, verifyTypeCode: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedVerificationDocumentList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedVerificationDocumentList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid2: (form)  (optional)
     - parameter documentType: (form)  (optional)
     - parameter documentFront: (form)  (optional)
     - parameter documentBack: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentPartialUpdate(clientUuid: UUID, uuid: UUID, verifyTypeCode: String, uuid2: UUID? = nil, documentType: DocumentTypeEnum? = nil, documentFront: String? = nil, documentBack: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationDocument?, _ error: Error?) -> Void)) {
        clientVerificationDocumentPartialUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, verifyTypeCode: verifyTypeCode, uuid2: uuid2, documentType: documentType, documentFront: documentFront, documentBack: documentBack).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/
     - Partial Update a client verification document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid2: (form)  (optional)
     - parameter documentType: (form)  (optional)
     - parameter documentFront: (form)  (optional)
     - parameter documentBack: (form)  (optional)
     - returns: RequestBuilder<VerificationDocument> 
     */
    open class func clientVerificationDocumentPartialUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, verifyTypeCode: String, uuid2: UUID? = nil, documentType: DocumentTypeEnum? = nil, documentFront: String? = nil, documentBack: String? = nil) -> RequestBuilder<VerificationDocument> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid2?.encodeToJSON(),
            "document_type": documentType?.encodeToJSON(),
            "document_front": documentFront?.encodeToJSON(),
            "document_back": documentBack?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationDocument>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentRetrieve(clientUuid: UUID, uuid: UUID, verifyTypeCode: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationDocument?, _ error: Error?) -> Void)) {
        clientVerificationDocumentRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, verifyTypeCode: verifyTypeCode).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/
     - Retrieve a client verification document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - returns: RequestBuilder<VerificationDocument> 
     */
    open class func clientVerificationDocumentRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, verifyTypeCode: String) -> RequestBuilder<VerificationDocument> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationDocument>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid2: (form)  
     - parameter documentType: (form)  
     - parameter documentFront: (form)  
     - parameter documentBack: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationDocumentUpdate(clientUuid: UUID, uuid: UUID, verifyTypeCode: String, uuid2: UUID, documentType: DocumentTypeEnum, documentFront: String, documentBack: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationDocument?, _ error: Error?) -> Void)) {
        clientVerificationDocumentUpdateWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, verifyTypeCode: verifyTypeCode, uuid2: uuid2, documentType: documentType, documentFront: documentFront, documentBack: documentBack).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/
     - Update a client verification document
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter uuid2: (form)  
     - parameter documentType: (form)  
     - parameter documentFront: (form)  
     - parameter documentBack: (form)  
     - returns: RequestBuilder<VerificationDocument> 
     */
    open class func clientVerificationDocumentUpdateWithRequestBuilder(clientUuid: UUID, uuid: UUID, verifyTypeCode: String, uuid2: UUID, documentType: DocumentTypeEnum, documentFront: String, documentBack: String) -> RequestBuilder<VerificationDocument> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "uuid": uuid2.encodeToJSON(),
            "document_type": documentType.encodeToJSON(),
            "document_front": documentFront.encodeToJSON(),
            "document_back": documentBack.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationDocument>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationList(clientUuid: UUID, verifyTypeCode: String, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: PaginatedVerificationListList?, _ error: Error?) -> Void)) {
        clientVerificationListWithRequestBuilder(clientUuid: clientUuid, verifyTypeCode: verifyTypeCode, limit: limit, offset: offset).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/
     - List Verification for a client
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter limit: (query) Number of results to return per page. (optional)
     - parameter offset: (query) The initial index from which to return the results. (optional)
     - returns: RequestBuilder<PaginatedVerificationListList> 
     */
    open class func clientVerificationListWithRequestBuilder(clientUuid: UUID, verifyTypeCode: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<PaginatedVerificationListList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedVerificationListList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clientVerificationRetrieve(clientUuid: UUID, uuid: UUID, verifyTypeCode: String, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: VerificationList?, _ error: Error?) -> Void)) {
        clientVerificationRetrieveWithRequestBuilder(clientUuid: clientUuid, uuid: uuid, verifyTypeCode: verifyTypeCode).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{uuid}/
     - Retrieve a client verification 
     - API Key:
       - type: apiKey Session 
       - name: cookieAuth
     - BASIC:
       - type: http
       - name: jwtAuth
     - API Key:
       - type: apiKey Authorization 
       - name: tokenAuth
     - parameter clientUuid: (path)  
     - parameter uuid: (path)  
     - parameter verifyTypeCode: (path)  
     - returns: RequestBuilder<VerificationList> 
     */
    open class func clientVerificationRetrieveWithRequestBuilder(clientUuid: UUID, uuid: UUID, verifyTypeCode: String) -> RequestBuilder<VerificationList> {
        var localVariablePath = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{uuid}/"
        let clientUuidPreEscape = "\(APIHelper.mapValueToPathItem(clientUuid))"
        let clientUuidPostEscape = clientUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_uuid}", with: clientUuidPostEscape, options: .literal, range: nil)
        let uuidPreEscape = "\(APIHelper.mapValueToPathItem(uuid))"
        let uuidPostEscape = uuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uuid}", with: uuidPostEscape, options: .literal, range: nil)
        let verifyTypeCodePreEscape = "\(APIHelper.mapValueToPathItem(verifyTypeCode))"
        let verifyTypeCodePostEscape = verifyTypeCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{verify_type_code}", with: verifyTypeCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerificationList>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
