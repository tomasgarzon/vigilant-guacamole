//
// CreateOrder.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations */
public struct CreateOrder: Codable, Hashable {

    public var shares: Int
    public var asset: RelatedAssetSerializerWithAssetCategories
    public var portfolio: String?
    public var orderType: OrderTypeEnum
    public var method: CreateOrderMethodEnum
    public var limitPrice: Double?
    public var stopPrice: Double?
    public var duration: CreateOrderDurationOneOf?

    public init(shares: Int, asset: RelatedAssetSerializerWithAssetCategories, portfolio: String? = nil, orderType: OrderTypeEnum, method: CreateOrderMethodEnum, limitPrice: Double? = nil, stopPrice: Double? = nil, duration: CreateOrderDurationOneOf? = nil) {
        self.shares = shares
        self.asset = asset
        self.portfolio = portfolio
        self.orderType = orderType
        self.method = method
        self.limitPrice = limitPrice
        self.stopPrice = stopPrice
        self.duration = duration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case shares
        case asset
        case portfolio
        case orderType = "order_type"
        case method
        case limitPrice = "limit_price"
        case stopPrice = "stop_price"
        case duration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(shares, forKey: .shares)
        try container.encode(asset, forKey: .asset)
        try container.encodeIfPresent(portfolio, forKey: .portfolio)
        try container.encode(orderType, forKey: .orderType)
        try container.encode(method, forKey: .method)
        try container.encodeIfPresent(limitPrice, forKey: .limitPrice)
        try container.encodeIfPresent(stopPrice, forKey: .stopPrice)
        try container.encodeIfPresent(duration, forKey: .duration)
    }
}

