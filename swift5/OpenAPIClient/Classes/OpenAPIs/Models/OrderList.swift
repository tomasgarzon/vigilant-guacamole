//
// OrderList.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations */
public struct OrderList: Codable, Hashable {

    public var asset: RelatedAssetSerializerWithAssetCategories
    public var trade: String
    public var orderType: OrderTypeEnum
    public var method: OrderListMethodEnum
    public var status: OrderListStatusEnum
    public var reason: String
    public var completed: Date
    public var rebalance: String
    public var portfolio: String
    public var shares: Double
    public var amount: Double
    public var priceAvg: Double
    public var currency: Currency
    public var withdrawal: String
    public var created: Date
    public var stopPrice: Double?
    public var limitPrice: Double?
    public var duration: String

    public init(asset: RelatedAssetSerializerWithAssetCategories, trade: String, orderType: OrderTypeEnum, method: OrderListMethodEnum, status: OrderListStatusEnum, reason: String, completed: Date, rebalance: String, portfolio: String, shares: Double, amount: Double, priceAvg: Double, currency: Currency, withdrawal: String, created: Date, stopPrice: Double?, limitPrice: Double?, duration: String) {
        self.asset = asset
        self.trade = trade
        self.orderType = orderType
        self.method = method
        self.status = status
        self.reason = reason
        self.completed = completed
        self.rebalance = rebalance
        self.portfolio = portfolio
        self.shares = shares
        self.amount = amount
        self.priceAvg = priceAvg
        self.currency = currency
        self.withdrawal = withdrawal
        self.created = created
        self.stopPrice = stopPrice
        self.limitPrice = limitPrice
        self.duration = duration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case asset
        case trade
        case orderType = "order_type"
        case method
        case status
        case reason
        case completed
        case rebalance
        case portfolio
        case shares
        case amount
        case priceAvg = "price_avg"
        case currency
        case withdrawal
        case created
        case stopPrice = "stop_price"
        case limitPrice = "limit_price"
        case duration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(asset, forKey: .asset)
        try container.encode(trade, forKey: .trade)
        try container.encode(orderType, forKey: .orderType)
        try container.encode(method, forKey: .method)
        try container.encode(status, forKey: .status)
        try container.encode(reason, forKey: .reason)
        try container.encode(completed, forKey: .completed)
        try container.encode(rebalance, forKey: .rebalance)
        try container.encode(portfolio, forKey: .portfolio)
        try container.encode(shares, forKey: .shares)
        try container.encode(amount, forKey: .amount)
        try container.encode(priceAvg, forKey: .priceAvg)
        try container.encode(currency, forKey: .currency)
        try container.encode(withdrawal, forKey: .withdrawal)
        try container.encode(created, forKey: .created)
        try container.encode(stopPrice, forKey: .stopPrice)
        try container.encode(limitPrice, forKey: .limitPrice)
        try container.encode(duration, forKey: .duration)
    }
}

