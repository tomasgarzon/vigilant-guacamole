//
// ForecastDecumulationRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ForecastDecumulationRequest: Codable, Hashable {

    public var initialAmount: Double
    public var recurringAmount: Double
    public var riskLevel: Int
    public var withdrawalAmount: Double
    public var retirementAge: Int
    public var lifeExpectancy: Int?

    public init(initialAmount: Double, recurringAmount: Double, riskLevel: Int, withdrawalAmount: Double, retirementAge: Int, lifeExpectancy: Int? = nil) {
        self.initialAmount = initialAmount
        self.recurringAmount = recurringAmount
        self.riskLevel = riskLevel
        self.withdrawalAmount = withdrawalAmount
        self.retirementAge = retirementAge
        self.lifeExpectancy = lifeExpectancy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case initialAmount = "initial_amount"
        case recurringAmount = "recurring_amount"
        case riskLevel = "risk_level"
        case withdrawalAmount = "withdrawal_amount"
        case retirementAge = "retirement_age"
        case lifeExpectancy = "life_expectancy"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(initialAmount, forKey: .initialAmount)
        try container.encode(recurringAmount, forKey: .recurringAmount)
        try container.encode(riskLevel, forKey: .riskLevel)
        try container.encode(withdrawalAmount, forKey: .withdrawalAmount)
        try container.encode(retirementAge, forKey: .retirementAge)
        try container.encodeIfPresent(lifeExpectancy, forKey: .lifeExpectancy)
    }
}

