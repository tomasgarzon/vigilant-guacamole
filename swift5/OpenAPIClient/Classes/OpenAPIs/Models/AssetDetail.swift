//
// AssetDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations */
public struct AssetDetail: Codable, Hashable {

    public var uuid: UUID
    public var name: String
    public var isin: String
    public var ticker: String
    public var status: Status6f6Enum?
    public var market: String
    public var currency: String
    public var extraData: [String: AnyCodable]?
    public var categories: [AssetCategory]
    public var assetType: AssetTypeEnum?
    /** This field determines the administrative and operational costs associated to certain types of assets like ETFs or mutual funds. */
    public var expenseRatio: Float?

    public init(uuid: UUID, name: String, isin: String, ticker: String, status: Status6f6Enum? = nil, market: String, currency: String, extraData: [String: AnyCodable]? = nil, categories: [AssetCategory], assetType: AssetTypeEnum? = nil, expenseRatio: Float? = nil) {
        self.uuid = uuid
        self.name = name
        self.isin = isin
        self.ticker = ticker
        self.status = status
        self.market = market
        self.currency = currency
        self.extraData = extraData
        self.categories = categories
        self.assetType = assetType
        self.expenseRatio = expenseRatio
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case name
        case isin
        case ticker
        case status
        case market
        case currency
        case extraData = "extra_data"
        case categories
        case assetType = "asset_type"
        case expenseRatio = "expense_ratio"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(name, forKey: .name)
        try container.encode(isin, forKey: .isin)
        try container.encode(ticker, forKey: .ticker)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encode(market, forKey: .market)
        try container.encode(currency, forKey: .currency)
        try container.encodeIfPresent(extraData, forKey: .extraData)
        try container.encode(categories, forKey: .categories)
        try container.encodeIfPresent(assetType, forKey: .assetType)
        try container.encodeIfPresent(expenseRatio, forKey: .expenseRatio)
    }
}

