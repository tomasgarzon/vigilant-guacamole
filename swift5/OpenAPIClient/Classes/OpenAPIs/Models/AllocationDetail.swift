//
// AllocationDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations */
public struct AllocationDetail: Codable, Hashable {

    public var valuationDate: Date
    public var balance: Double?
    public var invested: Double?
    public var earnings: Double?
    public var cashActive: Double
    public var tradeTotal: Double?
    public var performance: Double
    public var positions: [String]

    public init(valuationDate: Date, balance: Double? = nil, invested: Double? = nil, earnings: Double? = nil, cashActive: Double, tradeTotal: Double? = nil, performance: Double, positions: [String]) {
        self.valuationDate = valuationDate
        self.balance = balance
        self.invested = invested
        self.earnings = earnings
        self.cashActive = cashActive
        self.tradeTotal = tradeTotal
        self.performance = performance
        self.positions = positions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case valuationDate = "valuation_date"
        case balance
        case invested
        case earnings
        case cashActive = "cash_active"
        case tradeTotal = "trade_total"
        case performance
        case positions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(valuationDate, forKey: .valuationDate)
        try container.encodeIfPresent(balance, forKey: .balance)
        try container.encodeIfPresent(invested, forKey: .invested)
        try container.encodeIfPresent(earnings, forKey: .earnings)
        try container.encode(cashActive, forKey: .cashActive)
        try container.encodeIfPresent(tradeTotal, forKey: .tradeTotal)
        try container.encode(performance, forKey: .performance)
        try container.encode(positions, forKey: .positions)
    }
}

