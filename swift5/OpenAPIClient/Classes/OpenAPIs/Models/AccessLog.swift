//
// AccessLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A ModelSerializer that takes additional arguments for \&quot;fields\&quot;, \&quot;omit\&quot; and \&quot;expand\&quot; in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations */
public struct AccessLog: Codable, Hashable {

    public var uuid: UUID
    public var created: Date
    public var userAgent: String
    public var ipAddress: String
    public var browser: String
    public var browserVersion: String
    public var deviceBrand: String
    public var deviceModel: String
    public var os: String
    public var osVersion: String
    public var channel: ChannelEnum
    public var country: String
    public var city: String

    public init(uuid: UUID, created: Date, userAgent: String, ipAddress: String, browser: String, browserVersion: String, deviceBrand: String, deviceModel: String, os: String, osVersion: String, channel: ChannelEnum, country: String, city: String) {
        self.uuid = uuid
        self.created = created
        self.userAgent = userAgent
        self.ipAddress = ipAddress
        self.browser = browser
        self.browserVersion = browserVersion
        self.deviceBrand = deviceBrand
        self.deviceModel = deviceModel
        self.os = os
        self.osVersion = osVersion
        self.channel = channel
        self.country = country
        self.city = city
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case created
        case userAgent = "user_agent"
        case ipAddress = "ip_address"
        case browser
        case browserVersion = "browser_version"
        case deviceBrand = "device_brand"
        case deviceModel = "device_model"
        case os
        case osVersion = "os_version"
        case channel
        case country
        case city
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(created, forKey: .created)
        try container.encode(userAgent, forKey: .userAgent)
        try container.encode(ipAddress, forKey: .ipAddress)
        try container.encode(browser, forKey: .browser)
        try container.encode(browserVersion, forKey: .browserVersion)
        try container.encode(deviceBrand, forKey: .deviceBrand)
        try container.encode(deviceModel, forKey: .deviceModel)
        try container.encode(os, forKey: .os)
        try container.encode(osVersion, forKey: .osVersion)
        try container.encode(channel, forKey: .channel)
        try container.encode(country, forKey: .country)
        try container.encode(city, forKey: .city)
    }
}

