"""
    Nucoro API

    No description  # noqa: E501

    The version of the OpenAPI document: 4.175.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nucoro_api.api_client import ApiClient, Endpoint as _Endpoint
from nucoro_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from nucoro_api.model.allocation_detail import AllocationDetail
from nucoro_api.model.allocation_list import AllocationList
from nucoro_api.model.asset_detail import AssetDetail
from nucoro_api.model.attachment import Attachment
from nucoro_api.model.authentication_response import AuthenticationResponse
from nucoro_api.model.client_referral import ClientReferral
from nucoro_api.model.conversation_create import ConversationCreate
from nucoro_api.model.create_order import CreateOrder
from nucoro_api.model.current_allocation import CurrentAllocation
from nucoro_api.model.deposit_create import DepositCreate
from nucoro_api.model.deposit_detail import DepositDetail
from nucoro_api.model.ets_forecast_request import ETSForecastRequest
from nucoro_api.model.email_verify_request import EmailVerifyRequest
from nucoro_api.model.email_verify_view import EmailVerifyView
from nucoro_api.model.feed_activity_list import FeedActivityList
from nucoro_api.model.forecast_decumulation_request import ForecastDecumulationRequest
from nucoro_api.model.forecast_request import ForecastRequest
from nucoro_api.model.goal import Goal
from nucoro_api.model.intraday_price import IntradayPrice
from nucoro_api.model.investor_model_portfolio import InvestorModelPortfolio
from nucoro_api.model.investor_withdrawal_create import InvestorWithdrawalCreate
from nucoro_api.model.invoice_details import InvoiceDetails
from nucoro_api.model.message import Message
from nucoro_api.model.minimum_app_version import MinimumAppVersion
from nucoro_api.model.model_portfolio_forecast_request import ModelPortfolioForecastRequest
from nucoro_api.model.nucoro_setting import NucoroSetting
from nucoro_api.model.order_list import OrderList
from nucoro_api.model.paginated_access_log_list import PaginatedAccessLogList
from nucoro_api.model.paginated_allocation_list_list import PaginatedAllocationListList
from nucoro_api.model.paginated_asset_category_list import PaginatedAssetCategoryList
from nucoro_api.model.paginated_asset_growth_list import PaginatedAssetGrowthList
from nucoro_api.model.paginated_asset_list_list import PaginatedAssetListList
from nucoro_api.model.paginated_base_portfolio_type_restrictions_list import PaginatedBasePortfolioTypeRestrictionsList
from nucoro_api.model.paginated_category_list import PaginatedCategoryList
from nucoro_api.model.paginated_conversation_list_list import PaginatedConversationListList
from nucoro_api.model.paginated_core_category_group_list import PaginatedCoreCategoryGroupList
from nucoro_api.model.paginated_country_list_list import PaginatedCountryListList
from nucoro_api.model.paginated_deposit_list_list import PaginatedDepositListList
from nucoro_api.model.paginated_feed_activity_list_list import PaginatedFeedActivityListList
from nucoro_api.model.paginated_goal_list import PaginatedGoalList
from nucoro_api.model.paginated_intraday_price_list import PaginatedIntradayPriceList
from nucoro_api.model.paginated_investor_model_portfolio_list import PaginatedInvestorModelPortfolioList
from nucoro_api.model.paginated_investor_withdrawal_list_list import PaginatedInvestorWithdrawalListList
from nucoro_api.model.paginated_invoice_list_list import PaginatedInvoiceListList
from nucoro_api.model.paginated_message_list import PaginatedMessageList
from nucoro_api.model.paginated_national_document_list import PaginatedNationalDocumentList
from nucoro_api.model.paginated_order_list_list import PaginatedOrderListList
from nucoro_api.model.paginated_portfolio_list_list import PaginatedPortfolioListList
from nucoro_api.model.paginated_portfolio_performance_list import PaginatedPortfolioPerformanceList
from nucoro_api.model.paginated_portfolio_performance_positions_list import PaginatedPortfolioPerformancePositionsList
from nucoro_api.model.paginated_portfolio_type_list import PaginatedPortfolioTypeList
from nucoro_api.model.paginated_preset_category_group_list import PaginatedPresetCategoryGroupList
from nucoro_api.model.paginated_price_list import PaginatedPriceList
from nucoro_api.model.paginated_question_list import PaginatedQuestionList
from nucoro_api.model.paginated_rebalance_list import PaginatedRebalanceList
from nucoro_api.model.paginated_tos_list import PaginatedTosList
from nucoro_api.model.patched_goal import PatchedGoal
from nucoro_api.model.patched_portfolio_update import PatchedPortfolioUpdate
from nucoro_api.model.portal_setting_value_list import PortalSettingValueList
from nucoro_api.model.portfolio_create import PortfolioCreate
from nucoro_api.model.portfolio_detail import PortfolioDetail
from nucoro_api.model.portfolio_type_restrictions import PortfolioTypeRestrictions
from nucoro_api.model.portfolio_update import PortfolioUpdate
from nucoro_api.model.price import Price
from nucoro_api.model.rebalance import Rebalance
from nucoro_api.model.response import Response
from nucoro_api.model.subscribe import Subscribe
from nucoro_api.model.tos import Tos
from nucoro_api.model.unsubscribe import Unsubscribe
from nucoro_api.model.websocket_authentication import WebsocketAuthentication
from nucoro_api.model.withdrawal_detail import WithdrawalDetail


class ApiApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __api_schema_retrieve(
            self,
            **kwargs
        ):
            """api_schema_retrieve  # noqa: E501

            OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_schema_retrieve(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                format (str): [optional]
                lang (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_schema_retrieve = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/schema/',
                'operation_id': 'api_schema_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'format',
                    'lang',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'format',
                    'lang',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "JSON": "json",
                        "YAML": "yaml"
                    },
                    ('lang',): {

                        "DE-CH": "de-ch",
                        "EN-CH": "en-ch",
                        "EN-GB": "en-gb",
                        "ES-ES": "es-es",
                        "FR-CH": "fr-ch",
                        "IT-CH": "it-ch"
                    },
                },
                'openapi_types': {
                    'format':
                        (str,),
                    'lang':
                        (str,),
                },
                'attribute_map': {
                    'format': 'format',
                    'lang': 'lang',
                },
                'location_map': {
                    'format': 'query',
                    'lang': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/vnd.oai.openapi',
                    'application/yaml',
                    'application/vnd.oai.openapi+json',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_schema_retrieve
        )

        def __api_v2_advice_engines_ets_categories_list(
            self,
            **kwargs
        ):
            """api_v2_advice_engines_ets_categories_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_advice_engines_ets_categories_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedCategoryList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_advice_engines_ets_categories_list = _Endpoint(
            settings={
                'response_type': (PaginatedCategoryList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/advice-engines/ets/categories/',
                'operation_id': 'api_v2_advice_engines_ets_categories_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_advice_engines_ets_categories_list
        )

        def __api_v2_advice_engines_ets_core_category_groups_list(
            self,
            **kwargs
        ):
            """api_v2_advice_engines_ets_core_category_groups_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_advice_engines_ets_core_category_groups_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedCoreCategoryGroupList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_advice_engines_ets_core_category_groups_list = _Endpoint(
            settings={
                'response_type': (PaginatedCoreCategoryGroupList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/advice-engines/ets/core-category-groups/',
                'operation_id': 'api_v2_advice_engines_ets_core_category_groups_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_advice_engines_ets_core_category_groups_list
        )

        def __api_v2_advice_engines_ets_forecast_create(
            self,
            ets_forecast_request,
            **kwargs
        ):
            """api_v2_advice_engines_ets_forecast_create  # noqa: E501

            The forecast positions and amounts for the time_horizon and  risk_level chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_advice_engines_ets_forecast_create(ets_forecast_request, async_req=True)
            >>> result = thread.get()

            Args:
                ets_forecast_request (ETSForecastRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ETSForecastRequest
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['ets_forecast_request'] = \
                ets_forecast_request
            return self.call_with_http_info(**kwargs)

        self.api_v2_advice_engines_ets_forecast_create = _Endpoint(
            settings={
                'response_type': (ETSForecastRequest,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/advice-engines/ets/forecast/',
                'operation_id': 'api_v2_advice_engines_ets_forecast_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ets_forecast_request',
                ],
                'required': [
                    'ets_forecast_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ets_forecast_request':
                        (ETSForecastRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'ets_forecast_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_advice_engines_ets_forecast_create
        )

        def __api_v2_advice_engines_ets_preset_category_groups_list(
            self,
            **kwargs
        ):
            """api_v2_advice_engines_ets_preset_category_groups_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_advice_engines_ets_preset_category_groups_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedPresetCategoryGroupList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_advice_engines_ets_preset_category_groups_list = _Endpoint(
            settings={
                'response_type': (PaginatedPresetCategoryGroupList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/advice-engines/ets/preset-category-groups/',
                'operation_id': 'api_v2_advice_engines_ets_preset_category_groups_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_advice_engines_ets_preset_category_groups_list
        )

        def __api_v2_advice_engines_model_portfolio_forecast_create(
            self,
            model_portfolio_forecast_request,
            **kwargs
        ):
            """api_v2_advice_engines_model_portfolio_forecast_create  # noqa: E501

            The forecast positions and amounts for the time_horizon chosen. Taking into account the initial_auto_deposit and the initial_amount jointly with the selected filters.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_advice_engines_model_portfolio_forecast_create(model_portfolio_forecast_request, async_req=True)
            >>> result = thread.get()

            Args:
                model_portfolio_forecast_request (ModelPortfolioForecastRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ModelPortfolioForecastRequest
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['model_portfolio_forecast_request'] = \
                model_portfolio_forecast_request
            return self.call_with_http_info(**kwargs)

        self.api_v2_advice_engines_model_portfolio_forecast_create = _Endpoint(
            settings={
                'response_type': (ModelPortfolioForecastRequest,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/advice-engines/model-portfolio/forecast/',
                'operation_id': 'api_v2_advice_engines_model_portfolio_forecast_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'model_portfolio_forecast_request',
                ],
                'required': [
                    'model_portfolio_forecast_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'model_portfolio_forecast_request':
                        (ModelPortfolioForecastRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'model_portfolio_forecast_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_advice_engines_model_portfolio_forecast_create
        )

        def __api_v2_advice_engines_model_portfolio_model_portfolios_list(
            self,
            **kwargs
        ):
            """api_v2_advice_engines_model_portfolio_model_portfolios_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_advice_engines_model_portfolio_model_portfolios_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                extra_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Additional ModelPortfolio attributes. [optional]
                limit (int): Number of results to return per page.. [optional]
                name (str): [optional]
                offset (int): The initial index from which to return the results.. [optional]
                risk_higher (int): [optional]
                risk_level (int): [optional]
                risk_lower (int): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedInvestorModelPortfolioList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_advice_engines_model_portfolio_model_portfolios_list = _Endpoint(
            settings={
                'response_type': (PaginatedInvestorModelPortfolioList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/advice-engines/model-portfolio/model-portfolios/',
                'operation_id': 'api_v2_advice_engines_model_portfolio_model_portfolios_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'extra_data',
                    'limit',
                    'name',
                    'offset',
                    'risk_higher',
                    'risk_level',
                    'risk_lower',
                ],
                'required': [],
                'nullable': [
                    'extra_data',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'extra_data':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),
                    'limit':
                        (int,),
                    'name':
                        (str,),
                    'offset':
                        (int,),
                    'risk_higher':
                        (int,),
                    'risk_level':
                        (int,),
                    'risk_lower':
                        (int,),
                },
                'attribute_map': {
                    'extra_data': 'extra_data',
                    'limit': 'limit',
                    'name': 'name',
                    'offset': 'offset',
                    'risk_higher': 'risk_higher',
                    'risk_level': 'risk_level',
                    'risk_lower': 'risk_lower',
                },
                'location_map': {
                    'extra_data': 'query',
                    'limit': 'query',
                    'name': 'query',
                    'offset': 'query',
                    'risk_higher': 'query',
                    'risk_level': 'query',
                    'risk_lower': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_advice_engines_model_portfolio_model_portfolios_list
        )

        def __api_v2_advice_engines_model_portfolio_model_portfolios_retrieve(
            self,
            uuid,
            **kwargs
        ):
            """api_v2_advice_engines_model_portfolio_model_portfolios_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_advice_engines_model_portfolio_model_portfolios_retrieve(uuid, async_req=True)
            >>> result = thread.get()

            Args:
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InvestorModelPortfolio
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_advice_engines_model_portfolio_model_portfolios_retrieve = _Endpoint(
            settings={
                'response_type': (InvestorModelPortfolio,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/advice-engines/model-portfolio/model-portfolios/{uuid}/',
                'operation_id': 'api_v2_advice_engines_model_portfolio_model_portfolios_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'uuid',
                ],
                'required': [
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'uuid': 'uuid',
                },
                'location_map': {
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_advice_engines_model_portfolio_model_portfolios_retrieve
        )

        def __api_v2_assets_categories_list(
            self,
            **kwargs
        ):
            """api_v2_assets_categories_list  # noqa: E501

            Retrieve all asset categories  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_assets_categories_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                type (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedAssetCategoryList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_assets_categories_list = _Endpoint(
            settings={
                'response_type': (PaginatedAssetCategoryList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/assets/categories/',
                'operation_id': 'api_v2_assets_categories_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'type',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                    'type': 'type',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_assets_categories_list
        )

        def __api_v2_assets_intraday_prices_latest_retrieve(
            self,
            asset_identifier,
            **kwargs
        ):
            """api_v2_assets_intraday_prices_latest_retrieve  # noqa: E501

            Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_assets_intraday_prices_latest_retrieve(asset_identifier, async_req=True)
            >>> result = thread.get()

            Args:
                asset_identifier (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IntradayPrice
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_identifier'] = \
                asset_identifier
            return self.call_with_http_info(**kwargs)

        self.api_v2_assets_intraday_prices_latest_retrieve = _Endpoint(
            settings={
                'response_type': (IntradayPrice,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/assets/{asset_identifier}/intraday-prices/latest/',
                'operation_id': 'api_v2_assets_intraday_prices_latest_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_identifier',
                ],
                'required': [
                    'asset_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_identifier':
                        (str,),
                },
                'attribute_map': {
                    'asset_identifier': 'asset_identifier',
                },
                'location_map': {
                    'asset_identifier': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_assets_intraday_prices_latest_retrieve
        )

        def __api_v2_assets_intraday_prices_list(
            self,
            asset_identifier,
            **kwargs
        ):
            """api_v2_assets_intraday_prices_list  # noqa: E501

            Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_assets_intraday_prices_list(asset_identifier, async_req=True)
            >>> result = thread.get()

            Args:
                asset_identifier (str):

            Keyword Args:
                date_after (date): [optional]
                date_before (date): [optional]
                datetime_after (datetime): [optional]
                datetime_before (datetime): [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedIntradayPriceList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_identifier'] = \
                asset_identifier
            return self.call_with_http_info(**kwargs)

        self.api_v2_assets_intraday_prices_list = _Endpoint(
            settings={
                'response_type': (PaginatedIntradayPriceList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/assets/{asset_identifier}/intraday-prices/',
                'operation_id': 'api_v2_assets_intraday_prices_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_identifier',
                    'date_after',
                    'date_before',
                    'datetime_after',
                    'datetime_before',
                    'limit',
                    'offset',
                ],
                'required': [
                    'asset_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_identifier':
                        (str,),
                    'date_after':
                        (date,),
                    'date_before':
                        (date,),
                    'datetime_after':
                        (datetime,),
                    'datetime_before':
                        (datetime,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'asset_identifier': 'asset_identifier',
                    'date_after': 'date_after',
                    'date_before': 'date_before',
                    'datetime_after': 'datetime_after',
                    'datetime_before': 'datetime_before',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'asset_identifier': 'path',
                    'date_after': 'query',
                    'date_before': 'query',
                    'datetime_after': 'query',
                    'datetime_before': 'query',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_assets_intraday_prices_list
        )

        def __api_v2_assets_list(
            self,
            **kwargs
        ):
            """api_v2_assets_list  # noqa: E501

            A list of Assets filtered by category codes. Default is an empty dict which returns the whole universe.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_assets_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                asset_type (str): [optional]
                category_code ([str]): [optional]
                category_type ([str]): [optional]
                currency (int): [optional]
                isin (str): [optional]
                limit (int): Number of results to return per page.. [optional]
                market (int): [optional]
                name (str): [optional]
                offset (int): The initial index from which to return the results.. [optional]
                status (str): [optional]
                ticker (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedAssetListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_assets_list = _Endpoint(
            settings={
                'response_type': (PaginatedAssetListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/assets/',
                'operation_id': 'api_v2_assets_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_type',
                    'category_code',
                    'category_type',
                    'currency',
                    'isin',
                    'limit',
                    'market',
                    'name',
                    'offset',
                    'status',
                    'ticker',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'asset_type',
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('asset_type',): {

                        "ETF": "ETF",
                        "MUTUAL_FUND": "MUTUAL_FUND",
                        "STOCK": "STOCK"
                    },
                    ('status',): {

                        "ACTIVE": "ACTIVE",
                        "DELETED": "DELETED",
                        "INACTIVE": "INACTIVE"
                    },
                },
                'openapi_types': {
                    'asset_type':
                        (str,),
                    'category_code':
                        ([str],),
                    'category_type':
                        ([str],),
                    'currency':
                        (int,),
                    'isin':
                        (str,),
                    'limit':
                        (int,),
                    'market':
                        (int,),
                    'name':
                        (str,),
                    'offset':
                        (int,),
                    'status':
                        (str,),
                    'ticker':
                        (str,),
                },
                'attribute_map': {
                    'asset_type': 'asset_type',
                    'category_code': 'category_code',
                    'category_type': 'category_type',
                    'currency': 'currency',
                    'isin': 'isin',
                    'limit': 'limit',
                    'market': 'market',
                    'name': 'name',
                    'offset': 'offset',
                    'status': 'status',
                    'ticker': 'ticker',
                },
                'location_map': {
                    'asset_type': 'query',
                    'category_code': 'query',
                    'category_type': 'query',
                    'currency': 'query',
                    'isin': 'query',
                    'limit': 'query',
                    'market': 'query',
                    'name': 'query',
                    'offset': 'query',
                    'status': 'query',
                    'ticker': 'query',
                },
                'collection_format_map': {
                    'category_code': 'multi',
                    'category_type': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_assets_list
        )

        def __api_v2_assets_performance_list(
            self,
            asset_identifier,
            **kwargs
        ):
            """api_v2_assets_performance_list  # noqa: E501

            Retrieve asset's yearly performance.  This View overwrites ListAPIView's 'list' method because it doesn't have any hook that allows us to call 'get_asset_price_year_graph after the filtering is applied.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_assets_performance_list(asset_identifier, async_req=True)
            >>> result = thread.get()

            Args:
                asset_identifier (str):

            Keyword Args:
                date_year_after (float): [optional]
                date_year_before (float): [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedAssetGrowthList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_identifier'] = \
                asset_identifier
            return self.call_with_http_info(**kwargs)

        self.api_v2_assets_performance_list = _Endpoint(
            settings={
                'response_type': (PaginatedAssetGrowthList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/assets/{asset_identifier}/performance/',
                'operation_id': 'api_v2_assets_performance_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_identifier',
                    'date_year_after',
                    'date_year_before',
                    'limit',
                    'offset',
                ],
                'required': [
                    'asset_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_identifier':
                        (str,),
                    'date_year_after':
                        (float,),
                    'date_year_before':
                        (float,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'asset_identifier': 'asset_identifier',
                    'date_year_after': 'date_year_after',
                    'date_year_before': 'date_year_before',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'asset_identifier': 'path',
                    'date_year_after': 'query',
                    'date_year_before': 'query',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_assets_performance_list
        )

        def __api_v2_assets_prices_latest_retrieve(
            self,
            asset_identifier,
            **kwargs
        ):
            """api_v2_assets_prices_latest_retrieve  # noqa: E501

            Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_assets_prices_latest_retrieve(asset_identifier, async_req=True)
            >>> result = thread.get()

            Args:
                asset_identifier (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Price
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_identifier'] = \
                asset_identifier
            return self.call_with_http_info(**kwargs)

        self.api_v2_assets_prices_latest_retrieve = _Endpoint(
            settings={
                'response_type': (Price,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/assets/{asset_identifier}/prices/latest/',
                'operation_id': 'api_v2_assets_prices_latest_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_identifier',
                ],
                'required': [
                    'asset_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_identifier':
                        (str,),
                },
                'attribute_map': {
                    'asset_identifier': 'asset_identifier',
                },
                'location_map': {
                    'asset_identifier': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_assets_prices_latest_retrieve
        )

        def __api_v2_assets_prices_list(
            self,
            asset_identifier,
            **kwargs
        ):
            """api_v2_assets_prices_list  # noqa: E501

            Prices (from an Asset) list view endpoints.  GET: Prices retrieve (rest framework builtin overriding get_object)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_assets_prices_list(asset_identifier, async_req=True)
            >>> result = thread.get()

            Args:
                asset_identifier (str):

            Keyword Args:
                date_after (date): [optional]
                date_before (date): [optional]
                datetime_after (datetime): [optional]
                datetime_before (datetime): [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedPriceList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_identifier'] = \
                asset_identifier
            return self.call_with_http_info(**kwargs)

        self.api_v2_assets_prices_list = _Endpoint(
            settings={
                'response_type': (PaginatedPriceList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/assets/{asset_identifier}/prices/',
                'operation_id': 'api_v2_assets_prices_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_identifier',
                    'date_after',
                    'date_before',
                    'datetime_after',
                    'datetime_before',
                    'limit',
                    'offset',
                ],
                'required': [
                    'asset_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_identifier':
                        (str,),
                    'date_after':
                        (date,),
                    'date_before':
                        (date,),
                    'datetime_after':
                        (datetime,),
                    'datetime_before':
                        (datetime,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'asset_identifier': 'asset_identifier',
                    'date_after': 'date_after',
                    'date_before': 'date_before',
                    'datetime_after': 'datetime_after',
                    'datetime_before': 'datetime_before',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'asset_identifier': 'path',
                    'date_after': 'query',
                    'date_before': 'query',
                    'datetime_after': 'query',
                    'datetime_before': 'query',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_assets_prices_list
        )

        def __api_v2_assets_retrieve(
            self,
            asset_identifier,
            **kwargs
        ):
            """api_v2_assets_retrieve  # noqa: E501

            Allows get an asset instance by * UUID * ISIN * ISIN & MARKET_CODE * ISIN & MARKET_CODE & CURRENCY_CODE  Examples:     * assets/a66633d7-4418-4c85-9582-01c80df531d4/     * assets/IE00B579F325/     * assets/IE00B579F325_XETR_GBP/     * assets/IE00B579F325_XETR/  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_assets_retrieve(asset_identifier, async_req=True)
            >>> result = thread.get()

            Args:
                asset_identifier (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['asset_identifier'] = \
                asset_identifier
            return self.call_with_http_info(**kwargs)

        self.api_v2_assets_retrieve = _Endpoint(
            settings={
                'response_type': (AssetDetail,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/assets/{asset_identifier}/',
                'operation_id': 'api_v2_assets_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asset_identifier',
                ],
                'required': [
                    'asset_identifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'asset_identifier':
                        (str,),
                },
                'attribute_map': {
                    'asset_identifier': 'asset_identifier',
                },
                'location_map': {
                    'asset_identifier': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_assets_retrieve
        )

        def __api_v2_billing_invoices_list(
            self,
            **kwargs
        ):
            """api_v2_billing_invoices_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_billing_invoices_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                date_from (date): [optional]
                date_to (date): [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                status (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedInvoiceListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_billing_invoices_list = _Endpoint(
            settings={
                'response_type': (PaginatedInvoiceListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/billing/invoices/',
                'operation_id': 'api_v2_billing_invoices_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'date_from',
                    'date_to',
                    'limit',
                    'offset',
                    'status',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('status',): {

                        "CHARGED": "CHARGED",
                        "PENDING": "PENDING"
                    },
                },
                'openapi_types': {
                    'date_from':
                        (date,),
                    'date_to':
                        (date,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'date_from': 'date_from',
                    'date_to': 'date_to',
                    'limit': 'limit',
                    'offset': 'offset',
                    'status': 'status',
                },
                'location_map': {
                    'date_from': 'query',
                    'date_to': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_billing_invoices_list
        )

        def __api_v2_billing_invoices_retrieve(
            self,
            uuid,
            **kwargs
        ):
            """api_v2_billing_invoices_retrieve  # noqa: E501

            This mixin implements binary responses. It supports PDF and Base64. It can be adapted to any django View that implements the retrieve method  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_billing_invoices_retrieve(uuid, async_req=True)
            >>> result = thread.get()

            Args:
                uuid (str):

            Keyword Args:
                format (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InvoiceDetails
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_billing_invoices_retrieve = _Endpoint(
            settings={
                'response_type': (InvoiceDetails,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/billing/invoices/{uuid}/',
                'operation_id': 'api_v2_billing_invoices_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'uuid',
                    'format',
                ],
                'required': [
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "BASE64": "base64",
                        "JSON": "json",
                        "PDF": "pdf"
                    },
                },
                'openapi_types': {
                    'uuid':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'uuid': 'uuid',
                    'format': 'format',
                },
                'location_map': {
                    'uuid': 'path',
                    'format': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/pdf',
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_billing_invoices_retrieve
        )

        def __api_v2_broker_orders_create(
            self,
            portfolio_uuid,
            create_order,
            **kwargs
        ):
            """api_v2_broker_orders_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_broker_orders_create(portfolio_uuid, create_order, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                create_order (CreateOrder):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreateOrder
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['create_order'] = \
                create_order
            return self.call_with_http_info(**kwargs)

        self.api_v2_broker_orders_create = _Endpoint(
            settings={
                'response_type': (CreateOrder,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/broker/orders/',
                'operation_id': 'api_v2_broker_orders_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'create_order',
                ],
                'required': [
                    'portfolio_uuid',
                    'create_order',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'create_order':
                        (CreateOrder,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'create_order': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_broker_orders_create
        )

        def __api_v2_broker_orders_destroy(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_broker_orders_destroy  # noqa: E501

            Cancel or request cancellation to the broker  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_broker_orders_destroy(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_broker_orders_destroy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/broker/orders/{uuid}/',
                'operation_id': 'api_v2_broker_orders_destroy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_broker_orders_destroy
        )

        def __api_v2_broker_orders_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_broker_orders_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_broker_orders_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                advice_external_id (str): [optional]
                asset (str): [optional]
                completed_after (date): [optional]
                completed_before (date): [optional]
                extra_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Additional order attributes for the specific portal. [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                portfolio (str): [optional]
                status (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedOrderListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_broker_orders_list = _Endpoint(
            settings={
                'response_type': (PaginatedOrderListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/broker/orders/',
                'operation_id': 'api_v2_broker_orders_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'advice_external_id',
                    'asset',
                    'completed_after',
                    'completed_before',
                    'extra_data',
                    'limit',
                    'offset',
                    'portfolio',
                    'status',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                    'extra_data',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'advice_external_id':
                        (str,),
                    'asset':
                        (str,),
                    'completed_after':
                        (date,),
                    'completed_before':
                        (date,),
                    'extra_data':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'portfolio':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'advice_external_id': 'advice_external_id',
                    'asset': 'asset',
                    'completed_after': 'completed_after',
                    'completed_before': 'completed_before',
                    'extra_data': 'extra_data',
                    'limit': 'limit',
                    'offset': 'offset',
                    'portfolio': 'portfolio',
                    'status': 'status',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'advice_external_id': 'query',
                    'asset': 'query',
                    'completed_after': 'query',
                    'completed_before': 'query',
                    'extra_data': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'portfolio': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_broker_orders_list
        )

        def __api_v2_broker_orders_retrieve(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_broker_orders_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_broker_orders_retrieve(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OrderList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_broker_orders_retrieve = _Endpoint(
            settings={
                'response_type': (OrderList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/broker/orders/{uuid}/',
                'operation_id': 'api_v2_broker_orders_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_broker_orders_retrieve
        )

        def __api_v2_clients_me_verify_email_create(
            self,
            **kwargs
        ):
            """api_v2_clients_me_verify_email_create  # noqa: E501

            Request e-mail account verification notification.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_clients_me_verify_email_create(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                email_verify_request (EmailVerifyRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EmailVerifyRequest
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_clients_me_verify_email_create = _Endpoint(
            settings={
                'response_type': (EmailVerifyRequest,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/me/verify/email/',
                'operation_id': 'api_v2_clients_me_verify_email_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'email_verify_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'email_verify_request':
                        (EmailVerifyRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'email_verify_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_clients_me_verify_email_create
        )

        def __api_v2_clients_national_documents_list(
            self,
            **kwargs
        ):
            """api_v2_clients_national_documents_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_clients_national_documents_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedNationalDocumentList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_clients_national_documents_list = _Endpoint(
            settings={
                'response_type': (PaginatedNationalDocumentList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/national_documents/',
                'operation_id': 'api_v2_clients_national_documents_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_clients_national_documents_list
        )

        def __api_v2_clients_referral_retrieve(
            self,
            referral_code,
            **kwargs
        ):
            """api_v2_clients_referral_retrieve  # noqa: E501

            Retrieves the currently logged in client referral code  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_clients_referral_retrieve(referral_code, async_req=True)
            >>> result = thread.get()

            Args:
                referral_code (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ClientReferral
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['referral_code'] = \
                referral_code
            return self.call_with_http_info(**kwargs)

        self.api_v2_clients_referral_retrieve = _Endpoint(
            settings={
                'response_type': (ClientReferral,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/referral/{referral_code}/',
                'operation_id': 'api_v2_clients_referral_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'referral_code',
                ],
                'required': [
                    'referral_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'referral_code':
                        (str,),
                },
                'attribute_map': {
                    'referral_code': 'referral_code',
                },
                'location_map': {
                    'referral_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_clients_referral_retrieve
        )

        def __api_v2_clients_verify_email_update(
            self,
            uuid,
            email_verify_view,
            **kwargs
        ):
            """api_v2_clients_verify_email_update  # noqa: E501

            Verify e-mail account with the given email token.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_clients_verify_email_update(uuid, email_verify_view, async_req=True)
            >>> result = thread.get()

            Args:
                uuid (str):
                email_verify_view (EmailVerifyView):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EmailVerifyView
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['uuid'] = \
                uuid
            kwargs['email_verify_view'] = \
                email_verify_view
            return self.call_with_http_info(**kwargs)

        self.api_v2_clients_verify_email_update = _Endpoint(
            settings={
                'response_type': (EmailVerifyView,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{uuid}/verify/email/',
                'operation_id': 'api_v2_clients_verify_email_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'uuid',
                    'email_verify_view',
                ],
                'required': [
                    'uuid',
                    'email_verify_view',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'uuid':
                        (str,),
                    'email_verify_view':
                        (EmailVerifyView,),
                },
                'attribute_map': {
                    'uuid': 'uuid',
                },
                'location_map': {
                    'uuid': 'path',
                    'email_verify_view': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_clients_verify_email_update
        )

        def __api_v2_feeds_access_logs_list(
            self,
            **kwargs
        ):
            """api_v2_feeds_access_logs_list  # noqa: E501

            Retrieves the latest access to the client's account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_feeds_access_logs_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                browser (str): [optional]
                browser_version (str): [optional]
                channel (str): [optional]
                city (str): [optional]
                country (int): [optional]
                device_brand (str): [optional]
                device_model (str): [optional]
                ip_address (str): [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                os (str): [optional]
                os_version (str): [optional]
                user_agent (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedAccessLogList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_feeds_access_logs_list = _Endpoint(
            settings={
                'response_type': (PaginatedAccessLogList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/feeds/access-logs/',
                'operation_id': 'api_v2_feeds_access_logs_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'browser',
                    'browser_version',
                    'channel',
                    'city',
                    'country',
                    'device_brand',
                    'device_model',
                    'ip_address',
                    'limit',
                    'offset',
                    'os',
                    'os_version',
                    'user_agent',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'channel',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('channel',): {

                        "ANDROID": "ANDROID",
                        "BROWSER": "BROWSER",
                        "IOS": "IOS"
                    },
                },
                'openapi_types': {
                    'browser':
                        (str,),
                    'browser_version':
                        (str,),
                    'channel':
                        (str,),
                    'city':
                        (str,),
                    'country':
                        (int,),
                    'device_brand':
                        (str,),
                    'device_model':
                        (str,),
                    'ip_address':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'os':
                        (str,),
                    'os_version':
                        (str,),
                    'user_agent':
                        (str,),
                },
                'attribute_map': {
                    'browser': 'browser',
                    'browser_version': 'browser_version',
                    'channel': 'channel',
                    'city': 'city',
                    'country': 'country',
                    'device_brand': 'device_brand',
                    'device_model': 'device_model',
                    'ip_address': 'ip_address',
                    'limit': 'limit',
                    'offset': 'offset',
                    'os': 'os',
                    'os_version': 'os_version',
                    'user_agent': 'user_agent',
                },
                'location_map': {
                    'browser': 'query',
                    'browser_version': 'query',
                    'channel': 'query',
                    'city': 'query',
                    'country': 'query',
                    'device_brand': 'query',
                    'device_model': 'query',
                    'ip_address': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'os': 'query',
                    'os_version': 'query',
                    'user_agent': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_feeds_access_logs_list
        )

        def __api_v2_feeds_activities_list(
            self,
            **kwargs
        ):
            """api_v2_feeds_activities_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_feeds_activities_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                target ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedFeedActivityListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_feeds_activities_list = _Endpoint(
            settings={
                'response_type': (PaginatedFeedActivityListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/feeds/activities/',
                'operation_id': 'api_v2_feeds_activities_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                    'target',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'target',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('target',): {

                        "EMPTY": "",
                        "CASHCORPORATEACTION": "cashcorporateaction",
                        "CHARGE": "charge",
                        "DEPOSIT": "deposit",
                        "PORTFOLIO": "portfolio",
                        "REBALANCE": "rebalance",
                        "SHARESCORPORATEACTION": "sharescorporateaction",
                        "WITHDRAWAL": "withdrawal"
                    },
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'target':
                        ([str],),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                    'target': 'target',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                    'target': 'query',
                },
                'collection_format_map': {
                    'target': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_feeds_activities_list
        )

        def __api_v2_goals_create(
            self,
            goal_uuid,
            goal,
            **kwargs
        ):
            """api_v2_goals_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_goals_create(goal_uuid, goal, async_req=True)
            >>> result = thread.get()

            Args:
                goal_uuid (str):
                goal (Goal):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Goal
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['goal_uuid'] = \
                goal_uuid
            kwargs['goal'] = \
                goal
            return self.call_with_http_info(**kwargs)

        self.api_v2_goals_create = _Endpoint(
            settings={
                'response_type': (Goal,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/goals/',
                'operation_id': 'api_v2_goals_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_uuid',
                    'goal',
                ],
                'required': [
                    'goal_uuid',
                    'goal',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'goal_uuid':
                        (str,),
                    'goal':
                        (Goal,),
                },
                'attribute_map': {
                    'goal_uuid': 'goal_uuid',
                },
                'location_map': {
                    'goal_uuid': 'path',
                    'goal': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_goals_create
        )

        def __api_v2_goals_decumulation_create(
            self,
            forecast_decumulation_request,
            **kwargs
        ):
            """api_v2_goals_decumulation_create  # noqa: E501

            Return a Goal Forecast Decumulation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_goals_decumulation_create(forecast_decumulation_request, async_req=True)
            >>> result = thread.get()

            Args:
                forecast_decumulation_request (ForecastDecumulationRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ForecastDecumulationRequest
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['forecast_decumulation_request'] = \
                forecast_decumulation_request
            return self.call_with_http_info(**kwargs)

        self.api_v2_goals_decumulation_create = _Endpoint(
            settings={
                'response_type': (ForecastDecumulationRequest,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/goals/decumulation/',
                'operation_id': 'api_v2_goals_decumulation_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'forecast_decumulation_request',
                ],
                'required': [
                    'forecast_decumulation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'forecast_decumulation_request':
                        (ForecastDecumulationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'forecast_decumulation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_goals_decumulation_create
        )

        def __api_v2_goals_destroy(
            self,
            goal_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_goals_destroy  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_goals_destroy(goal_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                goal_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['goal_uuid'] = \
                goal_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_goals_destroy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/goals/{uuid}/',
                'operation_id': 'api_v2_goals_destroy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_uuid',
                    'uuid',
                ],
                'required': [
                    'goal_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'goal_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'goal_uuid': 'goal_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'goal_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_goals_destroy
        )

        def __api_v2_goals_forecast_create(
            self,
            forecast_request,
            **kwargs
        ):
            """api_v2_goals_forecast_create  # noqa: E501

            Return a Goal Forecast  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_goals_forecast_create(forecast_request, async_req=True)
            >>> result = thread.get()

            Args:
                forecast_request (ForecastRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ForecastRequest
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['forecast_request'] = \
                forecast_request
            return self.call_with_http_info(**kwargs)

        self.api_v2_goals_forecast_create = _Endpoint(
            settings={
                'response_type': (ForecastRequest,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/goals/forecast/',
                'operation_id': 'api_v2_goals_forecast_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'forecast_request',
                ],
                'required': [
                    'forecast_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'forecast_request':
                        (ForecastRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'forecast_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_goals_forecast_create
        )

        def __api_v2_goals_list(
            self,
            goal_uuid,
            **kwargs
        ):
            """api_v2_goals_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_goals_list(goal_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                goal_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedGoalList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['goal_uuid'] = \
                goal_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_goals_list = _Endpoint(
            settings={
                'response_type': (PaginatedGoalList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/goals/',
                'operation_id': 'api_v2_goals_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_uuid',
                    'limit',
                    'offset',
                ],
                'required': [
                    'goal_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'goal_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'goal_uuid': 'goal_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'goal_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_goals_list
        )

        def __api_v2_goals_partial_update(
            self,
            goal_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_goals_partial_update  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_goals_partial_update(goal_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                goal_uuid (str):
                uuid (str):

            Keyword Args:
                patched_goal (PatchedGoal): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Goal
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['goal_uuid'] = \
                goal_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_goals_partial_update = _Endpoint(
            settings={
                'response_type': (Goal,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/goals/{uuid}/',
                'operation_id': 'api_v2_goals_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_uuid',
                    'uuid',
                    'patched_goal',
                ],
                'required': [
                    'goal_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'goal_uuid':
                        (str,),
                    'uuid':
                        (str,),
                    'patched_goal':
                        (PatchedGoal,),
                },
                'attribute_map': {
                    'goal_uuid': 'goal_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'goal_uuid': 'path',
                    'uuid': 'path',
                    'patched_goal': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_goals_partial_update
        )

        def __api_v2_goals_retrieve(
            self,
            goal_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_goals_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_goals_retrieve(goal_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                goal_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Goal
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['goal_uuid'] = \
                goal_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_goals_retrieve = _Endpoint(
            settings={
                'response_type': (Goal,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/goals/{uuid}/',
                'operation_id': 'api_v2_goals_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'goal_uuid',
                    'uuid',
                ],
                'required': [
                    'goal_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'goal_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'goal_uuid': 'goal_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'goal_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_goals_retrieve
        )

        def __api_v2_inbox_conversation_detail_messages_list(
            self,
            conversation,
            **kwargs
        ):
            """api_v2_inbox_conversation_detail_messages_list  # noqa: E501

            List all messages from a conversation uuid  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_inbox_conversation_detail_messages_list(conversation, async_req=True)
            >>> result = thread.get()

            Args:
                conversation (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedMessageList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conversation'] = \
                conversation
            return self.call_with_http_info(**kwargs)

        self.api_v2_inbox_conversation_detail_messages_list = _Endpoint(
            settings={
                'response_type': (PaginatedMessageList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/inbox/conversations/{conversation}/',
                'operation_id': 'api_v2_inbox_conversation_detail_messages_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation',
                    'limit',
                    'offset',
                ],
                'required': [
                    'conversation',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conversation':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'conversation': 'conversation',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'conversation': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_inbox_conversation_detail_messages_list
        )

        def __api_v2_inbox_conversations_create(
            self,
            uuid,
            portal,
            created,
            subject,
            **kwargs
        ):
            """api_v2_inbox_conversations_create  # noqa: E501

            get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_inbox_conversations_create(uuid, portal, created, subject, async_req=True)
            >>> result = thread.get()

            Args:
                uuid (str):
                portal (int):
                created (datetime):
                subject (str):

            Keyword Args:
                messages (dict, none_type): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ConversationCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['uuid'] = \
                uuid
            kwargs['portal'] = \
                portal
            kwargs['created'] = \
                created
            kwargs['subject'] = \
                subject
            return self.call_with_http_info(**kwargs)

        self.api_v2_inbox_conversations_create = _Endpoint(
            settings={
                'response_type': (ConversationCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/inbox/conversations/',
                'operation_id': 'api_v2_inbox_conversations_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'uuid',
                    'portal',
                    'created',
                    'subject',
                    'messages',
                ],
                'required': [
                    'uuid',
                    'portal',
                    'created',
                    'subject',
                ],
                'nullable': [
                    'messages',
                ],
                'enum': [
                ],
                'validation': [
                    'subject',
                ]
            },
            root_map={
                'validations': {
                    ('subject',): {
                        'max_length': 80,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'uuid':
                        (str,),
                    'portal':
                        (int,),
                    'created':
                        (datetime,),
                    'subject':
                        (str,),
                    'messages':
                        (dict, none_type,),
                },
                'attribute_map': {
                    'uuid': 'uuid',
                    'portal': 'portal',
                    'created': 'created',
                    'subject': 'subject',
                    'messages': 'messages',
                },
                'location_map': {
                    'uuid': 'form',
                    'portal': 'form',
                    'created': 'form',
                    'subject': 'form',
                    'messages': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_inbox_conversations_create
        )

        def __api_v2_inbox_conversations_list(
            self,
            **kwargs
        ):
            """api_v2_inbox_conversations_list  # noqa: E501

            get: List all conversations with last_message of a user  post: Create new conversation with N messages (without attachments)  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_inbox_conversations_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedConversationListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_inbox_conversations_list = _Endpoint(
            settings={
                'response_type': (PaginatedConversationListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/inbox/conversations/',
                'operation_id': 'api_v2_inbox_conversations_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_inbox_conversations_list
        )

        def __api_v2_inbox_conversations_messages_attachments_retrieve(
            self,
            conversation,
            message,
            uuid,
            **kwargs
        ):
            """api_v2_inbox_conversations_messages_attachments_retrieve  # noqa: E501

            View to access to an attachment  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_inbox_conversations_messages_attachments_retrieve(conversation, message, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                conversation (str):
                message (str):
                uuid (str):

            Keyword Args:
                format (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Attachment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conversation'] = \
                conversation
            kwargs['message'] = \
                message
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_inbox_conversations_messages_attachments_retrieve = _Endpoint(
            settings={
                'response_type': (Attachment,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/inbox/conversations/{conversation}/messages/{message}/attachments/{uuid}/',
                'operation_id': 'api_v2_inbox_conversations_messages_attachments_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation',
                    'message',
                    'uuid',
                    'format',
                ],
                'required': [
                    'conversation',
                    'message',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'format',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('format',): {

                        "BASE64": "base64",
                        "JSON": "json",
                        "PDF": "pdf"
                    },
                },
                'openapi_types': {
                    'conversation':
                        (str,),
                    'message':
                        (str,),
                    'uuid':
                        (str,),
                    'format':
                        (str,),
                },
                'attribute_map': {
                    'conversation': 'conversation',
                    'message': 'message',
                    'uuid': 'uuid',
                    'format': 'format',
                },
                'location_map': {
                    'conversation': 'path',
                    'message': 'path',
                    'uuid': 'path',
                    'format': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/pdf',
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_inbox_conversations_messages_attachments_retrieve
        )

        def __api_v2_inbox_conversations_messages_create(
            self,
            conversation,
            user,
            read_date,
            created,
            attachments,
            uuid,
            **kwargs
        ):
            """api_v2_inbox_conversations_messages_create  # noqa: E501

            View for creating message on a specific conversation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_inbox_conversations_messages_create(conversation, user, read_date, created, attachments, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                conversation (str):
                user (str):
                read_date (datetime):
                created (datetime):
                attachments ([Attachment]):
                uuid (str):

            Keyword Args:
                content (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['conversation'] = \
                conversation
            kwargs['user'] = \
                user
            kwargs['read_date'] = \
                read_date
            kwargs['created'] = \
                created
            kwargs['attachments'] = \
                attachments
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_inbox_conversations_messages_create = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/inbox/conversations/{conversation}/messages/',
                'operation_id': 'api_v2_inbox_conversations_messages_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'conversation',
                    'user',
                    'read_date',
                    'created',
                    'attachments',
                    'uuid',
                    'content',
                ],
                'required': [
                    'conversation',
                    'user',
                    'read_date',
                    'created',
                    'attachments',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'conversation':
                        (str,),
                    'user':
                        (str,),
                    'read_date':
                        (datetime,),
                    'created':
                        (datetime,),
                    'attachments':
                        ([Attachment],),
                    'uuid':
                        (str,),
                    'content':
                        (str,),
                },
                'attribute_map': {
                    'conversation': 'conversation',
                    'user': 'user',
                    'read_date': 'read_date',
                    'created': 'created',
                    'attachments': 'attachments',
                    'uuid': 'uuid',
                    'content': 'content',
                },
                'location_map': {
                    'conversation': 'path',
                    'user': 'form',
                    'read_date': 'form',
                    'created': 'form',
                    'attachments': 'form',
                    'uuid': 'form',
                    'content': 'form',
                },
                'collection_format_map': {
                    'attachments': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_inbox_conversations_messages_create
        )

        def __api_v2_mobile_version_retrieve(
            self,
            platform,
            **kwargs
        ):
            """api_v2_mobile_version_retrieve  # noqa: E501

            Returns the number of the last required APP Version for a platform.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_mobile_version_retrieve(platform, async_req=True)
            >>> result = thread.get()

            Args:
                platform (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MinimumAppVersion
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['platform'] = \
                platform
            return self.call_with_http_info(**kwargs)

        self.api_v2_mobile_version_retrieve = _Endpoint(
            settings={
                'response_type': (MinimumAppVersion,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/mobile/{platform}/version/',
                'operation_id': 'api_v2_mobile_version_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'platform',
                ],
                'required': [
                    'platform',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'platform':
                        (str,),
                },
                'attribute_map': {
                    'platform': 'platform',
                },
                'location_map': {
                    'platform': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_mobile_version_retrieve
        )

        def __api_v2_platform_settings_list(
            self,
            **kwargs
        ):
            """api_v2_platform_settings_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_platform_settings_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [NucoroSetting]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_platform_settings_list = _Endpoint(
            settings={
                'response_type': ([NucoroSetting],),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/platform/settings/',
                'operation_id': 'api_v2_platform_settings_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_platform_settings_list
        )

        def __api_v2_portal_countries_list(
            self,
            **kwargs
        ):
            """api_v2_portal_countries_list  # noqa: E501

            Retrieves the list of countries  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portal_countries_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedCountryListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_portal_countries_list = _Endpoint(
            settings={
                'response_type': (PaginatedCountryListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portal/countries/',
                'operation_id': 'api_v2_portal_countries_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portal_countries_list
        )

        def __api_v2_portal_settings_retrieve(
            self,
            **kwargs
        ):
            """api_v2_portal_settings_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portal_settings_retrieve(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PortalSettingValueList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_portal_settings_retrieve = _Endpoint(
            settings={
                'response_type': (PortalSettingValueList,),
                'auth': [
                    'basicAuth',
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portal/settings/',
                'operation_id': 'api_v2_portal_settings_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portal_settings_retrieve
        )

        def __api_v2_portal_tos_current_retrieve(
            self,
            **kwargs
        ):
            """api_v2_portal_tos_current_retrieve  # noqa: E501

            Retrieves the current ToS for the Portal  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portal_tos_current_retrieve(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Tos
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_portal_tos_current_retrieve = _Endpoint(
            settings={
                'response_type': (Tos,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portal/tos/current/',
                'operation_id': 'api_v2_portal_tos_current_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portal_tos_current_retrieve
        )

        def __api_v2_portal_tos_list(
            self,
            **kwargs
        ):
            """api_v2_portal_tos_list  # noqa: E501

            List all ToS for the current Portal  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portal_tos_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedTosList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_portal_tos_list = _Endpoint(
            settings={
                'response_type': (PaginatedTosList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portal/tos/',
                'operation_id': 'api_v2_portal_tos_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portal_tos_list
        )

        def __api_v2_portal_tos_retrieve(
            self,
            uuid,
            **kwargs
        ):
            """api_v2_portal_tos_retrieve  # noqa: E501

            Retrieves a specific ToS  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portal_tos_retrieve(uuid, async_req=True)
            >>> result = thread.get()

            Args:
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Tos
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portal_tos_retrieve = _Endpoint(
            settings={
                'response_type': (Tos,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portal/tos/{uuid}/',
                'operation_id': 'api_v2_portal_tos_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'uuid',
                ],
                'required': [
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'uuid': 'uuid',
                },
                'location_map': {
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portal_tos_retrieve
        )

        def __api_v2_portfolios_activities_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_activities_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_activities_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                target ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedFeedActivityListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_activities_list = _Endpoint(
            settings={
                'response_type': (PaginatedFeedActivityListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/activities/',
                'operation_id': 'api_v2_portfolios_activities_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'limit',
                    'offset',
                    'target',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'target',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('target',): {

                        "EMPTY": "",
                        "CASHCORPORATEACTION": "cashcorporateaction",
                        "CHARGE": "charge",
                        "DEPOSIT": "deposit",
                        "PORTFOLIO": "portfolio",
                        "REBALANCE": "rebalance",
                        "SHARESCORPORATEACTION": "sharescorporateaction",
                        "WITHDRAWAL": "withdrawal"
                    },
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'target':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                    'target': 'target',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'target': 'query',
                },
                'collection_format_map': {
                    'target': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_activities_list
        )

        def __api_v2_portfolios_activities_retrieve(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_activities_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_activities_retrieve(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                FeedActivityList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_activities_retrieve = _Endpoint(
            settings={
                'response_type': (FeedActivityList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/activities/{uuid}/',
                'operation_id': 'api_v2_portfolios_activities_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_activities_retrieve
        )

        def __api_v2_portfolios_allocations_end_day(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_allocations_end_day  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_allocations_end_day(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AllocationList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_allocations_end_day = _Endpoint(
            settings={
                'response_type': (AllocationList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/',
                'operation_id': 'api_v2_portfolios_allocations_end_day',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_allocations_end_day
        )

        def __api_v2_portfolios_allocations_end_day_by_date_retrieve(
            self,
            allocation_date,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_allocations_end_day_by_date_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_allocations_end_day_by_date_retrieve(allocation_date, portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                allocation_date (str):
                portfolio_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AllocationDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['allocation_date'] = \
                allocation_date
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_allocations_end_day_by_date_retrieve = _Endpoint(
            settings={
                'response_type': (AllocationDetail,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/{allocation_date}/',
                'operation_id': 'api_v2_portfolios_allocations_end_day_by_date_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allocation_date',
                    'portfolio_uuid',
                ],
                'required': [
                    'allocation_date',
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allocation_date':
                        (str,),
                    'portfolio_uuid':
                        (str,),
                },
                'attribute_map': {
                    'allocation_date': 'allocation_date',
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'allocation_date': 'path',
                    'portfolio_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_allocations_end_day_by_date_retrieve
        )

        def __api_v2_portfolios_allocations_end_day_latest_retrieve(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_allocations_end_day_latest_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_allocations_end_day_latest_retrieve(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AllocationDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_allocations_end_day_latest_retrieve = _Endpoint(
            settings={
                'response_type': (AllocationDetail,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/allocations/end-day/latest/',
                'operation_id': 'api_v2_portfolios_allocations_end_day_latest_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_allocations_end_day_latest_retrieve
        )

        def __api_v2_portfolios_allocations_history_retrieve(
            self,
            portfolio,
            **kwargs
        ):
            """api_v2_portfolios_allocations_history_retrieve  # noqa: E501

            Allocations History for a given portfolio  It accepts two optional parameters, `date_to` and `date_from` to limit the daily allocations to a certain data range. If they are not given, all the allocations are returned.  ---  ## Parameters:   * **name**: `date_from`  * **description**: The initial date.  * **parameter type**: query param   * **name**: `date_from`  * **description**: The final date.  * **parameter type**: query param  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_allocations_history_retrieve(portfolio, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio'] = \
                portfolio
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_allocations_history_retrieve = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio}/allocations/history/',
                'operation_id': 'api_v2_portfolios_allocations_history_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio',
                ],
                'required': [
                    'portfolio',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio':
                        (str,),
                },
                'attribute_map': {
                    'portfolio': 'portfolio',
                },
                'location_map': {
                    'portfolio': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_allocations_history_retrieve
        )

        def __api_v2_portfolios_allocations_intraday_latest_retrieve(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_allocations_intraday_latest_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_allocations_intraday_latest_retrieve(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CurrentAllocation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_allocations_intraday_latest_retrieve = _Endpoint(
            settings={
                'response_type': (CurrentAllocation,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/allocations/intraday/latest/',
                'operation_id': 'api_v2_portfolios_allocations_intraday_latest_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_allocations_intraday_latest_retrieve
        )

        def __api_v2_portfolios_allocations_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_allocations_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_allocations_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                valuation_date_after (date): [optional]
                valuation_date_before (date): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedAllocationListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_allocations_list = _Endpoint(
            settings={
                'response_type': (PaginatedAllocationListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/allocations/',
                'operation_id': 'api_v2_portfolios_allocations_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'limit',
                    'offset',
                    'valuation_date_after',
                    'valuation_date_before',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'valuation_date_after':
                        (date,),
                    'valuation_date_before':
                        (date,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                    'valuation_date_after': 'valuation_date_after',
                    'valuation_date_before': 'valuation_date_before',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'valuation_date_after': 'query',
                    'valuation_date_before': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_allocations_list
        )

        def __api_v2_portfolios_allocations_retrieve(
            self,
            id,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_allocations_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_allocations_retrieve(id, portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                id (int): A unique integer value identifying this allocation.
                portfolio_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AllocationList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_allocations_retrieve = _Endpoint(
            settings={
                'response_type': (AllocationList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/allocations/{id}/',
                'operation_id': 'api_v2_portfolios_allocations_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'portfolio_uuid',
                ],
                'required': [
                    'id',
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'portfolio_uuid':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'id': 'path',
                    'portfolio_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_allocations_retrieve
        )

        def __api_v2_portfolios_create(
            self,
            portfolio_uuid,
            portfolio_create,
            **kwargs
        ):
            """api_v2_portfolios_create  # noqa: E501

            Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_create(portfolio_uuid, portfolio_create, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                portfolio_create (PortfolioCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PortfolioCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['portfolio_create'] = \
                portfolio_create
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_create = _Endpoint(
            settings={
                'response_type': (PortfolioCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/',
                'operation_id': 'api_v2_portfolios_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'portfolio_create',
                ],
                'required': [
                    'portfolio_uuid',
                    'portfolio_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'portfolio_create':
                        (PortfolioCreate,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'portfolio_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_portfolios_create
        )

        def __api_v2_portfolios_deposits_create(
            self,
            portfolio_uuid,
            deposit_create,
            **kwargs
        ):
            """api_v2_portfolios_deposits_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_deposits_create(portfolio_uuid, deposit_create, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                deposit_create (DepositCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DepositCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['deposit_create'] = \
                deposit_create
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_deposits_create = _Endpoint(
            settings={
                'response_type': (DepositCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/deposits/',
                'operation_id': 'api_v2_portfolios_deposits_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'deposit_create',
                ],
                'required': [
                    'portfolio_uuid',
                    'deposit_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'deposit_create':
                        (DepositCreate,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'deposit_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_portfolios_deposits_create
        )

        def __api_v2_portfolios_deposits_destroy(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_deposits_destroy  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_deposits_destroy(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_deposits_destroy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/',
                'operation_id': 'api_v2_portfolios_deposits_destroy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_deposits_destroy
        )

        def __api_v2_portfolios_deposits_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_deposits_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_deposits_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                status ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedDepositListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_deposits_list = _Endpoint(
            settings={
                'response_type': (PaginatedDepositListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/deposits/',
                'operation_id': 'api_v2_portfolios_deposits_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'limit',
                    'offset',
                    'status',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('status',): {

                        "CANCELLED": "CANCELLED",
                        "COMPLETED": "COMPLETED",
                        "ERROR": "ERROR",
                        "PENDING": "PENDING",
                        "PROCESSING": "PROCESSING",
                        "REQUESTED": "REQUESTED"
                    },
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'status':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                    'status': 'status',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                    'status': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_deposits_list
        )

        def __api_v2_portfolios_deposits_retrieve(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_deposits_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_deposits_retrieve(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                DepositDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_deposits_retrieve = _Endpoint(
            settings={
                'response_type': (DepositDetail,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/deposits/{uuid}/',
                'operation_id': 'api_v2_portfolios_deposits_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_deposits_retrieve
        )

        def __api_v2_portfolios_destroy(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_destroy  # noqa: E501

            Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_destroy(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_destroy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{uuid}/',
                'operation_id': 'api_v2_portfolios_destroy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_destroy
        )

        def __api_v2_portfolios_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_list  # noqa: E501

            Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                client (str): [optional]
                external_custodian_id (str): [optional]
                limit (int): Number of results to return per page.. [optional]
                name (str): [optional]
                offset (int): The initial index from which to return the results.. [optional]
                ordering ([str]): Ordering. [optional]
                portfolio_type (int): [optional]
                status ([str]): [optional]
                valuation_date_after (date): [optional]
                valuation_date_before (date): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedPortfolioListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_list = _Endpoint(
            settings={
                'response_type': (PaginatedPortfolioListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/',
                'operation_id': 'api_v2_portfolios_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'client',
                    'external_custodian_id',
                    'limit',
                    'name',
                    'offset',
                    'ordering',
                    'portfolio_type',
                    'status',
                    'valuation_date_after',
                    'valuation_date_before',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'ordering',
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('ordering',): {

                        "-NAME": "-name",
                        "-RISK_LEVEL": "-risk_level",
                        "NAME": "name",
                        "RISK_LEVEL": "risk_level"
                    },
                    ('status',): {

                        "ACTIVE": "ACTIVE",
                        "DELETED": "DELETED",
                        "DELETING": "DELETING",
                        "PENDING": "PENDING"
                    },
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'client':
                        (str,),
                    'external_custodian_id':
                        (str,),
                    'limit':
                        (int,),
                    'name':
                        (str,),
                    'offset':
                        (int,),
                    'ordering':
                        ([str],),
                    'portfolio_type':
                        (int,),
                    'status':
                        ([str],),
                    'valuation_date_after':
                        (date,),
                    'valuation_date_before':
                        (date,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'client': 'client',
                    'external_custodian_id': 'external_custodian_id',
                    'limit': 'limit',
                    'name': 'name',
                    'offset': 'offset',
                    'ordering': 'ordering',
                    'portfolio_type': 'portfolio_type',
                    'status': 'status',
                    'valuation_date_after': 'valuation_date_after',
                    'valuation_date_before': 'valuation_date_before',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'client': 'query',
                    'external_custodian_id': 'query',
                    'limit': 'query',
                    'name': 'query',
                    'offset': 'query',
                    'ordering': 'query',
                    'portfolio_type': 'query',
                    'status': 'query',
                    'valuation_date_after': 'query',
                    'valuation_date_before': 'query',
                },
                'collection_format_map': {
                    'ordering': 'csv',
                    'status': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_list
        )

        def __api_v2_portfolios_orders_create(
            self,
            portfolio_uuid,
            create_order,
            **kwargs
        ):
            """api_v2_portfolios_orders_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_orders_create(portfolio_uuid, create_order, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                create_order (CreateOrder):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CreateOrder
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['create_order'] = \
                create_order
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_orders_create = _Endpoint(
            settings={
                'response_type': (CreateOrder,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/orders/',
                'operation_id': 'api_v2_portfolios_orders_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'create_order',
                ],
                'required': [
                    'portfolio_uuid',
                    'create_order',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'create_order':
                        (CreateOrder,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'create_order': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_portfolios_orders_create
        )

        def __api_v2_portfolios_orders_destroy(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_orders_destroy  # noqa: E501

            Cancel or request cancellation to the broker  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_orders_destroy(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_orders_destroy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/',
                'operation_id': 'api_v2_portfolios_orders_destroy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_orders_destroy
        )

        def __api_v2_portfolios_orders_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_orders_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_orders_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                advice_external_id (str): [optional]
                asset (str): [optional]
                completed_after (date): [optional]
                completed_before (date): [optional]
                extra_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Additional order attributes for the specific portal. [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                portfolio (str): [optional]
                status (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedOrderListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_orders_list = _Endpoint(
            settings={
                'response_type': (PaginatedOrderListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/orders/',
                'operation_id': 'api_v2_portfolios_orders_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'advice_external_id',
                    'asset',
                    'completed_after',
                    'completed_before',
                    'extra_data',
                    'limit',
                    'offset',
                    'portfolio',
                    'status',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                    'extra_data',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'advice_external_id':
                        (str,),
                    'asset':
                        (str,),
                    'completed_after':
                        (date,),
                    'completed_before':
                        (date,),
                    'extra_data':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'portfolio':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'advice_external_id': 'advice_external_id',
                    'asset': 'asset',
                    'completed_after': 'completed_after',
                    'completed_before': 'completed_before',
                    'extra_data': 'extra_data',
                    'limit': 'limit',
                    'offset': 'offset',
                    'portfolio': 'portfolio',
                    'status': 'status',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'advice_external_id': 'query',
                    'asset': 'query',
                    'completed_after': 'query',
                    'completed_before': 'query',
                    'extra_data': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'portfolio': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_orders_list
        )

        def __api_v2_portfolios_orders_retrieve(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_orders_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_orders_retrieve(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OrderList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_orders_retrieve = _Endpoint(
            settings={
                'response_type': (OrderList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/orders/{uuid}/',
                'operation_id': 'api_v2_portfolios_orders_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_orders_retrieve
        )

        def __api_v2_portfolios_partial_update(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_partial_update  # noqa: E501

            Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_partial_update(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                patched_portfolio_update (PatchedPortfolioUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PortfolioUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_partial_update = _Endpoint(
            settings={
                'response_type': (PortfolioUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{uuid}/',
                'operation_id': 'api_v2_portfolios_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                    'patched_portfolio_update',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                    'patched_portfolio_update':
                        (PatchedPortfolioUpdate,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                    'patched_portfolio_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_portfolios_partial_update
        )

        def __api_v2_portfolios_performance_mwrr_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_performance_mwrr_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_performance_mwrr_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                date_after (date): [optional]
                date_before (date): [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedPortfolioPerformanceList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_performance_mwrr_list = _Endpoint(
            settings={
                'response_type': (PaginatedPortfolioPerformanceList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/performance/mwrr/',
                'operation_id': 'api_v2_portfolios_performance_mwrr_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'date_after',
                    'date_before',
                    'limit',
                    'offset',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'date_after':
                        (date,),
                    'date_before':
                        (date,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'date_after': 'date_after',
                    'date_before': 'date_before',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'date_after': 'query',
                    'date_before': 'query',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_performance_mwrr_list
        )

        def __api_v2_portfolios_performance_positions_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_performance_positions_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_performance_positions_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedPortfolioPerformancePositionsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_performance_positions_list = _Endpoint(
            settings={
                'response_type': (PaginatedPortfolioPerformancePositionsList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/performance/positions/',
                'operation_id': 'api_v2_portfolios_performance_positions_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'limit',
                    'offset',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_performance_positions_list
        )

        def __api_v2_portfolios_performance_twrr_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_performance_twrr_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_performance_twrr_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                date_after (date): [optional]
                date_before (date): [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedPortfolioPerformanceList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_performance_twrr_list = _Endpoint(
            settings={
                'response_type': (PaginatedPortfolioPerformanceList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/performance/twrr/',
                'operation_id': 'api_v2_portfolios_performance_twrr_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'date_after',
                    'date_before',
                    'limit',
                    'offset',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'date_after':
                        (date,),
                    'date_before':
                        (date,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'date_after': 'date_after',
                    'date_before': 'date_before',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'date_after': 'query',
                    'date_before': 'query',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_performance_twrr_list
        )

        def __api_v2_portfolios_portfoliotypes_list(
            self,
            **kwargs
        ):
            """api_v2_portfolios_portfoliotypes_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_portfoliotypes_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedPortfolioTypeList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_portfoliotypes_list = _Endpoint(
            settings={
                'response_type': (PaginatedPortfolioTypeList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/portfoliotypes/',
                'operation_id': 'api_v2_portfolios_portfoliotypes_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_portfoliotypes_list
        )

        def __api_v2_portfolios_portfoliotypes_restrictions_list(
            self,
            code,
            **kwargs
        ):
            """api_v2_portfolios_portfoliotypes_restrictions_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_portfoliotypes_restrictions_list(code, async_req=True)
            >>> result = thread.get()

            Args:
                code (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedBasePortfolioTypeRestrictionsList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['code'] = \
                code
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_portfoliotypes_restrictions_list = _Endpoint(
            settings={
                'response_type': (PaginatedBasePortfolioTypeRestrictionsList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/portfoliotypes/{code}/restrictions/',
                'operation_id': 'api_v2_portfolios_portfoliotypes_restrictions_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'code',
                    'limit',
                    'offset',
                ],
                'required': [
                    'code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'code':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'code': 'code',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'code': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_portfoliotypes_restrictions_list
        )

        def __api_v2_portfolios_rebalances_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_rebalances_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_rebalances_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedRebalanceList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_rebalances_list = _Endpoint(
            settings={
                'response_type': (PaginatedRebalanceList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/rebalances/',
                'operation_id': 'api_v2_portfolios_rebalances_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'limit',
                    'offset',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_rebalances_list
        )

        def __api_v2_portfolios_rebalances_retrieve(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_rebalances_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_rebalances_retrieve(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Rebalance
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_rebalances_retrieve = _Endpoint(
            settings={
                'response_type': (Rebalance,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/rebalances/{uuid}/',
                'operation_id': 'api_v2_portfolios_rebalances_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_rebalances_retrieve
        )

        def __api_v2_portfolios_restrictions_retrieve(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_restrictions_retrieve  # noqa: E501

            Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_restrictions_retrieve(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PortfolioTypeRestrictions
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_restrictions_retrieve = _Endpoint(
            settings={
                'response_type': (PortfolioTypeRestrictions,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{uuid}/restrictions/',
                'operation_id': 'api_v2_portfolios_restrictions_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_restrictions_retrieve
        )

        def __api_v2_portfolios_retrieve(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_retrieve  # noqa: E501

            Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_retrieve(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PortfolioDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_retrieve = _Endpoint(
            settings={
                'response_type': (PortfolioDetail,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{uuid}/',
                'operation_id': 'api_v2_portfolios_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_retrieve
        )

        def __api_v2_portfolios_update(
            self,
            portfolio_uuid,
            uuid,
            portfolio_update,
            **kwargs
        ):
            """api_v2_portfolios_update  # noqa: E501

            Allow aggregate/group fields of the ModelView model or its related entities.    Query params should use dot notation.  Requires:     ListModelMixin (ListAPIView, ListCreateApiView)  Args:     * aggregatable_fields (dict): optional.         Keys: fields that allow aggregation (including related entities with \"__\" notation).         Values: django qs functions or aggregate_fns         Example:             aggregatable_fields = {                 'allocations__balance': [Sum, Avg],             }      * groupable_fields (list): optional. fields that allow grouping (including related entities with \"__\" notation).         Example:             groupable_fields = ['portfolio__portfolio_type']  Query Param Examples:     >>> ?group_by=portfolio.portfolio_type     >>> ?aggregate[Sum]=portfolio.allocations.balance     >>> ?group_by=valuation_date&aggregate[Sum]=portfolio.allocations.balance  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_update(portfolio_uuid, uuid, portfolio_update, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):
                portfolio_update (PortfolioUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PortfolioUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            kwargs['portfolio_update'] = \
                portfolio_update
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_update = _Endpoint(
            settings={
                'response_type': (PortfolioUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{uuid}/',
                'operation_id': 'api_v2_portfolios_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                    'portfolio_update',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                    'portfolio_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                    'portfolio_update':
                        (PortfolioUpdate,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                    'portfolio_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_portfolios_update
        )

        def __api_v2_portfolios_withdrawals_create(
            self,
            portfolio_uuid,
            investor_withdrawal_create,
            **kwargs
        ):
            """api_v2_portfolios_withdrawals_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_withdrawals_create(portfolio_uuid, investor_withdrawal_create, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                investor_withdrawal_create (InvestorWithdrawalCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                InvestorWithdrawalCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['investor_withdrawal_create'] = \
                investor_withdrawal_create
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_withdrawals_create = _Endpoint(
            settings={
                'response_type': (InvestorWithdrawalCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/withdrawals/',
                'operation_id': 'api_v2_portfolios_withdrawals_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'investor_withdrawal_create',
                ],
                'required': [
                    'portfolio_uuid',
                    'investor_withdrawal_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'investor_withdrawal_create':
                        (InvestorWithdrawalCreate,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'investor_withdrawal_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_portfolios_withdrawals_create
        )

        def __api_v2_portfolios_withdrawals_destroy(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_withdrawals_destroy  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_withdrawals_destroy(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_withdrawals_destroy = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/',
                'operation_id': 'api_v2_portfolios_withdrawals_destroy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_withdrawals_destroy
        )

        def __api_v2_portfolios_withdrawals_list(
            self,
            portfolio_uuid,
            **kwargs
        ):
            """api_v2_portfolios_withdrawals_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_withdrawals_list(portfolio_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                status ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedInvestorWithdrawalListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_withdrawals_list = _Endpoint(
            settings={
                'response_type': (PaginatedInvestorWithdrawalListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/withdrawals/',
                'operation_id': 'api_v2_portfolios_withdrawals_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'limit',
                    'offset',
                    'status',
                ],
                'required': [
                    'portfolio_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('status',): {

                        "CANCELLED": "CANCELLED",
                        "COMPLETED": "COMPLETED",
                        "DRAFT": "DRAFT",
                        "ERROR": "ERROR",
                        "PENDING": "PENDING",
                        "POSITIONS_SOLD": "POSITIONS_SOLD",
                        "PROCESSING": "PROCESSING",
                        "REQUESTED": "REQUESTED"
                    },
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'status':
                        ([str],),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                    'status': 'status',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                    'status': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_withdrawals_list
        )

        def __api_v2_portfolios_withdrawals_retrieve(
            self,
            portfolio_uuid,
            uuid,
            **kwargs
        ):
            """api_v2_portfolios_withdrawals_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_portfolios_withdrawals_retrieve(portfolio_uuid, uuid, async_req=True)
            >>> result = thread.get()

            Args:
                portfolio_uuid (str):
                uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                WithdrawalDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['portfolio_uuid'] = \
                portfolio_uuid
            kwargs['uuid'] = \
                uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_portfolios_withdrawals_retrieve = _Endpoint(
            settings={
                'response_type': (WithdrawalDetail,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/portfolios/{portfolio_uuid}/withdrawals/{uuid}/',
                'operation_id': 'api_v2_portfolios_withdrawals_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'required': [
                    'portfolio_uuid',
                    'uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'portfolio_uuid':
                        (str,),
                    'uuid':
                        (str,),
                },
                'attribute_map': {
                    'portfolio_uuid': 'portfolio_uuid',
                    'uuid': 'uuid',
                },
                'location_map': {
                    'portfolio_uuid': 'path',
                    'uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_portfolios_withdrawals_retrieve
        )

        def __api_v2_risk_questions_list(
            self,
            **kwargs
        ):
            """api_v2_risk_questions_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_risk_questions_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedQuestionList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v2_risk_questions_list = _Endpoint(
            settings={
                'response_type': (PaginatedQuestionList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/risk/questions/',
                'operation_id': 'api_v2_risk_questions_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_risk_questions_list
        )

        def __api_v2_verifications_verifier_webhook_create(
            self,
            action,
            verifier,
            **kwargs
        ):
            """api_v2_verifications_verifier_webhook_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_verifications_verifier_webhook_create(action, verifier, async_req=True)
            >>> result = thread.get()

            Args:
                action (str):
                verifier (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['action'] = \
                action
            kwargs['verifier'] = \
                verifier
            return self.call_with_http_info(**kwargs)

        self.api_v2_verifications_verifier_webhook_create = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/verifications/verifier_webhook/{verifier}/{action}/',
                'operation_id': 'api_v2_verifications_verifier_webhook_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'action',
                    'verifier',
                ],
                'required': [
                    'action',
                    'verifier',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'action':
                        (str,),
                    'verifier':
                        (str,),
                },
                'attribute_map': {
                    'action': 'action',
                    'verifier': 'verifier',
                },
                'location_map': {
                    'action': 'path',
                    'verifier': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_verifications_verifier_webhook_create
        )

        def __api_v2_websocket_authentication_ticket_create(
            self,
            websocket_authentication,
            **kwargs
        ):
            """api_v2_websocket_authentication_ticket_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_websocket_authentication_ticket_create(websocket_authentication, async_req=True)
            >>> result = thread.get()

            Args:
                websocket_authentication (WebsocketAuthentication):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AuthenticationResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['websocket_authentication'] = \
                websocket_authentication
            return self.call_with_http_info(**kwargs)

        self.api_v2_websocket_authentication_ticket_create = _Endpoint(
            settings={
                'response_type': (AuthenticationResponse,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/websocket/authentication/ticket/',
                'operation_id': 'api_v2_websocket_authentication_ticket_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'websocket_authentication',
                ],
                'required': [
                    'websocket_authentication',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'websocket_authentication':
                        (WebsocketAuthentication,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'websocket_authentication': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_websocket_authentication_ticket_create
        )

        def __api_v2_websocket_authorize_asset_create(
            self,
            websocket_authentication,
            **kwargs
        ):
            """api_v2_websocket_authorize_asset_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_websocket_authorize_asset_create(websocket_authentication, async_req=True)
            >>> result = thread.get()

            Args:
                websocket_authentication (WebsocketAuthentication):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['websocket_authentication'] = \
                websocket_authentication
            return self.call_with_http_info(**kwargs)

        self.api_v2_websocket_authorize_asset_create = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/websocket/authorize/asset/',
                'operation_id': 'api_v2_websocket_authorize_asset_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'websocket_authentication',
                ],
                'required': [
                    'websocket_authentication',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'websocket_authentication':
                        (WebsocketAuthentication,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'websocket_authentication': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_websocket_authorize_asset_create
        )

        def __api_v2_websocket_authorize_create(
            self,
            websocket_authentication,
            **kwargs
        ):
            """api_v2_websocket_authorize_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_websocket_authorize_create(websocket_authentication, async_req=True)
            >>> result = thread.get()

            Args:
                websocket_authentication (WebsocketAuthentication):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['websocket_authentication'] = \
                websocket_authentication
            return self.call_with_http_info(**kwargs)

        self.api_v2_websocket_authorize_create = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/websocket/authorize/',
                'operation_id': 'api_v2_websocket_authorize_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'websocket_authentication',
                ],
                'required': [
                    'websocket_authentication',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'websocket_authentication':
                        (WebsocketAuthentication,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'websocket_authentication': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_websocket_authorize_create
        )

        def __api_v2_websocket_authorize_portfolio_create(
            self,
            websocket_authentication,
            **kwargs
        ):
            """api_v2_websocket_authorize_portfolio_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_websocket_authorize_portfolio_create(websocket_authentication, async_req=True)
            >>> result = thread.get()

            Args:
                websocket_authentication (WebsocketAuthentication):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Response
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['websocket_authentication'] = \
                websocket_authentication
            return self.call_with_http_info(**kwargs)

        self.api_v2_websocket_authorize_portfolio_create = _Endpoint(
            settings={
                'response_type': (Response,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/websocket/authorize/portfolio/',
                'operation_id': 'api_v2_websocket_authorize_portfolio_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'websocket_authentication',
                ],
                'required': [
                    'websocket_authentication',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'websocket_authentication':
                        (WebsocketAuthentication,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'websocket_authentication': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_websocket_authorize_portfolio_create
        )

        def __api_v2_websocket_on_subscribe_create(
            self,
            subscribe,
            **kwargs
        ):
            """api_v2_websocket_on_subscribe_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_websocket_on_subscribe_create(subscribe, async_req=True)
            >>> result = thread.get()

            Args:
                subscribe (Subscribe):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Subscribe
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['subscribe'] = \
                subscribe
            return self.call_with_http_info(**kwargs)

        self.api_v2_websocket_on_subscribe_create = _Endpoint(
            settings={
                'response_type': (Subscribe,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/websocket/on_subscribe/',
                'operation_id': 'api_v2_websocket_on_subscribe_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'subscribe',
                ],
                'required': [
                    'subscribe',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'subscribe':
                        (Subscribe,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'subscribe': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_websocket_on_subscribe_create
        )

        def __api_v2_websocket_on_unsubscribe_create(
            self,
            unsubscribe,
            **kwargs
        ):
            """api_v2_websocket_on_unsubscribe_create  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_websocket_on_unsubscribe_create(unsubscribe, async_req=True)
            >>> result = thread.get()

            Args:
                unsubscribe (Unsubscribe):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Unsubscribe
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['unsubscribe'] = \
                unsubscribe
            return self.call_with_http_info(**kwargs)

        self.api_v2_websocket_on_unsubscribe_create = _Endpoint(
            settings={
                'response_type': (Unsubscribe,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/websocket/on_unsubscribe/',
                'operation_id': 'api_v2_websocket_on_unsubscribe_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'unsubscribe',
                ],
                'required': [
                    'unsubscribe',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'unsubscribe':
                        (Unsubscribe,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'unsubscribe': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__api_v2_websocket_on_unsubscribe_create
        )
