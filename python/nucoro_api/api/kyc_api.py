"""
    Nucoro API

    No description  # noqa: E501

    The version of the OpenAPI document: 4.175.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nucoro_api.api_client import ApiClient, Endpoint as _Endpoint
from nucoro_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from nucoro_api.model.document_type_enum import DocumentTypeEnum
from nucoro_api.model.paginated_verification_document_list import PaginatedVerificationDocumentList
from nucoro_api.model.paginated_verification_list_list import PaginatedVerificationListList
from nucoro_api.model.status_bd7_enum import StatusBd7Enum
from nucoro_api.model.verification_create import VerificationCreate
from nucoro_api.model.verification_document import VerificationDocument
from nucoro_api.model.verification_document_create import VerificationDocumentCreate
from nucoro_api.model.verification_list import VerificationList
from nucoro_api.model.verification_with_type import VerificationWithType
from nucoro_api.model.verify_type_enum import VerifyTypeEnum


class KYCApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __client_verification_create(
            self,
            client_uuid,
            verify_type_code,
            verification_create,
            **kwargs
        ):
            """client_verification_create  # noqa: E501

            Create a verification for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_create(client_uuid, verify_type_code, verification_create, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verify_type_code (str):
                verification_create (VerificationCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            kwargs['verification_create'] = \
                verification_create
            return self.call_with_http_info(**kwargs)

        self.client_verification_create = _Endpoint(
            settings={
                'response_type': (VerificationCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/',
                'operation_id': 'client_verification_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verify_type_code',
                    'verification_create',
                ],
                'required': [
                    'client_uuid',
                    'verify_type_code',
                    'verification_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'verification_create':
                        (VerificationCreate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verify_type_code': 'verify_type_code',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verify_type_code': 'path',
                    'verification_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_verification_create
        )

        def __client_verification_document_create(
            self,
            client_uuid,
            verify_type_code,
            uuid,
            verify_type,
            created,
            updated,
            verification_documents,
            **kwargs
        ):
            """client_verification_document_create  # noqa: E501

            Create a verification Document for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_create(client_uuid, verify_type_code, uuid, verify_type, created, updated, verification_documents, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verify_type_code (str):
                uuid (str):
                verify_type (VerifyTypeEnum):
                created (datetime):
                updated (datetime):
                verification_documents ([VerificationDocumentCreate], none_type):

            Keyword Args:
                status (StatusBd7Enum): [optional]
                result (dict): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationWithType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            kwargs['uuid'] = \
                uuid
            kwargs['verify_type'] = \
                verify_type
            kwargs['created'] = \
                created
            kwargs['updated'] = \
                updated
            kwargs['verification_documents'] = \
                verification_documents
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_create = _Endpoint(
            settings={
                'response_type': (VerificationWithType,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/',
                'operation_id': 'client_verification_document_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verify_type_code',
                    'uuid',
                    'verify_type',
                    'created',
                    'updated',
                    'verification_documents',
                    'status',
                    'result',
                ],
                'required': [
                    'client_uuid',
                    'verify_type_code',
                    'uuid',
                    'verify_type',
                    'created',
                    'updated',
                    'verification_documents',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'uuid':
                        (str,),
                    'verify_type':
                        (VerifyTypeEnum,),
                    'created':
                        (datetime,),
                    'updated':
                        (datetime,),
                    'verification_documents':
                        ([VerificationDocumentCreate], none_type,),
                    'status':
                        (StatusBd7Enum,),
                    'result':
                        (dict,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verify_type_code': 'verify_type_code',
                    'uuid': 'uuid',
                    'verify_type': 'verify_type',
                    'created': 'created',
                    'updated': 'updated',
                    'verification_documents': 'verification_documents',
                    'status': 'status',
                    'result': 'result',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verify_type_code': 'path',
                    'uuid': 'form',
                    'verify_type': 'form',
                    'created': 'form',
                    'updated': 'form',
                    'verification_documents': 'form',
                    'status': 'form',
                    'result': 'form',
                },
                'collection_format_map': {
                    'verification_documents': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__client_verification_document_create
        )

        def __client_verification_document_delete(
            self,
            client_uuid,
            uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_document_delete  # noqa: E501

            Delete a client verificatoin document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_delete(client_uuid, uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                uuid (str):
                verify_type_code (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['uuid'] = \
                uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/',
                'operation_id': 'client_verification_document_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                ],
                'required': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'uuid': 'uuid',
                    'verify_type_code': 'verify_type_code',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'uuid': 'path',
                    'verify_type_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_document_delete
        )

        def __client_verification_document_list(
            self,
            client_uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_document_list  # noqa: E501

            List Verification Document for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_list(client_uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verify_type_code (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedVerificationDocumentList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_list = _Endpoint(
            settings={
                'response_type': (PaginatedVerificationDocumentList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/',
                'operation_id': 'client_verification_document_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verify_type_code',
                    'limit',
                    'offset',
                ],
                'required': [
                    'client_uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verify_type_code': 'verify_type_code',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verify_type_code': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_document_list
        )

        def __client_verification_document_partial_update(
            self,
            client_uuid,
            uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_document_partial_update  # noqa: E501

            Partial Update a client verification document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_partial_update(client_uuid, uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                uuid (str):
                verify_type_code (str):

            Keyword Args:
                uuid2 (str): [optional]
                document_type (DocumentTypeEnum): [optional]
                document_front (str): [optional]
                document_back (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationDocument
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['uuid'] = \
                uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_partial_update = _Endpoint(
            settings={
                'response_type': (VerificationDocument,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/',
                'operation_id': 'client_verification_document_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                    'uuid2',
                    'document_type',
                    'document_front',
                    'document_back',
                ],
                'required': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'uuid2':
                        (str,),
                    'document_type':
                        (DocumentTypeEnum,),
                    'document_front':
                        (str,),
                    'document_back':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'uuid': 'uuid',
                    'verify_type_code': 'verify_type_code',
                    'uuid2': 'uuid',
                    'document_type': 'document_type',
                    'document_front': 'document_front',
                    'document_back': 'document_back',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'uuid': 'path',
                    'verify_type_code': 'path',
                    'uuid2': 'form',
                    'document_type': 'form',
                    'document_front': 'form',
                    'document_back': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__client_verification_document_partial_update
        )

        def __client_verification_document_retrieve(
            self,
            client_uuid,
            uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_document_retrieve  # noqa: E501

            Retrieve a client verification document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_retrieve(client_uuid, uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                uuid (str):
                verify_type_code (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationDocument
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['uuid'] = \
                uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_retrieve = _Endpoint(
            settings={
                'response_type': (VerificationDocument,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/',
                'operation_id': 'client_verification_document_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                ],
                'required': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'uuid': 'uuid',
                    'verify_type_code': 'verify_type_code',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'uuid': 'path',
                    'verify_type_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_document_retrieve
        )

        def __client_verification_document_update(
            self,
            client_uuid,
            uuid,
            verify_type_code,
            uuid2,
            document_type,
            document_front,
            document_back,
            **kwargs
        ):
            """client_verification_document_update  # noqa: E501

            Update a client verification document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_update(client_uuid, uuid, verify_type_code, uuid2, document_type, document_front, document_back, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                uuid (str):
                verify_type_code (str):
                uuid2 (str):
                document_type (DocumentTypeEnum):
                document_front (str):
                document_back (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationDocument
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['uuid'] = \
                uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            kwargs['uuid2'] = \
                uuid2
            kwargs['document_type'] = \
                document_type
            kwargs['document_front'] = \
                document_front
            kwargs['document_back'] = \
                document_back
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_update = _Endpoint(
            settings={
                'response_type': (VerificationDocument,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{uuid}/',
                'operation_id': 'client_verification_document_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                    'uuid2',
                    'document_type',
                    'document_front',
                    'document_back',
                ],
                'required': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                    'uuid2',
                    'document_type',
                    'document_front',
                    'document_back',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'uuid2':
                        (str,),
                    'document_type':
                        (DocumentTypeEnum,),
                    'document_front':
                        (str,),
                    'document_back':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'uuid': 'uuid',
                    'verify_type_code': 'verify_type_code',
                    'uuid2': 'uuid',
                    'document_type': 'document_type',
                    'document_front': 'document_front',
                    'document_back': 'document_back',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'uuid': 'path',
                    'verify_type_code': 'path',
                    'uuid2': 'form',
                    'document_type': 'form',
                    'document_front': 'form',
                    'document_back': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__client_verification_document_update
        )

        def __client_verification_list(
            self,
            client_uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_list  # noqa: E501

            List Verification for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_list(client_uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verify_type_code (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedVerificationListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_list = _Endpoint(
            settings={
                'response_type': (PaginatedVerificationListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/',
                'operation_id': 'client_verification_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verify_type_code',
                    'limit',
                    'offset',
                ],
                'required': [
                    'client_uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verify_type_code': 'verify_type_code',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verify_type_code': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_list
        )

        def __client_verification_retrieve(
            self,
            client_uuid,
            uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_retrieve  # noqa: E501

            Retrieve a client verification   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_retrieve(client_uuid, uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                uuid (str):
                verify_type_code (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['uuid'] = \
                uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_retrieve = _Endpoint(
            settings={
                'response_type': (VerificationList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{uuid}/',
                'operation_id': 'client_verification_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                ],
                'required': [
                    'client_uuid',
                    'uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'uuid': 'uuid',
                    'verify_type_code': 'verify_type_code',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'uuid': 'path',
                    'verify_type_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_retrieve
        )
