"""
    Nucoro API

    No description  # noqa: E501

    The version of the OpenAPI document: 4.175.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nucoro_api.api_client import ApiClient, Endpoint as _Endpoint
from nucoro_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from nucoro_api.model.aum_evoluation import AUMEvoluation
from nucoro_api.model.aum_portfolio_risk import AUMPortfolioRisk
from nucoro_api.model.allocation_by_asset import AllocationByAsset
from nucoro_api.model.asset_concentration_risk import AssetConcentrationRisk
from nucoro_api.model.client_ranking import ClientRanking
from nucoro_api.model.relationship_manager import RelationshipManager


class AnalyticsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __api_v2_relationship_manager_analytics_allocations_by_asset_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_allocations_by_asset_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_allocations_by_asset_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AllocationByAsset
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_allocations_by_asset_retrieve = _Endpoint(
            settings={
                'response_type': (AllocationByAsset,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/allocations-by-asset/',
                'operation_id': 'api_v2_relationship_manager_analytics_allocations_by_asset_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_allocations_by_asset_retrieve
        )

        def __api_v2_relationship_manager_analytics_asset_concentration_risk_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_asset_concentration_risk_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_asset_concentration_risk_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AssetConcentrationRisk
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_asset_concentration_risk_retrieve = _Endpoint(
            settings={
                'response_type': (AssetConcentrationRisk,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/asset-concentration-risk/',
                'operation_id': 'api_v2_relationship_manager_analytics_asset_concentration_risk_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_asset_concentration_risk_retrieve
        )

        def __api_v2_relationship_manager_analytics_aum_evolution_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_aum_evolution_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_aum_evolution_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AUMEvoluation
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_aum_evolution_retrieve = _Endpoint(
            settings={
                'response_type': (AUMEvoluation,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-evolution/',
                'operation_id': 'api_v2_relationship_manager_analytics_aum_evolution_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_aum_evolution_retrieve
        )

        def __api_v2_relationship_manager_analytics_aum_portfolio_risk_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_aum_portfolio_risk_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_aum_portfolio_risk_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AUMPortfolioRisk
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_aum_portfolio_risk_retrieve = _Endpoint(
            settings={
                'response_type': (AUMPortfolioRisk,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-portfolio-risk/',
                'operation_id': 'api_v2_relationship_manager_analytics_aum_portfolio_risk_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_aum_portfolio_risk_retrieve
        )

        def __api_v2_relationship_manager_analytics_aum_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_aum_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_aum_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RelationshipManager
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_aum_retrieve = _Endpoint(
            settings={
                'response_type': (RelationshipManager,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum/',
                'operation_id': 'api_v2_relationship_manager_analytics_aum_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_aum_retrieve
        )

        def __api_v2_relationship_manager_analytics_client_by_risk_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_client_by_risk_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_client_by_risk_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RelationshipManager
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_client_by_risk_retrieve = _Endpoint(
            settings={
                'response_type': (RelationshipManager,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-risk/',
                'operation_id': 'api_v2_relationship_manager_analytics_client_by_risk_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_client_by_risk_retrieve
        )

        def __api_v2_relationship_manager_analytics_client_by_status_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_client_by_status_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_client_by_status_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RelationshipManager
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_client_by_status_retrieve = _Endpoint(
            settings={
                'response_type': (RelationshipManager,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-status/',
                'operation_id': 'api_v2_relationship_manager_analytics_client_by_status_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_client_by_status_retrieve
        )

        def __api_v2_relationship_manager_analytics_client_ranking_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_client_ranking_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_client_ranking_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ClientRanking
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_client_ranking_retrieve = _Endpoint(
            settings={
                'response_type': (ClientRanking,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-ranking/',
                'operation_id': 'api_v2_relationship_manager_analytics_client_ranking_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_client_ranking_retrieve
        )

        def __api_v2_relationship_manager_analytics_inflows_outflows_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_inflows_outflows_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_inflows_outflows_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RelationshipManager
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_inflows_outflows_retrieve = _Endpoint(
            settings={
                'response_type': (RelationshipManager,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/inflows-outflows/',
                'operation_id': 'api_v2_relationship_manager_analytics_inflows_outflows_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_inflows_outflows_retrieve
        )

        def __api_v2_relationship_manager_analytics_portfolio_risk_performance_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_portfolio_risk_performance_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_portfolio_risk_performance_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RelationshipManager
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_portfolio_risk_performance_retrieve = _Endpoint(
            settings={
                'response_type': (RelationshipManager,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/portfolio-risk-performance/',
                'operation_id': 'api_v2_relationship_manager_analytics_portfolio_risk_performance_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_portfolio_risk_performance_retrieve
        )

        def __api_v2_relationship_manager_analytics_total_active_clients_retrieve(
            self,
            relationship_manager_uuid,
            **kwargs
        ):
            """api_v2_relationship_manager_analytics_total_active_clients_retrieve  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v2_relationship_manager_analytics_total_active_clients_retrieve(relationship_manager_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                relationship_manager_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RelationshipManager
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['relationship_manager_uuid'] = \
                relationship_manager_uuid
            return self.call_with_http_info(**kwargs)

        self.api_v2_relationship_manager_analytics_total_active_clients_retrieve = _Endpoint(
            settings={
                'response_type': (RelationshipManager,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/total-active-clients/',
                'operation_id': 'api_v2_relationship_manager_analytics_total_active_clients_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'relationship_manager_uuid',
                ],
                'required': [
                    'relationship_manager_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'relationship_manager_uuid':
                        (str,),
                },
                'attribute_map': {
                    'relationship_manager_uuid': 'relationship_manager_uuid',
                },
                'location_map': {
                    'relationship_manager_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v2_relationship_manager_analytics_total_active_clients_retrieve
        )
