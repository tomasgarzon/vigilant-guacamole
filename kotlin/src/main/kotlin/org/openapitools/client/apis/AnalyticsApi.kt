/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.AUMEvoluation
import org.openapitools.client.models.AUMPortfolioRisk
import org.openapitools.client.models.AllocationByAsset
import org.openapitools.client.models.AssetConcentrationRisk
import org.openapitools.client.models.ClientRanking
import org.openapitools.client.models.RelationshipManager

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AnalyticsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return AllocationByAsset
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve(relationshipManagerUuid: java.util.UUID) : AllocationByAsset {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, AllocationByAsset>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AllocationByAsset
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsAllocationsByAssetRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/allocations-by-asset/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return AssetConcentrationRisk
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve(relationshipManagerUuid: java.util.UUID) : AssetConcentrationRisk {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, AssetConcentrationRisk>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AssetConcentrationRisk
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsAssetConcentrationRiskRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/asset-concentration-risk/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return AUMEvoluation
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve(relationshipManagerUuid: java.util.UUID) : AUMEvoluation {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, AUMEvoluation>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AUMEvoluation
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsAumEvolutionRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsAumEvolutionRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-evolution/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return AUMPortfolioRisk
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve(relationshipManagerUuid: java.util.UUID) : AUMPortfolioRisk {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, AUMPortfolioRisk>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AUMPortfolioRisk
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsAumPortfolioRiskRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum-portfolio-risk/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return RelationshipManager
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsAumRetrieve(relationshipManagerUuid: java.util.UUID) : RelationshipManager {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsAumRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, RelationshipManager>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RelationshipManager
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsAumRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsAumRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/aum/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return RelationshipManager
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsClientByRiskRetrieve(relationshipManagerUuid: java.util.UUID) : RelationshipManager {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsClientByRiskRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, RelationshipManager>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RelationshipManager
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsClientByRiskRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsClientByRiskRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-risk/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return RelationshipManager
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsClientByStatusRetrieve(relationshipManagerUuid: java.util.UUID) : RelationshipManager {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsClientByStatusRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, RelationshipManager>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RelationshipManager
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsClientByStatusRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsClientByStatusRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-by-status/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return ClientRanking
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsClientRankingRetrieve(relationshipManagerUuid: java.util.UUID) : ClientRanking {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsClientRankingRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, ClientRanking>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClientRanking
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsClientRankingRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsClientRankingRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/client-ranking/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return RelationshipManager
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve(relationshipManagerUuid: java.util.UUID) : RelationshipManager {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, RelationshipManager>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RelationshipManager
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsInflowsOutflowsRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/inflows-outflows/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return RelationshipManager
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve(relationshipManagerUuid: java.util.UUID) : RelationshipManager {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, RelationshipManager>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RelationshipManager
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsPortfolioRiskPerformanceRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/portfolio-risk-performance/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param relationshipManagerUuid  
    * @return RelationshipManager
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve(relationshipManagerUuid: java.util.UUID) : RelationshipManager {
        val localVariableConfig = apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveRequestConfig(relationshipManagerUuid = relationshipManagerUuid)

        val localVarResponse = request<Unit, RelationshipManager>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RelationshipManager
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieve
    *
    * @param relationshipManagerUuid  
    * @return RequestConfig
    */
    fun apiV2RelationshipManagerAnalyticsTotalActiveClientsRetrieveRequestConfig(relationshipManagerUuid: java.util.UUID) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/relationship-manager/{relationship_manager_uuid}/analytics/total-active-clients/".replace("{"+"relationship_manager_uuid"+"}", "$relationshipManagerUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
