/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json

/**
 * 
 *
 * Values: passport,drivingLicence,nationalIdentityCard,utilityBill,localTaxBill,bankStatement,leaseAgreement,rentReceipt,letter,certificateMarriage,decreeAbsolute,finalOrder,clientPhoto
 */

enum class DocumentTypeEnum(val value: kotlin.String) {

    @Json(name = "passport")
    passport("passport"),

    @Json(name = "driving_licence")
    drivingLicence("driving_licence"),

    @Json(name = "national_identity_card")
    nationalIdentityCard("national_identity_card"),

    @Json(name = "utility_bill")
    utilityBill("utility_bill"),

    @Json(name = "local_tax_bill")
    localTaxBill("local_tax_bill"),

    @Json(name = "bank_statement")
    bankStatement("bank_statement"),

    @Json(name = "lease_agreement")
    leaseAgreement("lease_agreement"),

    @Json(name = "rent_receipt")
    rentReceipt("rent_receipt"),

    @Json(name = "letter")
    letter("letter"),

    @Json(name = "certificate_marriage")
    certificateMarriage("certificate_marriage"),

    @Json(name = "decree_absolute")
    decreeAbsolute("decree_absolute"),

    @Json(name = "final_order")
    finalOrder("final_order"),

    @Json(name = "client_photo")
    clientPhoto("client_photo");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: Any?): kotlin.String? = if (data is DocumentTypeEnum) "$data" else null

        /**
         * Returns a valid [DocumentTypeEnum] for [data], null otherwise.
         */
        fun decode(data: Any?): DocumentTypeEnum? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

