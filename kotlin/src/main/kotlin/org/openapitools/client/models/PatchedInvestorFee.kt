/**
 * Nucoro API
 *
 * No description
 *
 * The version of the OpenAPI document: 4.175.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.FeeTypeEnum
import org.openapitools.client.models.ValueUnitEnum

import com.squareup.moshi.Json

/**
 * 
 *
 * @param `value` Determinates a percentage or an amount (between 0 and 1 if percentage otherwise Positive Decimal)
 * @param valueUnit Determines the type of the value(Fixed, Percentage)
 * @param feeType Each choice should have a related method on fee model that contains the logic to charge the client
 * @param concept Describes the concept that will be shown on invoice
 * @param dateFrom Defines the end date when the percentage should be applied
 * @param dateTo Defines the start date when the percentage should be applied
 * @param amountFrom Defines the amount start range when the percentage should be applied
 * @param amountTo Defines the amount end range when the percentage should be applied
 * @param uuid 
 * @param created 
 * @param updated 
 */

data class PatchedInvestorFee (

    /* Determinates a percentage or an amount (between 0 and 1 if percentage otherwise Positive Decimal) */
    @Json(name = "value")
    val `value`: kotlin.Double? = null,

    /* Determines the type of the value(Fixed, Percentage) */
    @Json(name = "value_unit")
    val valueUnit: ValueUnitEnum? = null,

    /* Each choice should have a related method on fee model that contains the logic to charge the client */
    @Json(name = "fee_type")
    val feeType: FeeTypeEnum? = null,

    /* Describes the concept that will be shown on invoice */
    @Json(name = "concept")
    val concept: kotlin.String? = null,

    /* Defines the end date when the percentage should be applied */
    @Json(name = "date_from")
    val dateFrom: java.time.LocalDate? = null,

    /* Defines the start date when the percentage should be applied */
    @Json(name = "date_to")
    val dateTo: java.time.LocalDate? = null,

    /* Defines the amount start range when the percentage should be applied */
    @Json(name = "amount_from")
    val amountFrom: kotlin.Double? = null,

    /* Defines the amount end range when the percentage should be applied */
    @Json(name = "amount_to")
    val amountTo: kotlin.Double? = null,

    @Json(name = "uuid")
    val uuid: java.util.UUID? = null,

    @Json(name = "created")
    val created: java.time.OffsetDateTime? = null,

    @Json(name = "updated")
    val updated: java.time.OffsetDateTime? = null

)

