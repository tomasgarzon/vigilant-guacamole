"""
    Nucoro API v2

    No description  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.address_create import AddressCreate
from openapi_client.model.address_list import AddressList
from openapi_client.model.address_update import AddressUpdate
from openapi_client.model.application_client_update import ApplicationClientUpdate
from openapi_client.model.assessment import Assessment
from openapi_client.model.bank_account_create_update import BankAccountCreateUpdate
from openapi_client.model.bank_account_list import BankAccountList
from openapi_client.model.client_create import ClientCreate
from openapi_client.model.client_detail import ClientDetail
from openapi_client.model.client_performance import ClientPerformance
from openapi_client.model.document_type_enum import DocumentTypeEnum
from openapi_client.model.nationality_create import NationalityCreate
from openapi_client.model.nationality_list import NationalityList
from openapi_client.model.nationality_update import NationalityUpdate
from openapi_client.model.paginated_address_list_list import PaginatedAddressListList
from openapi_client.model.paginated_assessment_list import PaginatedAssessmentList
from openapi_client.model.paginated_bank_account_list_list import PaginatedBankAccountListList
from openapi_client.model.paginated_client_detail_list import PaginatedClientDetailList
from openapi_client.model.paginated_nationality_list_list import PaginatedNationalityListList
from openapi_client.model.paginated_tax_information_list_list import PaginatedTaxInformationListList
from openapi_client.model.paginated_verification_document_list import PaginatedVerificationDocumentList
from openapi_client.model.paginated_verification_list_list import PaginatedVerificationListList
from openapi_client.model.patched_address_update import PatchedAddressUpdate
from openapi_client.model.patched_application_client_update import PatchedApplicationClientUpdate
from openapi_client.model.patched_assessment import PatchedAssessment
from openapi_client.model.patched_bank_account_create_update import PatchedBankAccountCreateUpdate
from openapi_client.model.patched_nationality_update import PatchedNationalityUpdate
from openapi_client.model.patched_tax_information_create_update import PatchedTaxInformationCreateUpdate
from openapi_client.model.result_enum import ResultEnum
from openapi_client.model.status_bd7_enum import StatusBd7Enum
from openapi_client.model.tax_information_create_update import TaxInformationCreateUpdate
from openapi_client.model.tax_information_list import TaxInformationList
from openapi_client.model.verification_create import VerificationCreate
from openapi_client.model.verification_document import VerificationDocument
from openapi_client.model.verification_document_create import VerificationDocumentCreate
from openapi_client.model.verification_list import VerificationList
from openapi_client.model.verification_with_type import VerificationWithType
from openapi_client.model.verify_type_enum import VerifyTypeEnum


class ApplicationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __client_address_create(
            self,
            client_uuid,
            address_create,
            **kwargs
        ):
            """client_address_create  # noqa: E501

            Create an address for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_address_create(client_uuid, address_create, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                address_create (AddressCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['address_create'] = \
                address_create
            return self.call_with_http_info(**kwargs)

        self.client_address_create = _Endpoint(
            settings={
                'response_type': (AddressCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/addresses/',
                'operation_id': 'client_address_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'address_create',
                ],
                'required': [
                    'client_uuid',
                    'address_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'address_create':
                        (AddressCreate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'address_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_address_create
        )

        def __client_address_delete(
            self,
            address_uuid,
            client_uuid,
            **kwargs
        ):
            """client_address_delete  # noqa: E501

            Delete a client address  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_address_delete(address_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                address_uuid (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address_uuid'] = \
                address_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_address_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/addresses/{address_uuid}/',
                'operation_id': 'client_address_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'address_uuid',
                    'client_uuid',
                ],
                'required': [
                    'address_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'address_uuid': 'address_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'address_uuid': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_address_delete
        )

        def __client_address_partial_update(
            self,
            address_uuid,
            client_uuid,
            **kwargs
        ):
            """client_address_partial_update  # noqa: E501

            Partial Update a client address  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_address_partial_update(address_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                address_uuid (str):
                client_uuid (str):

            Keyword Args:
                patched_address_update (PatchedAddressUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address_uuid'] = \
                address_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_address_partial_update = _Endpoint(
            settings={
                'response_type': (AddressUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/addresses/{address_uuid}/',
                'operation_id': 'client_address_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'address_uuid',
                    'client_uuid',
                    'patched_address_update',
                ],
                'required': [
                    'address_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                    'patched_address_update':
                        (PatchedAddressUpdate,),
                },
                'attribute_map': {
                    'address_uuid': 'address_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'address_uuid': 'path',
                    'client_uuid': 'path',
                    'patched_address_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_address_partial_update
        )

        def __client_address_retrieve(
            self,
            address_uuid,
            client_uuid,
            **kwargs
        ):
            """client_address_retrieve  # noqa: E501

            Retrieve a client address  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_address_retrieve(address_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                address_uuid (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address_uuid'] = \
                address_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_address_retrieve = _Endpoint(
            settings={
                'response_type': (AddressList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/addresses/{address_uuid}/',
                'operation_id': 'client_address_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'address_uuid',
                    'client_uuid',
                ],
                'required': [
                    'address_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'address_uuid': 'address_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'address_uuid': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_address_retrieve
        )

        def __client_address_update(
            self,
            address_uuid,
            client_uuid,
            address_update,
            **kwargs
        ):
            """client_address_update  # noqa: E501

            Update a client address  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_address_update(address_uuid, client_uuid, address_update, async_req=True)
            >>> result = thread.get()

            Args:
                address_uuid (str):
                client_uuid (str):
                address_update (AddressUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AddressUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['address_uuid'] = \
                address_uuid
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['address_update'] = \
                address_update
            return self.call_with_http_info(**kwargs)

        self.client_address_update = _Endpoint(
            settings={
                'response_type': (AddressUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/addresses/{address_uuid}/',
                'operation_id': 'client_address_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'address_uuid',
                    'client_uuid',
                    'address_update',
                ],
                'required': [
                    'address_uuid',
                    'client_uuid',
                    'address_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'address_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                    'address_update':
                        (AddressUpdate,),
                },
                'attribute_map': {
                    'address_uuid': 'address_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'address_uuid': 'path',
                    'client_uuid': 'path',
                    'address_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_address_update
        )

        def __client_addresses_list(
            self,
            client_uuid,
            **kwargs
        ):
            """client_addresses_list  # noqa: E501

            List address for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_addresses_list(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedAddressListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_addresses_list = _Endpoint(
            settings={
                'response_type': (PaginatedAddressListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/addresses/',
                'operation_id': 'client_addresses_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'limit',
                    'offset',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_addresses_list
        )

        def __client_bank_account_create(
            self,
            client_uuid,
            **kwargs
        ):
            """client_bank_account_create  # noqa: E501

            Create a bank account for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_bank_account_create(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                bank_account_create_update (BankAccountCreateUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BankAccountCreateUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_bank_account_create = _Endpoint(
            settings={
                'response_type': (BankAccountCreateUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/bank-accounts/',
                'operation_id': 'client_bank_account_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'bank_account_create_update',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'bank_account_create_update':
                        (BankAccountCreateUpdate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'bank_account_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_bank_account_create
        )

        def __client_bank_account_delete(
            self,
            bank_account_uuid,
            client_uuid,
            **kwargs
        ):
            """client_bank_account_delete  # noqa: E501

            Delete a client bank account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_bank_account_delete(bank_account_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                bank_account_uuid (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['bank_account_uuid'] = \
                bank_account_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_bank_account_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/',
                'operation_id': 'client_bank_account_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_account_uuid',
                    'client_uuid',
                ],
                'required': [
                    'bank_account_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_account_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'bank_account_uuid': 'bank_account_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'bank_account_uuid': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_bank_account_delete
        )

        def __client_bank_account_partial_update(
            self,
            bank_account_uuid,
            client_uuid,
            **kwargs
        ):
            """client_bank_account_partial_update  # noqa: E501

            Partial Update a client bank account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_bank_account_partial_update(bank_account_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                bank_account_uuid (str):
                client_uuid (str):

            Keyword Args:
                patched_bank_account_create_update (PatchedBankAccountCreateUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BankAccountCreateUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['bank_account_uuid'] = \
                bank_account_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_bank_account_partial_update = _Endpoint(
            settings={
                'response_type': (BankAccountCreateUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/',
                'operation_id': 'client_bank_account_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_account_uuid',
                    'client_uuid',
                    'patched_bank_account_create_update',
                ],
                'required': [
                    'bank_account_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_account_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                    'patched_bank_account_create_update':
                        (PatchedBankAccountCreateUpdate,),
                },
                'attribute_map': {
                    'bank_account_uuid': 'bank_account_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'bank_account_uuid': 'path',
                    'client_uuid': 'path',
                    'patched_bank_account_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_bank_account_partial_update
        )

        def __client_bank_account_retrieve(
            self,
            bank_account_uuid,
            client_uuid,
            **kwargs
        ):
            """client_bank_account_retrieve  # noqa: E501

            Retrieve a client bank account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_bank_account_retrieve(bank_account_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                bank_account_uuid (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BankAccountList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['bank_account_uuid'] = \
                bank_account_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_bank_account_retrieve = _Endpoint(
            settings={
                'response_type': (BankAccountList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/',
                'operation_id': 'client_bank_account_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_account_uuid',
                    'client_uuid',
                ],
                'required': [
                    'bank_account_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_account_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'bank_account_uuid': 'bank_account_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'bank_account_uuid': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_bank_account_retrieve
        )

        def __client_bank_account_update(
            self,
            bank_account_uuid,
            client_uuid,
            **kwargs
        ):
            """client_bank_account_update  # noqa: E501

            Update a client bank account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_bank_account_update(bank_account_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                bank_account_uuid (str):
                client_uuid (str):

            Keyword Args:
                bank_account_create_update (BankAccountCreateUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BankAccountCreateUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['bank_account_uuid'] = \
                bank_account_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_bank_account_update = _Endpoint(
            settings={
                'response_type': (BankAccountCreateUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/bank-accounts/{bank_account_uuid}/',
                'operation_id': 'client_bank_account_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'bank_account_uuid',
                    'client_uuid',
                    'bank_account_create_update',
                ],
                'required': [
                    'bank_account_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bank_account_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                    'bank_account_create_update':
                        (BankAccountCreateUpdate,),
                },
                'attribute_map': {
                    'bank_account_uuid': 'bank_account_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'bank_account_uuid': 'path',
                    'client_uuid': 'path',
                    'bank_account_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_bank_account_update
        )

        def __client_bank_accounts_list(
            self,
            client_uuid,
            **kwargs
        ):
            """client_bank_accounts_list  # noqa: E501

            List Bank Account for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_bank_accounts_list(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedBankAccountListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_bank_accounts_list = _Endpoint(
            settings={
                'response_type': (PaginatedBankAccountListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/bank-accounts/',
                'operation_id': 'client_bank_accounts_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'limit',
                    'offset',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_bank_accounts_list
        )

        def __client_complete_onboarding(
            self,
            client_uuid,
            client_detail,
            **kwargs
        ):
            """client_complete_onboarding  # noqa: E501

            Complete onboarding for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_complete_onboarding(client_uuid, client_detail, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                client_detail (ClientDetail):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ClientDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['client_detail'] = \
                client_detail
            return self.call_with_http_info(**kwargs)

        self.client_complete_onboarding = _Endpoint(
            settings={
                'response_type': (ClientDetail,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/onboarding/complete/',
                'operation_id': 'client_complete_onboarding',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'client_detail',
                ],
                'required': [
                    'client_uuid',
                    'client_detail',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'client_detail':
                        (ClientDetail,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'client_detail': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_complete_onboarding
        )

        def __client_create(
            self,
            client_create,
            **kwargs
        ):
            """client_create  # noqa: E501

            Create a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_create(client_create, async_req=True)
            >>> result = thread.get()

            Args:
                client_create (ClientCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ClientCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_create'] = \
                client_create
            return self.call_with_http_info(**kwargs)

        self.client_create = _Endpoint(
            settings={
                'response_type': (ClientCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/',
                'operation_id': 'client_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_create',
                ],
                'required': [
                    'client_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_create':
                        (ClientCreate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'client_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_create
        )

        def __client_list(
            self,
            **kwargs
        ):
            """client_list  # noqa: E501

            List client for a Relationship manager  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                external_custodian_id (str): [optional]
                extra_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type): Additional client attributes for the specific portal. [optional]
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                ordering ([str]): Ordering. [optional]
                search (str): A search term.. [optional]
                status (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedClientDetailList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.client_list = _Endpoint(
            settings={
                'response_type': (PaginatedClientDetailList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/',
                'operation_id': 'client_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'external_custodian_id',
                    'extra_data',
                    'limit',
                    'offset',
                    'ordering',
                    'search',
                    'status',
                ],
                'required': [],
                'nullable': [
                    'extra_data',
                ],
                'enum': [
                    'ordering',
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('ordering',): {

                        "-ACTIVATED": "-activated",
                        "-CREATED": "-created",
                        "-FIRST_NAME": "-first_name",
                        "-LAST_NAME": "-last_name",
                        "-RISK_LEVEL": "-risk_level",
                        "-STATUS": "-status",
                        "ACTIVATED": "activated",
                        "CREATED": "created",
                        "FIRST_NAME": "first_name",
                        "LAST_NAME": "last_name",
                        "RISK_LEVEL": "risk_level",
                        "STATUS": "status"
                    },
                    ('status',): {

                        "ACTIVE": "ACTIVE",
                        "CUSTODIAN_PENDING": "CUSTODIAN_PENDING",
                        "INACTIVE": "INACTIVE",
                        "KYC_PENDING": "KYC_PENDING",
                        "ONBOARDING": "ONBOARDING",
                        "PENDING": "PENDING"
                    },
                },
                'openapi_types': {
                    'external_custodian_id':
                        (str,),
                    'extra_data':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}, none_type,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'ordering':
                        ([str],),
                    'search':
                        (str,),
                    'status':
                        (str,),
                },
                'attribute_map': {
                    'external_custodian_id': 'external_custodian_id',
                    'extra_data': 'extra_data',
                    'limit': 'limit',
                    'offset': 'offset',
                    'ordering': 'ordering',
                    'search': 'search',
                    'status': 'status',
                },
                'location_map': {
                    'external_custodian_id': 'query',
                    'extra_data': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'ordering': 'query',
                    'search': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                    'ordering': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_list
        )

        def __client_nationality_create(
            self,
            client_uuid,
            nationality_create,
            **kwargs
        ):
            """client_nationality_create  # noqa: E501

            Create nationality for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_nationality_create(client_uuid, nationality_create, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                nationality_create (NationalityCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NationalityCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['nationality_create'] = \
                nationality_create
            return self.call_with_http_info(**kwargs)

        self.client_nationality_create = _Endpoint(
            settings={
                'response_type': (NationalityCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/nationalities/',
                'operation_id': 'client_nationality_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'nationality_create',
                ],
                'required': [
                    'client_uuid',
                    'nationality_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'nationality_create':
                        (NationalityCreate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'nationality_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_nationality_create
        )

        def __client_nationlities_list(
            self,
            client_uuid,
            **kwargs
        ):
            """client_nationlities_list  # noqa: E501

            List nationlities for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_nationlities_list(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedNationalityListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_nationlities_list = _Endpoint(
            settings={
                'response_type': (PaginatedNationalityListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/nationalities/',
                'operation_id': 'client_nationlities_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'limit',
                    'offset',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_nationlities_list
        )

        def __client_nationlity_delete(
            self,
            client_uuid,
            nationality_uuid,
            **kwargs
        ):
            """client_nationlity_delete  # noqa: E501

            Delete a client nationality  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_nationlity_delete(client_uuid, nationality_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                nationality_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['nationality_uuid'] = \
                nationality_uuid
            return self.call_with_http_info(**kwargs)

        self.client_nationlity_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/',
                'operation_id': 'client_nationlity_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'nationality_uuid',
                ],
                'required': [
                    'client_uuid',
                    'nationality_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'nationality_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'nationality_uuid': 'nationality_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'nationality_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_nationlity_delete
        )

        def __client_nationlity_partial_update(
            self,
            client_uuid,
            nationality_uuid,
            **kwargs
        ):
            """client_nationlity_partial_update  # noqa: E501

            Partial Update a client nationality  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_nationlity_partial_update(client_uuid, nationality_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                nationality_uuid (str):

            Keyword Args:
                patched_nationality_update (PatchedNationalityUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NationalityUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['nationality_uuid'] = \
                nationality_uuid
            return self.call_with_http_info(**kwargs)

        self.client_nationlity_partial_update = _Endpoint(
            settings={
                'response_type': (NationalityUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/',
                'operation_id': 'client_nationlity_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'nationality_uuid',
                    'patched_nationality_update',
                ],
                'required': [
                    'client_uuid',
                    'nationality_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'nationality_uuid':
                        (str,),
                    'patched_nationality_update':
                        (PatchedNationalityUpdate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'nationality_uuid': 'nationality_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'nationality_uuid': 'path',
                    'patched_nationality_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_nationlity_partial_update
        )

        def __client_nationlity_retrieve(
            self,
            client_uuid,
            nationality_uuid,
            **kwargs
        ):
            """client_nationlity_retrieve  # noqa: E501

            Retrieve a client nationality  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_nationlity_retrieve(client_uuid, nationality_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                nationality_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NationalityList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['nationality_uuid'] = \
                nationality_uuid
            return self.call_with_http_info(**kwargs)

        self.client_nationlity_retrieve = _Endpoint(
            settings={
                'response_type': (NationalityList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/',
                'operation_id': 'client_nationlity_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'nationality_uuid',
                ],
                'required': [
                    'client_uuid',
                    'nationality_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'nationality_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'nationality_uuid': 'nationality_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'nationality_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_nationlity_retrieve
        )

        def __client_nationlity_update(
            self,
            client_uuid,
            nationality_uuid,
            nationality_update,
            **kwargs
        ):
            """client_nationlity_update  # noqa: E501

            Update a client nationality  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_nationlity_update(client_uuid, nationality_uuid, nationality_update, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                nationality_uuid (str):
                nationality_update (NationalityUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                NationalityUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['nationality_uuid'] = \
                nationality_uuid
            kwargs['nationality_update'] = \
                nationality_update
            return self.call_with_http_info(**kwargs)

        self.client_nationlity_update = _Endpoint(
            settings={
                'response_type': (NationalityUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/nationalities/{nationality_uuid}/',
                'operation_id': 'client_nationlity_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'nationality_uuid',
                    'nationality_update',
                ],
                'required': [
                    'client_uuid',
                    'nationality_uuid',
                    'nationality_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'nationality_uuid':
                        (str,),
                    'nationality_update':
                        (NationalityUpdate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'nationality_uuid': 'nationality_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'nationality_uuid': 'path',
                    'nationality_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_nationlity_update
        )

        def __client_partial_update(
            self,
            client_uuid,
            **kwargs
        ):
            """client_partial_update  # noqa: E501

            Partial Update a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_partial_update(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                patched_application_client_update (PatchedApplicationClientUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApplicationClientUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_partial_update = _Endpoint(
            settings={
                'response_type': (ApplicationClientUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/',
                'operation_id': 'client_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'patched_application_client_update',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'patched_application_client_update':
                        (PatchedApplicationClientUpdate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'patched_application_client_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_partial_update
        )

        def __client_retrieve(
            self,
            client_uuid,
            **kwargs
        ):
            """client_retrieve  # noqa: E501

            Retrieve a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_retrieve(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ClientDetail
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_retrieve = _Endpoint(
            settings={
                'response_type': (ClientDetail,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/',
                'operation_id': 'client_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_retrieve
        )

        def __client_risk_assessment_create(
            self,
            client_uuid,
            assessment,
            **kwargs
        ):
            """client_risk_assessment_create  # noqa: E501

            Create a risk assessment for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_risk_assessment_create(client_uuid, assessment, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                assessment (Assessment):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Assessment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['assessment'] = \
                assessment
            return self.call_with_http_info(**kwargs)

        self.client_risk_assessment_create = _Endpoint(
            settings={
                'response_type': (Assessment,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/risk-assessments/',
                'operation_id': 'client_risk_assessment_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'assessment',
                ],
                'required': [
                    'client_uuid',
                    'assessment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'assessment':
                        (Assessment,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'assessment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_risk_assessment_create
        )

        def __client_risk_assessment_delete(
            self,
            assessment_uuid,
            client_uuid,
            **kwargs
        ):
            """client_risk_assessment_delete  # noqa: E501

            Delete a client risk assessment  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_risk_assessment_delete(assessment_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                assessment_uuid (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assessment_uuid'] = \
                assessment_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_risk_assessment_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/',
                'operation_id': 'client_risk_assessment_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'assessment_uuid',
                    'client_uuid',
                ],
                'required': [
                    'assessment_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assessment_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'assessment_uuid': 'assessment_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'assessment_uuid': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_risk_assessment_delete
        )

        def __client_risk_assessment_list(
            self,
            client_uuid,
            **kwargs
        ):
            """client_risk_assessment_list  # noqa: E501

            List Risk Assessment for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_risk_assessment_list(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                status ([str]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedAssessmentList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_risk_assessment_list = _Endpoint(
            settings={
                'response_type': (PaginatedAssessmentList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/risk-assessments/',
                'operation_id': 'client_risk_assessment_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'limit',
                    'offset',
                    'status',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                    'status',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('status',): {

                        "COMPLETED": "COMPLETED",
                        "OUTDATED": "OUTDATED",
                        "PENDING": "PENDING"
                    },
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                    'status':
                        ([str],),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                    'status': 'status',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                    'status': 'query',
                },
                'collection_format_map': {
                    'status': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_risk_assessment_list
        )

        def __client_risk_assessment_partial_update(
            self,
            assessment_uuid,
            client_uuid,
            **kwargs
        ):
            """client_risk_assessment_partial_update  # noqa: E501

            Partial Update a client risk assessment  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_risk_assessment_partial_update(assessment_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                assessment_uuid (str):
                client_uuid (str):

            Keyword Args:
                patched_assessment (PatchedAssessment): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Assessment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assessment_uuid'] = \
                assessment_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_risk_assessment_partial_update = _Endpoint(
            settings={
                'response_type': (Assessment,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/',
                'operation_id': 'client_risk_assessment_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'assessment_uuid',
                    'client_uuid',
                    'patched_assessment',
                ],
                'required': [
                    'assessment_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assessment_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                    'patched_assessment':
                        (PatchedAssessment,),
                },
                'attribute_map': {
                    'assessment_uuid': 'assessment_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'assessment_uuid': 'path',
                    'client_uuid': 'path',
                    'patched_assessment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_risk_assessment_partial_update
        )

        def __client_risk_assessment_retrieve(
            self,
            assessment_uuid,
            client_uuid,
            **kwargs
        ):
            """client_risk_assessment_retrieve  # noqa: E501

            Retrieve a client risk assessment  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_risk_assessment_retrieve(assessment_uuid, client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                assessment_uuid (str):
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Assessment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['assessment_uuid'] = \
                assessment_uuid
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_risk_assessment_retrieve = _Endpoint(
            settings={
                'response_type': (Assessment,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/risk-assessments/{assessment_uuid}/',
                'operation_id': 'client_risk_assessment_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'assessment_uuid',
                    'client_uuid',
                ],
                'required': [
                    'assessment_uuid',
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'assessment_uuid':
                        (str,),
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'assessment_uuid': 'assessment_uuid',
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'assessment_uuid': 'path',
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_risk_assessment_retrieve
        )

        def __client_tax_information_create(
            self,
            client_uuid,
            tax_information_create_update,
            **kwargs
        ):
            """client_tax_information_create  # noqa: E501

            Create a tax inforation for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_tax_information_create(client_uuid, tax_information_create_update, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                tax_information_create_update (TaxInformationCreateUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaxInformationCreateUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['tax_information_create_update'] = \
                tax_information_create_update
            return self.call_with_http_info(**kwargs)

        self.client_tax_information_create = _Endpoint(
            settings={
                'response_type': (TaxInformationCreateUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/tax-informations/',
                'operation_id': 'client_tax_information_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'tax_information_create_update',
                ],
                'required': [
                    'client_uuid',
                    'tax_information_create_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'tax_information_create_update':
                        (TaxInformationCreateUpdate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'tax_information_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_tax_information_create
        )

        def __client_tax_information_delete(
            self,
            client_uuid,
            tax_information_uuid,
            **kwargs
        ):
            """client_tax_information_delete  # noqa: E501

            Delete a client tax inforation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_tax_information_delete(client_uuid, tax_information_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                tax_information_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['tax_information_uuid'] = \
                tax_information_uuid
            return self.call_with_http_info(**kwargs)

        self.client_tax_information_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/',
                'operation_id': 'client_tax_information_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'tax_information_uuid',
                ],
                'required': [
                    'client_uuid',
                    'tax_information_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'tax_information_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'tax_information_uuid': 'tax_information_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'tax_information_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_tax_information_delete
        )

        def __client_tax_information_list(
            self,
            client_uuid,
            **kwargs
        ):
            """client_tax_information_list  # noqa: E501

            List tax information for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_tax_information_list(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedTaxInformationListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_tax_information_list = _Endpoint(
            settings={
                'response_type': (PaginatedTaxInformationListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/tax-informations/',
                'operation_id': 'client_tax_information_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'limit',
                    'offset',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_tax_information_list
        )

        def __client_tax_information_partial_update(
            self,
            client_uuid,
            tax_information_uuid,
            **kwargs
        ):
            """client_tax_information_partial_update  # noqa: E501

            Partial Update a client tax inforation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_tax_information_partial_update(client_uuid, tax_information_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                tax_information_uuid (str):

            Keyword Args:
                patched_tax_information_create_update (PatchedTaxInformationCreateUpdate): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaxInformationCreateUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['tax_information_uuid'] = \
                tax_information_uuid
            return self.call_with_http_info(**kwargs)

        self.client_tax_information_partial_update = _Endpoint(
            settings={
                'response_type': (TaxInformationCreateUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/',
                'operation_id': 'client_tax_information_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'tax_information_uuid',
                    'patched_tax_information_create_update',
                ],
                'required': [
                    'client_uuid',
                    'tax_information_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'tax_information_uuid':
                        (str,),
                    'patched_tax_information_create_update':
                        (PatchedTaxInformationCreateUpdate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'tax_information_uuid': 'tax_information_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'tax_information_uuid': 'path',
                    'patched_tax_information_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_tax_information_partial_update
        )

        def __client_tax_information_retrieve(
            self,
            client_uuid,
            tax_information_uuid,
            **kwargs
        ):
            """client_tax_information_retrieve  # noqa: E501

            Retrieve a client tax inforation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_tax_information_retrieve(client_uuid, tax_information_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                tax_information_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaxInformationList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['tax_information_uuid'] = \
                tax_information_uuid
            return self.call_with_http_info(**kwargs)

        self.client_tax_information_retrieve = _Endpoint(
            settings={
                'response_type': (TaxInformationList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/',
                'operation_id': 'client_tax_information_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'tax_information_uuid',
                ],
                'required': [
                    'client_uuid',
                    'tax_information_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'tax_information_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'tax_information_uuid': 'tax_information_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'tax_information_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_tax_information_retrieve
        )

        def __client_tax_information_update(
            self,
            client_uuid,
            tax_information_uuid,
            tax_information_create_update,
            **kwargs
        ):
            """client_tax_information_update  # noqa: E501

            Update a client tax inforation  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_tax_information_update(client_uuid, tax_information_uuid, tax_information_create_update, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                tax_information_uuid (str):
                tax_information_create_update (TaxInformationCreateUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                TaxInformationCreateUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['tax_information_uuid'] = \
                tax_information_uuid
            kwargs['tax_information_create_update'] = \
                tax_information_create_update
            return self.call_with_http_info(**kwargs)

        self.client_tax_information_update = _Endpoint(
            settings={
                'response_type': (TaxInformationCreateUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/tax-informations/{tax_information_uuid}/',
                'operation_id': 'client_tax_information_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'tax_information_uuid',
                    'tax_information_create_update',
                ],
                'required': [
                    'client_uuid',
                    'tax_information_uuid',
                    'tax_information_create_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'tax_information_uuid':
                        (str,),
                    'tax_information_create_update':
                        (TaxInformationCreateUpdate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'tax_information_uuid': 'tax_information_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'tax_information_uuid': 'path',
                    'tax_information_create_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_tax_information_update
        )

        def __client_twrr_performance(
            self,
            client_uuid,
            **kwargs
        ):
            """client_twrr_performance  # noqa: E501

            Calculate TWRR Performance for client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_twrr_performance(client_uuid, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ClientPerformance
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            return self.call_with_http_info(**kwargs)

        self.client_twrr_performance = _Endpoint(
            settings={
                'response_type': (ClientPerformance,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/performance/twrr/',
                'operation_id': 'client_twrr_performance',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                ],
                'required': [
                    'client_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_twrr_performance
        )

        def __client_update(
            self,
            client_uuid,
            application_client_update,
            **kwargs
        ):
            """client_update  # noqa: E501

            Update a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_update(client_uuid, application_client_update, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                application_client_update (ApplicationClientUpdate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ApplicationClientUpdate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['application_client_update'] = \
                application_client_update
            return self.call_with_http_info(**kwargs)

        self.client_update = _Endpoint(
            settings={
                'response_type': (ApplicationClientUpdate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/',
                'operation_id': 'client_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'application_client_update',
                ],
                'required': [
                    'client_uuid',
                    'application_client_update',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'application_client_update':
                        (ApplicationClientUpdate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'application_client_update': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_update
        )

        def __client_verification_create(
            self,
            client_uuid,
            verify_type_code,
            verification_create,
            **kwargs
        ):
            """client_verification_create  # noqa: E501

            Create a verification for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_create(client_uuid, verify_type_code, verification_create, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verify_type_code (str):
                verification_create (VerificationCreate):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationCreate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            kwargs['verification_create'] = \
                verification_create
            return self.call_with_http_info(**kwargs)

        self.client_verification_create = _Endpoint(
            settings={
                'response_type': (VerificationCreate,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/',
                'operation_id': 'client_verification_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verify_type_code',
                    'verification_create',
                ],
                'required': [
                    'client_uuid',
                    'verify_type_code',
                    'verification_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'verification_create':
                        (VerificationCreate,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verify_type_code': 'verify_type_code',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verify_type_code': 'path',
                    'verification_create': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__client_verification_create
        )

        def __client_verification_document_create(
            self,
            client_uuid,
            verify_type_code,
            uuid,
            verify_type,
            created,
            updated,
            verification_documents,
            **kwargs
        ):
            """client_verification_document_create  # noqa: E501

            Create a verification Document for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_create(client_uuid, verify_type_code, uuid, verify_type, created, updated, verification_documents, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verify_type_code (str):
                uuid (str):
                verify_type (VerifyTypeEnum):
                created (datetime):
                updated (datetime):
                verification_documents ([VerificationDocumentCreate], none_type):

            Keyword Args:
                status (StatusBd7Enum): [optional]
                result (ResultEnum): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationWithType
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            kwargs['uuid'] = \
                uuid
            kwargs['verify_type'] = \
                verify_type
            kwargs['created'] = \
                created
            kwargs['updated'] = \
                updated
            kwargs['verification_documents'] = \
                verification_documents
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_create = _Endpoint(
            settings={
                'response_type': (VerificationWithType,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/',
                'operation_id': 'client_verification_document_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verify_type_code',
                    'uuid',
                    'verify_type',
                    'created',
                    'updated',
                    'verification_documents',
                    'status',
                    'result',
                ],
                'required': [
                    'client_uuid',
                    'verify_type_code',
                    'uuid',
                    'verify_type',
                    'created',
                    'updated',
                    'verification_documents',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'uuid':
                        (str,),
                    'verify_type':
                        (VerifyTypeEnum,),
                    'created':
                        (datetime,),
                    'updated':
                        (datetime,),
                    'verification_documents':
                        ([VerificationDocumentCreate], none_type,),
                    'status':
                        (StatusBd7Enum,),
                    'result':
                        (ResultEnum,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verify_type_code': 'verify_type_code',
                    'uuid': 'uuid',
                    'verify_type': 'verify_type',
                    'created': 'created',
                    'updated': 'updated',
                    'verification_documents': 'verification_documents',
                    'status': 'status',
                    'result': 'result',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verify_type_code': 'path',
                    'uuid': 'form',
                    'verify_type': 'form',
                    'created': 'form',
                    'updated': 'form',
                    'verification_documents': 'form',
                    'status': 'form',
                    'result': 'form',
                },
                'collection_format_map': {
                    'verification_documents': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__client_verification_document_create
        )

        def __client_verification_document_delete(
            self,
            client_uuid,
            verification_document_uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_document_delete  # noqa: E501

            Delete a client verificatoin document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_delete(client_uuid, verification_document_uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verification_document_uuid (str):
                verify_type_code (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verification_document_uuid'] = \
                verification_document_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/',
                'operation_id': 'client_verification_document_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verification_document_uuid',
                    'verify_type_code',
                ],
                'required': [
                    'client_uuid',
                    'verification_document_uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verification_document_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verification_document_uuid': 'verification_document_uuid',
                    'verify_type_code': 'verify_type_code',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verification_document_uuid': 'path',
                    'verify_type_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_document_delete
        )

        def __client_verification_document_list(
            self,
            client_uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_document_list  # noqa: E501

            List Verification Document for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_list(client_uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verify_type_code (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedVerificationDocumentList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_list = _Endpoint(
            settings={
                'response_type': (PaginatedVerificationDocumentList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/',
                'operation_id': 'client_verification_document_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verify_type_code',
                    'limit',
                    'offset',
                ],
                'required': [
                    'client_uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verify_type_code': 'verify_type_code',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verify_type_code': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_document_list
        )

        def __client_verification_document_partial_update(
            self,
            client_uuid,
            verification_document_uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_document_partial_update  # noqa: E501

            Partial Update a client verification document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_partial_update(client_uuid, verification_document_uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verification_document_uuid (str):
                verify_type_code (str):

            Keyword Args:
                uuid (str): [optional]
                document_type (DocumentTypeEnum): [optional]
                document_front (str): [optional]
                document_back (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationDocument
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verification_document_uuid'] = \
                verification_document_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_partial_update = _Endpoint(
            settings={
                'response_type': (VerificationDocument,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/',
                'operation_id': 'client_verification_document_partial_update',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verification_document_uuid',
                    'verify_type_code',
                    'uuid',
                    'document_type',
                    'document_front',
                    'document_back',
                ],
                'required': [
                    'client_uuid',
                    'verification_document_uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verification_document_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'uuid':
                        (str,),
                    'document_type':
                        (DocumentTypeEnum,),
                    'document_front':
                        (str,),
                    'document_back':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verification_document_uuid': 'verification_document_uuid',
                    'verify_type_code': 'verify_type_code',
                    'uuid': 'uuid',
                    'document_type': 'document_type',
                    'document_front': 'document_front',
                    'document_back': 'document_back',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verification_document_uuid': 'path',
                    'verify_type_code': 'path',
                    'uuid': 'form',
                    'document_type': 'form',
                    'document_front': 'form',
                    'document_back': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__client_verification_document_partial_update
        )

        def __client_verification_document_retrieve(
            self,
            client_uuid,
            verification_document_uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_document_retrieve  # noqa: E501

            Retrieve a client verification document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_retrieve(client_uuid, verification_document_uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verification_document_uuid (str):
                verify_type_code (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationDocument
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verification_document_uuid'] = \
                verification_document_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_retrieve = _Endpoint(
            settings={
                'response_type': (VerificationDocument,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/',
                'operation_id': 'client_verification_document_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verification_document_uuid',
                    'verify_type_code',
                ],
                'required': [
                    'client_uuid',
                    'verification_document_uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verification_document_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verification_document_uuid': 'verification_document_uuid',
                    'verify_type_code': 'verify_type_code',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verification_document_uuid': 'path',
                    'verify_type_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_document_retrieve
        )

        def __client_verification_document_update(
            self,
            client_uuid,
            verification_document_uuid,
            verify_type_code,
            uuid,
            document_type,
            document_front,
            document_back,
            **kwargs
        ):
            """client_verification_document_update  # noqa: E501

            Update a client verification document  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_document_update(client_uuid, verification_document_uuid, verify_type_code, uuid, document_type, document_front, document_back, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verification_document_uuid (str):
                verify_type_code (str):
                uuid (str):
                document_type (DocumentTypeEnum):
                document_front (str):
                document_back (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationDocument
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verification_document_uuid'] = \
                verification_document_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            kwargs['uuid'] = \
                uuid
            kwargs['document_type'] = \
                document_type
            kwargs['document_front'] = \
                document_front
            kwargs['document_back'] = \
                document_back
            return self.call_with_http_info(**kwargs)

        self.client_verification_document_update = _Endpoint(
            settings={
                'response_type': (VerificationDocument,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/',
                'operation_id': 'client_verification_document_update',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verification_document_uuid',
                    'verify_type_code',
                    'uuid',
                    'document_type',
                    'document_front',
                    'document_back',
                ],
                'required': [
                    'client_uuid',
                    'verification_document_uuid',
                    'verify_type_code',
                    'uuid',
                    'document_type',
                    'document_front',
                    'document_back',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verification_document_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'uuid':
                        (str,),
                    'document_type':
                        (DocumentTypeEnum,),
                    'document_front':
                        (str,),
                    'document_back':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verification_document_uuid': 'verification_document_uuid',
                    'verify_type_code': 'verify_type_code',
                    'uuid': 'uuid',
                    'document_type': 'document_type',
                    'document_front': 'document_front',
                    'document_back': 'document_back',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verification_document_uuid': 'path',
                    'verify_type_code': 'path',
                    'uuid': 'form',
                    'document_type': 'form',
                    'document_front': 'form',
                    'document_back': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data',
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__client_verification_document_update
        )

        def __client_verification_list(
            self,
            client_uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_list  # noqa: E501

            List Verification for a client  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_list(client_uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verify_type_code (str):

            Keyword Args:
                limit (int): Number of results to return per page.. [optional]
                offset (int): The initial index from which to return the results.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedVerificationListList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_list = _Endpoint(
            settings={
                'response_type': (PaginatedVerificationListList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/',
                'operation_id': 'client_verification_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verify_type_code',
                    'limit',
                    'offset',
                ],
                'required': [
                    'client_uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                    'limit':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verify_type_code': 'verify_type_code',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verify_type_code': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_list
        )

        def __client_verification_retrieve(
            self,
            client_uuid,
            verification_uuid,
            verify_type_code,
            **kwargs
        ):
            """client_verification_retrieve  # noqa: E501

            Retrieve a client verification   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.client_verification_retrieve(client_uuid, verification_uuid, verify_type_code, async_req=True)
            >>> result = thread.get()

            Args:
                client_uuid (str):
                verification_uuid (str):
                verify_type_code (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                VerificationList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['client_uuid'] = \
                client_uuid
            kwargs['verification_uuid'] = \
                verification_uuid
            kwargs['verify_type_code'] = \
                verify_type_code
            return self.call_with_http_info(**kwargs)

        self.client_verification_retrieve = _Endpoint(
            settings={
                'response_type': (VerificationList,),
                'auth': [
                    'cookieAuth',
                    'jwtAuth',
                    'tokenAuth'
                ],
                'endpoint_path': '/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{verification_uuid}/',
                'operation_id': 'client_verification_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_uuid',
                    'verification_uuid',
                    'verify_type_code',
                ],
                'required': [
                    'client_uuid',
                    'verification_uuid',
                    'verify_type_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_uuid':
                        (str,),
                    'verification_uuid':
                        (str,),
                    'verify_type_code':
                        (str,),
                },
                'attribute_map': {
                    'client_uuid': 'client_uuid',
                    'verification_uuid': 'verification_uuid',
                    'verify_type_code': 'verify_type_code',
                },
                'location_map': {
                    'client_uuid': 'path',
                    'verification_uuid': 'path',
                    'verify_type_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__client_verification_retrieve
        )
