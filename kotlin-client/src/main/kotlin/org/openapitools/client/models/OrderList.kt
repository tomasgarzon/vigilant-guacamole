/**
 * Nucoro API v2
 *
 * No description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.Currency
import org.openapitools.client.models.OrderListMethodEnum
import org.openapitools.client.models.OrderListStatusEnum
import org.openapitools.client.models.OrderTypeEnum
import org.openapitools.client.models.RelatedAssetSerializerWithAssetCategories

import com.squareup.moshi.Json

/**
 * A ModelSerializer that takes additional arguments for \"fields\", \"omit\" and \"expand\" in order to control which fields are displayed, and whether to replace simple values with complex, nested serializations
 *
 * @param asset 
 * @param trade 
 * @param orderType 
 * @param method 
 * @param status 
 * @param reason 
 * @param completed 
 * @param rebalance 
 * @param portfolio 
 * @param shares 
 * @param amount 
 * @param priceAvg 
 * @param currency 
 * @param withdrawal 
 * @param created 
 * @param stopPrice 
 * @param limitPrice 
 * @param duration 
 */

data class OrderList (

    @Json(name = "asset")
    val asset: RelatedAssetSerializerWithAssetCategories,

    @Json(name = "trade")
    val trade: kotlin.String,

    @Json(name = "order_type")
    val orderType: OrderTypeEnum,

    @Json(name = "method")
    val method: OrderListMethodEnum,

    @Json(name = "status")
    val status: OrderListStatusEnum,

    @Json(name = "reason")
    val reason: kotlin.String,

    @Json(name = "completed")
    val completed: java.time.OffsetDateTime,

    @Json(name = "rebalance")
    val rebalance: kotlin.String,

    @Json(name = "portfolio")
    val portfolio: kotlin.String,

    @Json(name = "shares")
    val shares: kotlin.Double,

    @Json(name = "amount")
    val amount: kotlin.Double,

    @Json(name = "price_avg")
    val priceAvg: kotlin.Double,

    @Json(name = "currency")
    val currency: Currency,

    @Json(name = "withdrawal")
    val withdrawal: kotlin.String,

    @Json(name = "created")
    val created: java.time.OffsetDateTime,

    @Json(name = "stop_price")
    val stopPrice: kotlin.Double?,

    @Json(name = "limit_price")
    val limitPrice: kotlin.Double?,

    @Json(name = "duration")
    val duration: kotlin.String

)

