/**
 * Nucoro API v2
 *
 * No description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.DocumentTypeEnum
import org.openapitools.client.models.PaginatedVerificationDocumentList
import org.openapitools.client.models.PaginatedVerificationListList
import org.openapitools.client.models.ResultEnum
import org.openapitools.client.models.StatusBd7Enum
import org.openapitools.client.models.VerificationCreate
import org.openapitools.client.models.VerificationDocument
import org.openapitools.client.models.VerificationDocumentCreate
import org.openapitools.client.models.VerificationList
import org.openapitools.client.models.VerificationWithType
import org.openapitools.client.models.VerifyTypeEnum

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class KYCApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://localhost")
        }
    }

    /**
    * 
    * Create a verification for a client
    * @param clientUuid  
    * @param verifyTypeCode  
    * @param verificationCreate  
    * @return VerificationCreate
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationCreate(clientUuid: java.util.UUID, verifyTypeCode: kotlin.String, verificationCreate: VerificationCreate) : VerificationCreate {
        val localVariableConfig = clientVerificationCreateRequestConfig(clientUuid = clientUuid, verifyTypeCode = verifyTypeCode, verificationCreate = verificationCreate)

        val localVarResponse = request<VerificationCreate, VerificationCreate>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VerificationCreate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationCreate
    *
    * @param clientUuid  
    * @param verifyTypeCode  
    * @param verificationCreate  
    * @return RequestConfig
    */
    fun clientVerificationCreateRequestConfig(clientUuid: java.util.UUID, verifyTypeCode: kotlin.String, verificationCreate: VerificationCreate) : RequestConfig<VerificationCreate> {
        val localVariableBody = verificationCreate
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Create a verification Document for a client
    * @param clientUuid  
    * @param verifyTypeCode  
    * @param uuid  
    * @param verifyType  
    * @param created  
    * @param updated  
    * @param verificationDocuments  
    * @param status  (optional)
    * @param result  (optional)
    * @return VerificationWithType
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationDocumentCreate(clientUuid: java.util.UUID, verifyTypeCode: kotlin.String, uuid: java.util.UUID, verifyType: VerifyTypeEnum, created: java.time.OffsetDateTime, updated: java.time.OffsetDateTime, verificationDocuments: kotlin.collections.List<VerificationDocumentCreate>, status: StatusBd7Enum?, result: ResultEnum?) : VerificationWithType {
        val localVariableConfig = clientVerificationDocumentCreateRequestConfig(clientUuid = clientUuid, verifyTypeCode = verifyTypeCode, uuid = uuid, verifyType = verifyType, created = created, updated = updated, verificationDocuments = verificationDocuments, status = status, result = result)

        val localVarResponse = request<Map<String, Any?>, VerificationWithType>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VerificationWithType
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationDocumentCreate
    *
    * @param clientUuid  
    * @param verifyTypeCode  
    * @param uuid  
    * @param verifyType  
    * @param created  
    * @param updated  
    * @param verificationDocuments  
    * @param status  (optional)
    * @param result  (optional)
    * @return RequestConfig
    */
    fun clientVerificationDocumentCreateRequestConfig(clientUuid: java.util.UUID, verifyTypeCode: kotlin.String, uuid: java.util.UUID, verifyType: VerifyTypeEnum, created: java.time.OffsetDateTime, updated: java.time.OffsetDateTime, verificationDocuments: kotlin.collections.List<VerificationDocumentCreate>, status: StatusBd7Enum?, result: ResultEnum?) : RequestConfig<Map<String, Any?>> {
        val localVariableBody = mapOf("uuid" to uuid, "verify_type" to verifyType, "status" to status, "result" to result, "created" to created, "updated" to updated, "verification_documents" to verificationDocuments)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Delete a client verificatoin document
    * @param clientUuid  
    * @param verificationDocumentUuid  
    * @param verifyTypeCode  
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationDocumentDelete(clientUuid: java.util.UUID, verificationDocumentUuid: java.util.UUID, verifyTypeCode: kotlin.String) : Unit {
        val localVariableConfig = clientVerificationDocumentDeleteRequestConfig(clientUuid = clientUuid, verificationDocumentUuid = verificationDocumentUuid, verifyTypeCode = verifyTypeCode)

        val localVarResponse = request<Unit, Unit>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationDocumentDelete
    *
    * @param clientUuid  
    * @param verificationDocumentUuid  
    * @param verifyTypeCode  
    * @return RequestConfig
    */
    fun clientVerificationDocumentDeleteRequestConfig(clientUuid: java.util.UUID, verificationDocumentUuid: java.util.UUID, verifyTypeCode: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verification_document_uuid"+"}", "$verificationDocumentUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * List Verification Document for a client
    * @param clientUuid  
    * @param verifyTypeCode  
    * @param limit Number of results to return per page. (optional)
    * @param offset The initial index from which to return the results. (optional)
    * @return PaginatedVerificationDocumentList
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationDocumentList(clientUuid: java.util.UUID, verifyTypeCode: kotlin.String, limit: kotlin.Int?, offset: kotlin.Int?) : PaginatedVerificationDocumentList {
        val localVariableConfig = clientVerificationDocumentListRequestConfig(clientUuid = clientUuid, verifyTypeCode = verifyTypeCode, limit = limit, offset = offset)

        val localVarResponse = request<Unit, PaginatedVerificationDocumentList>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedVerificationDocumentList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationDocumentList
    *
    * @param clientUuid  
    * @param verifyTypeCode  
    * @param limit Number of results to return per page. (optional)
    * @param offset The initial index from which to return the results. (optional)
    * @return RequestConfig
    */
    fun clientVerificationDocumentListRequestConfig(clientUuid: java.util.UUID, verifyTypeCode: kotlin.String, limit: kotlin.Int?, offset: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Partial Update a client verification document
    * @param clientUuid  
    * @param verificationDocumentUuid  
    * @param verifyTypeCode  
    * @param uuid  (optional)
    * @param documentType  (optional)
    * @param documentFront  (optional)
    * @param documentBack  (optional)
    * @return VerificationDocument
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationDocumentPartialUpdate(clientUuid: java.util.UUID, verificationDocumentUuid: java.util.UUID, verifyTypeCode: kotlin.String, uuid: java.util.UUID?, documentType: DocumentTypeEnum?, documentFront: kotlin.String?, documentBack: kotlin.String?) : VerificationDocument {
        val localVariableConfig = clientVerificationDocumentPartialUpdateRequestConfig(clientUuid = clientUuid, verificationDocumentUuid = verificationDocumentUuid, verifyTypeCode = verifyTypeCode, uuid = uuid, documentType = documentType, documentFront = documentFront, documentBack = documentBack)

        val localVarResponse = request<Map<String, Any?>, VerificationDocument>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VerificationDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationDocumentPartialUpdate
    *
    * @param clientUuid  
    * @param verificationDocumentUuid  
    * @param verifyTypeCode  
    * @param uuid  (optional)
    * @param documentType  (optional)
    * @param documentFront  (optional)
    * @param documentBack  (optional)
    * @return RequestConfig
    */
    fun clientVerificationDocumentPartialUpdateRequestConfig(clientUuid: java.util.UUID, verificationDocumentUuid: java.util.UUID, verifyTypeCode: kotlin.String, uuid: java.util.UUID?, documentType: DocumentTypeEnum?, documentFront: kotlin.String?, documentBack: kotlin.String?) : RequestConfig<Map<String, Any?>> {
        val localVariableBody = mapOf("uuid" to uuid, "document_type" to documentType, "document_front" to documentFront, "document_back" to documentBack)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verification_document_uuid"+"}", "$verificationDocumentUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Retrieve a client verification document
    * @param clientUuid  
    * @param verificationDocumentUuid  
    * @param verifyTypeCode  
    * @return VerificationDocument
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationDocumentRetrieve(clientUuid: java.util.UUID, verificationDocumentUuid: java.util.UUID, verifyTypeCode: kotlin.String) : VerificationDocument {
        val localVariableConfig = clientVerificationDocumentRetrieveRequestConfig(clientUuid = clientUuid, verificationDocumentUuid = verificationDocumentUuid, verifyTypeCode = verifyTypeCode)

        val localVarResponse = request<Unit, VerificationDocument>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VerificationDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationDocumentRetrieve
    *
    * @param clientUuid  
    * @param verificationDocumentUuid  
    * @param verifyTypeCode  
    * @return RequestConfig
    */
    fun clientVerificationDocumentRetrieveRequestConfig(clientUuid: java.util.UUID, verificationDocumentUuid: java.util.UUID, verifyTypeCode: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verification_document_uuid"+"}", "$verificationDocumentUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Update a client verification document
    * @param clientUuid  
    * @param verificationDocumentUuid  
    * @param verifyTypeCode  
    * @param uuid  
    * @param documentType  
    * @param documentFront  
    * @param documentBack  
    * @return VerificationDocument
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationDocumentUpdate(clientUuid: java.util.UUID, verificationDocumentUuid: java.util.UUID, verifyTypeCode: kotlin.String, uuid: java.util.UUID, documentType: DocumentTypeEnum, documentFront: kotlin.String, documentBack: kotlin.String) : VerificationDocument {
        val localVariableConfig = clientVerificationDocumentUpdateRequestConfig(clientUuid = clientUuid, verificationDocumentUuid = verificationDocumentUuid, verifyTypeCode = verifyTypeCode, uuid = uuid, documentType = documentType, documentFront = documentFront, documentBack = documentBack)

        val localVarResponse = request<Map<String, Any?>, VerificationDocument>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VerificationDocument
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationDocumentUpdate
    *
    * @param clientUuid  
    * @param verificationDocumentUuid  
    * @param verifyTypeCode  
    * @param uuid  
    * @param documentType  
    * @param documentFront  
    * @param documentBack  
    * @return RequestConfig
    */
    fun clientVerificationDocumentUpdateRequestConfig(clientUuid: java.util.UUID, verificationDocumentUuid: java.util.UUID, verifyTypeCode: kotlin.String, uuid: java.util.UUID, documentType: DocumentTypeEnum, documentFront: kotlin.String, documentBack: kotlin.String) : RequestConfig<Map<String, Any?>> {
        val localVariableBody = mapOf("uuid" to uuid, "document_type" to documentType, "document_front" to documentFront, "document_back" to documentBack)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/documents/{verification_document_uuid}/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verification_document_uuid"+"}", "$verificationDocumentUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * List Verification for a client
    * @param clientUuid  
    * @param verifyTypeCode  
    * @param limit Number of results to return per page. (optional)
    * @param offset The initial index from which to return the results. (optional)
    * @return PaginatedVerificationListList
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationList(clientUuid: java.util.UUID, verifyTypeCode: kotlin.String, limit: kotlin.Int?, offset: kotlin.Int?) : PaginatedVerificationListList {
        val localVariableConfig = clientVerificationListRequestConfig(clientUuid = clientUuid, verifyTypeCode = verifyTypeCode, limit = limit, offset = offset)

        val localVarResponse = request<Unit, PaginatedVerificationListList>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PaginatedVerificationListList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationList
    *
    * @param clientUuid  
    * @param verifyTypeCode  
    * @param limit Number of results to return per page. (optional)
    * @param offset The initial index from which to return the results. (optional)
    * @return RequestConfig
    */
    fun clientVerificationListRequestConfig(clientUuid: java.util.UUID, verifyTypeCode: kotlin.String, limit: kotlin.Int?, offset: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * Retrieve a client verification 
    * @param clientUuid  
    * @param verificationUuid  
    * @param verifyTypeCode  
    * @return VerificationList
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun clientVerificationRetrieve(clientUuid: java.util.UUID, verificationUuid: java.util.UUID, verifyTypeCode: kotlin.String) : VerificationList {
        val localVariableConfig = clientVerificationRetrieveRequestConfig(clientUuid = clientUuid, verificationUuid = verificationUuid, verifyTypeCode = verifyTypeCode)

        val localVarResponse = request<Unit, VerificationList>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VerificationList
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation clientVerificationRetrieve
    *
    * @param clientUuid  
    * @param verificationUuid  
    * @param verifyTypeCode  
    * @return RequestConfig
    */
    fun clientVerificationRetrieveRequestConfig(clientUuid: java.util.UUID, verificationUuid: java.util.UUID, verifyTypeCode: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v2/clients/{client_uuid}/verifications/{verify_type_code}/{verification_uuid}/".replace("{"+"client_uuid"+"}", "$clientUuid").replace("{"+"verification_uuid"+"}", "$verificationUuid").replace("{"+"verify_type_code"+"}", "$verifyTypeCode"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
